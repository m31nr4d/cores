
build/firmware.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler>:
{
60001428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	4a68      	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	4b68      	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	4868      	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	4a68      	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	f3bf 8f6f 	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	f000 fa5c 	bl	60001904 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	2408      	movs	r4, #8
6000144e:	4b64      	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	4a64      	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	4964      	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	4864      	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	f7ff ffd1 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	4a64      	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	4964      	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	4865      	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	f7ff ffcc 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	4964      	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	4865      	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	f7ff ffd4 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	4c64      	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
60001476:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	2300      	movs	r3, #0
6000147c:	4a62      	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
60001486:	3301      	adds	r3, #1
60001488:	2bb0      	cmp	r3, #176	; 0xb0
6000148a:	d1fa      	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	4b5f      	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	2180      	movs	r1, #128	; 0x80
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	f803 1b01 	strb.w	r1, [r3], #1
60001496:	4293      	cmp	r3, r2
60001498:	d1fb      	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	4e50      	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	f8df b194 	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	f8df a194 	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	f8df 8178 	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	4a40      	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014e4:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f4:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	f000 fa06 	bl	60001910 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	4b43      	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	4944      	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	4b44      	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	2363      	movs	r3, #99	; 0x63
60001510:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001514:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	4b41      	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	4b3e      	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	681a      	ldr	r2, [r3, #0]
6000152e:	f042 0201 	orr.w	r2, r2, #1
60001532:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	685b      	ldr	r3, [r3, #4]
60001536:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	f000 fc2c 	bl	60001d94 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	4839      	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	f000 fc67 	bl	60001e20 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	4b35      	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	4a35      	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
6000155e:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001576:	07db      	lsls	r3, r3, #31
60001578:	d408      	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	492d      	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001586:	f043 0301 	orr.w	r3, r3, #1
6000158a:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	4a28      	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	4c2a      	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	6893      	ldr	r3, [r2, #8]
60001592:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
60001596:	6093      	str	r3, [r2, #8]
	configure_external_ram();
60001598:	f000 fa36 	bl	60001a08 <configure_external_ram>
	analog_init();
6000159c:	f000 f988 	bl	600018b0 <analog_init>
	pwm_init();
600015a0:	f000 fc2e 	bl	60001e00 <__pwm_init_veneer>
	tempmon_init();
600015a4:	f000 f850 	bl	60001648 <tempmon_init>
	startup_middle_hook();
600015a8:	f000 f9ae 	bl	60001908 <startup_default_middle_hook>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600015ae:	2b13      	cmp	r3, #19
600015b0:	d9fc      	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	f000 f8df 	bl	60001774 <usb_init>
600015b6:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600015b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015bc:	d3fb      	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	f000 f9a5 	bl	6000190c <startup_default_late_hook>
	__libc_init_array();
600015c2:	f000 fc35 	bl	60001e30 <____libc_init_array_veneer>
	main();
600015c6:	f000 fc37 	bl	60001e38 <__main_veneer>
	while (1) asm("WFI");
600015ca:	bf30      	wfi
600015cc:	e7fd      	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	bf00      	nop
600015d0:	aaaaaaab 	.word	0xaaaaaaab
600015d4:	400ac000 	.word	0x400ac000
600015d8:	00200007 	.word	0x00200007
600015dc:	20078000 	.word	0x20078000
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00003d80 	.word	0x00003d80
600015e8:	60001fe0 	.word	0x60001fe0
600015ec:	00000000 	.word	0x00000000
600015f0:	200016c0 	.word	0x200016c0
600015f4:	60005d64 	.word	0x60005d64
600015f8:	20000000 	.word	0x20000000
600015fc:	20002840 	.word	0x20002840
60001600:	200016c0 	.word	0x200016c0
60001604:	20001400 	.word	0x20001400
60001608:	00002cdd 	.word	0x00002cdd
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	00002ea1 	.word	0x00002ea1
60001618:	200027c0 	.word	0x200027c0
6000161c:	00002ea5 	.word	0x00002ea5
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	200027c4 	.word	0x200027c4
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001648:	4a3e      	ldr	r2, [pc, #248]	; (60001744 <tempmon_init+0xfc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000164a:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000164c:	493e      	ldr	r1, [pc, #248]	; (60001748 <tempmon_init+0x100>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000164e:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001652:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001656:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 6000174c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000165a:	f023 0301 	bic.w	r3, r3, #1
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000165e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001750 <tempmon_init+0x108>
{
60001662:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001668:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
6000166c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001670:	4d38      	ldr	r5, [pc, #224]	; (60001754 <tempmon_init+0x10c>)
60001672:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001674:	4c38      	ldr	r4, [pc, #224]	; (60001758 <tempmon_init+0x110>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001676:	4839      	ldr	r0, [pc, #228]	; (6000175c <tempmon_init+0x114>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001678:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000167a:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000167e:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001680:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001688:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000168c:	ee07 1a10 	vmov	s14, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001690:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
60001696:	4932      	ldr	r1, [pc, #200]	; (60001760 <tempmon_init+0x118>)
60001698:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000169c:	4b31      	ldr	r3, [pc, #196]	; (60001764 <tempmon_init+0x11c>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000169e:	ee37 6ac6 	vsub.f32	s12, s15, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600016a2:	4c31      	ldr	r4, [pc, #196]	; (60001768 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016a4:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600016a8:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600016ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016b0:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600016b4:	edc1 6a00 	vstr	s13, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016b8:	ee25 5a26 	vmul.f32	s10, s10, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600016bc:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016c0:	ee67 4aa6 	vmul.f32	s9, s15, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600016c4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016c8:	eec6 5a27 	vdiv.f32	s11, s12, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016cc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016d0:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016d4:	ee75 5a87 	vadd.f32	s11, s11, s14
600016d8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016dc:	ee76 7a07 	vadd.f32	s15, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600016e0:	ee15 1a90 	vmov	r1, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600016e8:	ea40 5001 	orr.w	r0, r0, r1, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016ec:	ee36 7a87 	vadd.f32	s14, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600016f0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016f4:	ee17 1a90 	vmov	r1, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600016f8:	f8d2 0190 	ldr.w	r0, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600016fc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001700:	ea03 4101 	and.w	r1, r3, r1, lsl #16
60001704:	4301      	orrs	r1, r0
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001706:	2000      	movs	r0, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001708:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000170c:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001710:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001714:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001718:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000171a:	4914      	ldr	r1, [pc, #80]	; (6000176c <tempmon_init+0x124>)
6000171c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001720:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001724:	f043 0302 	orr.w	r3, r3, #2
60001728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
6000172c:	4b10      	ldr	r3, [pc, #64]	; (60001770 <tempmon_init+0x128>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000172e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
60001732:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000173a:	2201      	movs	r2, #1
}
6000173c:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
6000173e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001742:	4770      	bx	lr
60001744:	400d8100 	.word	0x400d8100
60001748:	401f4400 	.word	0x401f4400
6000174c:	42aa0000 	.word	0x42aa0000
60001750:	42b40000 	.word	0x42b40000
60001754:	200026b0 	.word	0x200026b0
60001758:	200026ac 	.word	0x200026ac
6000175c:	200026b4 	.word	0x200026b4
60001760:	200026b8 	.word	0x200026b8
60001764:	0fff0000 	.word	0x0fff0000
60001768:	e000e400 	.word	0xe000e400
6000176c:	20001400 	.word	0x20001400
60001770:	000006e5 	.word	0x000006e5

60001774 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001774:	4b31      	ldr	r3, [pc, #196]	; (6000183c <usb_init+0xc8>)
60001776:	f640 7261 	movw	r2, #3937	; 0xf61
{
6000177a:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000177c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001780:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001784:	f000 fb44 	bl	60001e10 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001788:	4a2d      	ldr	r2, [pc, #180]	; (60001840 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000178a:	492e      	ldr	r1, [pc, #184]	; (60001844 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000178c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001790:	482d      	ldr	r0, [pc, #180]	; (60001848 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001792:	f043 0303 	orr.w	r3, r3, #3
60001796:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000179a:	4b2c      	ldr	r3, [pc, #176]	; (6000184c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
6000179c:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017a0:	6802      	ldr	r2, [r0, #0]
600017a2:	421a      	tst	r2, r3
600017a4:	d103      	bne.n	600017ae <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017a6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600017aa:	079a      	lsls	r2, r3, #30
600017ac:	d01b      	beq.n	600017e6 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017ae:	4a25      	ldr	r2, [pc, #148]	; (60001844 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600017b4:	4b24      	ldr	r3, [pc, #144]	; (60001848 <usb_init+0xd4>)
600017b6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017b8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600017bc:	f043 0302 	orr.w	r3, r3, #2
600017c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600017c4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600017c8:	079b      	lsls	r3, r3, #30
600017ca:	d4fb      	bmi.n	600017c4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600017d0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017d4:	4b1c      	ldr	r3, [pc, #112]	; (60001848 <usb_init+0xd4>)
600017d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017da:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017de:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017e0:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600017e2:	f000 fb19 	bl	60001e18 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017e6:	4a18      	ldr	r2, [pc, #96]	; (60001848 <usb_init+0xd4>)
600017e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017ec:	4c15      	ldr	r4, [pc, #84]	; (60001844 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600017ee:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017f0:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017f2:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017f4:	4b16      	ldr	r3, [pc, #88]	; (60001850 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600017f6:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017f8:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017fc:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001800:	4618      	mov	r0, r3
60001802:	f000 fb01 	bl	60001e08 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001806:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000180a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000180c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001810:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001814:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001816:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
6000181a:	641a      	str	r2, [r3, #64]	; 0x40
6000181c:	4b0d      	ldr	r3, [pc, #52]	; (60001854 <usb_init+0xe0>)
6000181e:	4a0e      	ldr	r2, [pc, #56]	; (60001858 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001820:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001828:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
6000182c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001830:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001832:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001836:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000183a:	bd10      	pop	{r4, pc}
6000183c:	400d8000 	.word	0x400d8000
60001840:	400fc000 	.word	0x400fc000
60001844:	402e0000 	.word	0x402e0000
60001848:	400d9000 	.word	0x400d9000
6000184c:	001e1c00 	.word	0x001e1c00
60001850:	20000000 	.word	0x20000000
60001854:	20001400 	.word	0x20001400
60001858:	000008d1 	.word	0x000008d1

6000185c <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
6000185c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000185e:	4b0e      	ldr	r3, [pc, #56]	; (60001898 <_reboot_Teensyduino_+0x3c>)
60001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001862:	079b      	lsls	r3, r3, #30
60001864:	d400      	bmi.n	60001868 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001866:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001868:	b672      	cpsid	i
		USB1_USBCMD = 0;
6000186a:	4b0c      	ldr	r3, [pc, #48]	; (6000189c <_reboot_Teensyduino_+0x40>)
6000186c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000186e:	4a0c      	ldr	r2, [pc, #48]	; (600018a0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001870:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001874:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001878:	490a      	ldr	r1, [pc, #40]	; (600018a4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000187a:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000187e:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001880:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001882:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001886:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000188a:	4807      	ldr	r0, [pc, #28]	; (600018a8 <_reboot_Teensyduino_+0x4c>)
6000188c:	4a07      	ldr	r2, [pc, #28]	; (600018ac <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000188e:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001890:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001892:	689b      	ldr	r3, [r3, #8]
60001894:	4798      	blx	r3
	}
	__builtin_unreachable();
60001896:	bf00      	nop
60001898:	401f4400 	.word	0x401f4400
6000189c:	402e0000 	.word	0x402e0000
600018a0:	400ac000 	.word	0x400ac000
600018a4:	00200003 	.word	0x00200003
600018a8:	20208000 	.word	0x20208000
600018ac:	eb120000 	.word	0xeb120000

600018b0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600018b0:	4b10      	ldr	r3, [pc, #64]	; (600018f4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600018b2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600018b4:	4a10      	ldr	r2, [pc, #64]	; (600018f8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600018b6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600018b8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600018bc:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600018be:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600018c0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600018c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600018c6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600018ca:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600018cc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600018ce:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600018d0:	6c93      	ldr	r3, [r2, #72]	; 0x48
600018d2:	061b      	lsls	r3, r3, #24
600018d4:	d4fc      	bmi.n	600018d0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600018d6:	4a09      	ldr	r2, [pc, #36]	; (600018fc <analog_init+0x4c>)
600018d8:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600018dc:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600018de:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600018e0:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600018e2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600018e4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600018e8:	d1fb      	bne.n	600018e2 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600018ea:	4a05      	ldr	r2, [pc, #20]	; (60001900 <analog_init+0x50>)
600018ec:	7013      	strb	r3, [r2, #0]
}
600018ee:	f85d 4b04 	ldr.w	r4, [sp], #4
600018f2:	4770      	bx	lr
600018f4:	400fc000 	.word	0x400fc000
600018f8:	400c4000 	.word	0x400c4000
600018fc:	400c8000 	.word	0x400c8000
60001900:	200027fb 	.word	0x200027fb

60001904 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001904:	4770      	bx	lr
60001906:	bf00      	nop

60001908 <startup_default_middle_hook>:
60001908:	4770      	bx	lr
6000190a:	bf00      	nop

6000190c <startup_default_late_hook>:
6000190c:	4770      	bx	lr
6000190e:	bf00      	nop

60001910 <configure_cache>:
{
60001910:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001912:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001916:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001918:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000191a:	482b      	ldr	r0, [pc, #172]	; (600019c8 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000191c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001920:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001924:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001926:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000192a:	4828      	ldr	r0, [pc, #160]	; (600019cc <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000192c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001930:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001932:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001936:	4826      	ldr	r0, [pc, #152]	; (600019d0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001938:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000193c:	4a25      	ldr	r2, [pc, #148]	; (600019d4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000193e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001942:	4c25      	ldr	r4, [pc, #148]	; (600019d8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001944:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001948:	4824      	ldr	r0, [pc, #144]	; (600019dc <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000194a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000194e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001952:	4c23      	ldr	r4, [pc, #140]	; (600019e0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001954:	4823      	ldr	r0, [pc, #140]	; (600019e4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001956:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000195a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000195e:	4c22      	ldr	r4, [pc, #136]	; (600019e8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001960:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001964:	4821      	ldr	r0, [pc, #132]	; (600019ec <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001966:	4a22      	ldr	r2, [pc, #136]	; (600019f0 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001968:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000196c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001970:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001974:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001978:	4c1e      	ldr	r4, [pc, #120]	; (600019f4 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000197a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000197c:	481e      	ldr	r0, [pc, #120]	; (600019f8 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000197e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001982:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001986:	4a1d      	ldr	r2, [pc, #116]	; (600019fc <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001988:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000198c:	4c1c      	ldr	r4, [pc, #112]	; (60001a00 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000198e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001992:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001994:	481b      	ldr	r0, [pc, #108]	; (60001a04 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001996:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000199a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000199e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600019a6:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019aa:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019ae:	f3bf 8f4f 	dsb	sy
	asm("isb");
600019b2:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600019b6:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600019ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600019be:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600019c2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600019c6:	4770      	bx	lr
600019c8:	1000003f 	.word	0x1000003f
600019cc:	03080025 	.word	0x03080025
600019d0:	00100009 	.word	0x00100009
600019d4:	20002840 	.word	0x20002840
600019d8:	00200013 	.word	0x00200013
600019dc:	07020021 	.word	0x07020021
600019e0:	20000014 	.word	0x20000014
600019e4:	13080025 	.word	0x13080025
600019e8:	10000009 	.word	0x10000009
600019ec:	20200016 	.word	0x20200016
600019f0:	130b0027 	.word	0x130b0027
600019f4:	40000017 	.word	0x40000017
600019f8:	60000018 	.word	0x60000018
600019fc:	070b002f 	.word	0x070b002f
60001a00:	70000019 	.word	0x70000019
60001a04:	130b002f 	.word	0x130b002f

60001a08 <configure_external_ram>:
{
60001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a0a:	4bb8      	ldr	r3, [pc, #736]	; (60001cec <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a0c:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a0e:	4eb8      	ldr	r6, [pc, #736]	; (60001cf0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a10:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a12:	4fb8      	ldr	r7, [pc, #736]	; (60001cf4 <configure_external_ram+0x2ec>)
{
60001a14:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a16:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a1a:	49b7      	ldr	r1, [pc, #732]	; (60001cf8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a1c:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a20:	4db6      	ldr	r5, [pc, #728]	; (60001cfc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a22:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a26:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a2a:	4cb5      	ldr	r4, [pc, #724]	; (60001d00 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a2c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a30:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a34:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a38:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a3c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a40:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a44:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a46:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a48:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a4a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a4c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a5a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a5e:	4aa9      	ldr	r2, [pc, #676]	; (60001d04 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a60:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a64:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a68:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a6c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a70:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a74:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a76:	4ba4      	ldr	r3, [pc, #656]	; (60001d08 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a78:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a7a:	48a4      	ldr	r0, [pc, #656]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a7c:	49a4      	ldr	r1, [pc, #656]	; (60001d10 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a7e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a80:	4aa4      	ldr	r2, [pc, #656]	; (60001d14 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a82:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001a88:	f043 030c 	orr.w	r3, r3, #12
60001a8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a94:	6803      	ldr	r3, [r0, #0]
60001a96:	f043 0302 	orr.w	r3, r3, #2
60001a9a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a9c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a9e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001aa0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aa4:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001aa6:	4b9c      	ldr	r3, [pc, #624]	; (60001d18 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001aa8:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001aaa:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001aac:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001aae:	4c9b      	ldr	r4, [pc, #620]	; (60001d1c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ab0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ab2:	4a9b      	ldr	r2, [pc, #620]	; (60001d20 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ab8:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001aba:	68c3      	ldr	r3, [r0, #12]
60001abc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001ac0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ac2:	6a03      	ldr	r3, [r0, #32]
60001ac4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ac6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ac8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001aca:	6a03      	ldr	r3, [r0, #32]
60001acc:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001ace:	4a95      	ldr	r2, [pc, #596]	; (60001d24 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ad0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	4c95      	ldr	r4, [pc, #596]	; (60001d28 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ad4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001ad6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001ad8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001ada:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001adc:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001ae4:	f043 0301 	orr.w	r3, r3, #1
60001ae8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aec:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001af0:	498e      	ldr	r1, [pc, #568]	; (60001d2c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001af2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001af6:	f043 0301 	orr.w	r3, r3, #1
60001afa:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001afe:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b02:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b04:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b06:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b08:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b0c:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b0e:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b16:	6803      	ldr	r3, [r0, #0]
60001b18:	f023 0302 	bic.w	r3, r3, #2
60001b1c:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b1e:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b20:	4b83      	ldr	r3, [pc, #524]	; (60001d30 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b22:	4984      	ldr	r1, [pc, #528]	; (60001d34 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b24:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b26:	f843 2b04 	str.w	r2, [r3], #4
60001b2a:	428b      	cmp	r3, r1
60001b2c:	d1fb      	bne.n	60001b26 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b2e:	4a77      	ldr	r2, [pc, #476]	; (60001d0c <configure_external_ram+0x304>)
60001b30:	6813      	ldr	r3, [r2, #0]
60001b32:	f043 0301 	orr.w	r3, r3, #1
60001b36:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b38:	6813      	ldr	r3, [r2, #0]
60001b3a:	f013 0301 	ands.w	r3, r3, #1
60001b3e:	d1fb      	bne.n	60001b38 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b40:	487a      	ldr	r0, [pc, #488]	; (60001d2c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b42:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b44:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b48:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b4a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b4e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b50:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b54:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b58:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b5c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b60:	4975      	ldr	r1, [pc, #468]	; (60001d38 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b62:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b66:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b6a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b6e:	4873      	ldr	r0, [pc, #460]	; (60001d3c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b70:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b74:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b78:	4c71      	ldr	r4, [pc, #452]	; (60001d40 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b7a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b7e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b82:	4970      	ldr	r1, [pc, #448]	; (60001d44 <configure_external_ram+0x33c>)
60001b84:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b8a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b8e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b92:	485e      	ldr	r0, [pc, #376]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b94:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b98:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b9c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ba0:	6943      	ldr	r3, [r0, #20]
60001ba2:	07da      	lsls	r2, r3, #31
60001ba4:	d5fc      	bpl.n	60001ba0 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ba6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ba8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001baa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bae:	4957      	ldr	r1, [pc, #348]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bb0:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001bb2:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bb6:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bba:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bbe:	694b      	ldr	r3, [r1, #20]
60001bc0:	07db      	lsls	r3, r3, #31
60001bc2:	d5fc      	bpl.n	60001bbe <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bc4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001bc6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bcc:	4a4f      	ldr	r2, [pc, #316]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bce:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001bd0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bd4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bd8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bdc:	6953      	ldr	r3, [r2, #20]
60001bde:	07df      	lsls	r7, r3, #31
60001be0:	d5fc      	bpl.n	60001bdc <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001be2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001be4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001be6:	4858      	ldr	r0, [pc, #352]	; (60001d48 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be8:	4948      	ldr	r1, [pc, #288]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bea:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001bec:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bf0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf8:	694b      	ldr	r3, [r1, #20]
60001bfa:	07de      	lsls	r6, r3, #31
60001bfc:	d5fc      	bpl.n	60001bf8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001bfe:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c02:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001c06:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001c08:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001c0a:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c0c:	4293      	cmp	r3, r2
60001c0e:	d165      	bne.n	60001cdc <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001c10:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c16:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c18:	483c      	ldr	r0, [pc, #240]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001c1a:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c1e:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c22:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c26:	6943      	ldr	r3, [r0, #20]
60001c28:	07dd      	lsls	r5, r3, #31
60001c2a:	d5fc      	bpl.n	60001c26 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c2c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c2e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c32:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c34:	4a35      	ldr	r2, [pc, #212]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c36:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001c38:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c40:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c44:	6953      	ldr	r3, [r2, #20]
60001c46:	07dc      	lsls	r4, r3, #31
60001c48:	d5fc      	bpl.n	60001c44 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c4a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c4c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c54:	492d      	ldr	r1, [pc, #180]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c56:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001c58:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c5c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c60:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c64:	694b      	ldr	r3, [r1, #20]
60001c66:	07d8      	lsls	r0, r3, #31
60001c68:	d5fc      	bpl.n	60001c64 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c6a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c6c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c74:	4a25      	ldr	r2, [pc, #148]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c76:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001c78:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c7c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c80:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c84:	6953      	ldr	r3, [r2, #20]
60001c86:	07d9      	lsls	r1, r3, #31
60001c88:	d5fc      	bpl.n	60001c84 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c8a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001c90:	482d      	ldr	r0, [pc, #180]	; (60001d48 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c92:	491e      	ldr	r1, [pc, #120]	; (60001d0c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c94:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001c96:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001c9a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c9e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ca2:	694b      	ldr	r3, [r1, #20]
60001ca4:	07da      	lsls	r2, r3, #31
60001ca6:	d5fc      	bpl.n	60001ca2 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001ca8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001cac:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001cb0:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001cb2:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001cb4:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001cb6:	4293      	cmp	r3, r2
60001cb8:	d050      	beq.n	60001d5c <configure_external_ram+0x354>
			external_psram_size = 8;
60001cba:	4b24      	ldr	r3, [pc, #144]	; (60001d4c <configure_external_ram+0x344>)
60001cbc:	2208      	movs	r2, #8
60001cbe:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
60001cc2:	701a      	strb	r2, [r3, #0]
			external_psram_size * 0x100000 -
60001cc4:	4922      	ldr	r1, [pc, #136]	; (60001d50 <configure_external_ram+0x348>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cc6:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001cc8:	4a22      	ldr	r2, [pc, #136]	; (60001d54 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cca:	2301      	movs	r3, #1
60001ccc:	9000      	str	r0, [sp, #0]
			external_psram_size * 0x100000 -
60001cce:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cd0:	4821      	ldr	r0, [pc, #132]	; (60001d58 <configure_external_ram+0x350>)
60001cd2:	4422      	add	r2, r4
60001cd4:	f000 f8a8 	bl	60001e28 <__sm_set_pool_veneer>
}
60001cd8:	b003      	add	sp, #12
60001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cdc:	4b1e      	ldr	r3, [pc, #120]	; (60001d58 <configure_external_ram+0x350>)
60001cde:	2200      	movs	r2, #0
60001ce0:	e9c3 2200 	strd	r2, r2, [r3]
60001ce4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001ce8:	b003      	add	sp, #12
60001cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001cec:	401f8000 	.word	0x401f8000
60001cf0:	0001b0f9 	.word	0x0001b0f9
60001cf4:	000110f9 	.word	0x000110f9
60001cf8:	401f8400 	.word	0x401f8400
60001cfc:	000170f9 	.word	0x000170f9
60001d00:	400fc000 	.word	0x400fc000
60001d04:	1ffffcff 	.word	0x1ffffcff
60001d08:	a0000300 	.word	0xa0000300
60001d0c:	402a4000 	.word	0x402a4000
60001d10:	402a8000 	.word	0x402a8000
60001d14:	ffff0012 	.word	0xffff0012
60001d18:	00f737ff 	.word	0x00f737ff
60001d1c:	80000040 	.word	0x80000040
60001d20:	7cf0ff00 	.word	0x7cf0ff00
60001d24:	830f00ff 	.word	0x830f00ff
60001d28:	00020063 	.word	0x00020063
60001d2c:	5af05af0 	.word	0x5af05af0
60001d30:	402a4200 	.word	0x402a4200
60001d34:	402a4300 	.word	0x402a4300
60001d38:	3018049f 	.word	0x3018049f
60001d3c:	0a1806eb 	.word	0x0a1806eb
60001d40:	0a180638 	.word	0x0a180638
60001d44:	26013206 	.word	0x26013206
60001d48:	00030004 	.word	0x00030004
60001d4c:	200027fc 	.word	0x200027fc
60001d50:	70000000 	.word	0x70000000
60001d54:	70000000 	.word	0x70000000
60001d58:	200021e8 	.word	0x200021e8
	FLEXSPI2_IPCR0 = addr;
60001d5c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d64:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d66:	4809      	ldr	r0, [pc, #36]	; (60001d8c <configure_external_ram+0x384>)
	FLEXSPI2_IPCR0 = addr;
60001d68:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d6c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d70:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d74:	6943      	ldr	r3, [r0, #20]
60001d76:	07db      	lsls	r3, r3, #31
60001d78:	d5fc      	bpl.n	60001d74 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d7a:	2101      	movs	r1, #1
			external_psram_size = 16;
60001d7c:	4b04      	ldr	r3, [pc, #16]	; (60001d90 <configure_external_ram+0x388>)
60001d7e:	2210      	movs	r2, #16
60001d80:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d84:	6141      	str	r1, [r0, #20]
			external_psram_size = 16;
60001d86:	701a      	strb	r2, [r3, #0]
60001d88:	e79c      	b.n	60001cc4 <configure_external_ram+0x2bc>
60001d8a:	bf00      	nop
60001d8c:	402a4000 	.word	0x402a4000
60001d90:	200027fc 	.word	0x200027fc

60001d94 <usb_pll_start>:
{
60001d94:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d96:	4a15      	ldr	r2, [pc, #84]	; (60001dec <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d98:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001da2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001da6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001daa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001dae:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001db0:	f013 0f02 	tst.w	r3, #2
60001db4:	d10e      	bne.n	60001dd4 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001db6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001dba:	d00f      	beq.n	60001ddc <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001dbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001dc0:	d00e      	beq.n	60001de0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001dc2:	2b00      	cmp	r3, #0
60001dc4:	daf3      	bge.n	60001dae <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001dc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001dca:	d10b      	bne.n	60001de4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001dcc:	065b      	lsls	r3, r3, #25
60001dce:	d50b      	bpl.n	60001de8 <usb_pll_start+0x54>
}
60001dd0:	bcf0      	pop	{r4, r5, r6, r7}
60001dd2:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001dd4:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001dd6:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001dd8:	6190      	str	r0, [r2, #24]
			continue;
60001dda:	e7e8      	b.n	60001dae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ddc:	6155      	str	r5, [r2, #20]
			continue;
60001dde:	e7e6      	b.n	60001dae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001de0:	6156      	str	r6, [r2, #20]
			continue;
60001de2:	e7e4      	b.n	60001dae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001de4:	6191      	str	r1, [r2, #24]
			continue;
60001de6:	e7e2      	b.n	60001dae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001de8:	6157      	str	r7, [r2, #20]
			continue;
60001dea:	e7e0      	b.n	60001dae <usb_pll_start+0x1a>
60001dec:	400d8000 	.word	0x400d8000

60001df0 <_init>:
60001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001df2:	bf00      	nop
60001df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001df6:	bc08      	pop	{r3}
60001df8:	469e      	mov	lr, r3
60001dfa:	4770      	bx	lr
60001dfc:	0000      	movs	r0, r0
	...

60001e00 <__pwm_init_veneer>:
60001e00:	f85f f000 	ldr.w	pc, [pc]	; 60001e04 <__pwm_init_veneer+0x4>
60001e04:	00002309 	.word	0x00002309

60001e08 <__memset_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__memset_veneer+0x4>
60001e0c:	00003841 	.word	0x00003841

60001e10 <__usb_init_serialnumber_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__usb_init_serialnumber_veneer+0x4>
60001e14:	00002b6d 	.word	0x00002b6d

60001e18 <__delay_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__delay_veneer+0x4>
60001e1c:	00001345 	.word	0x00001345

60001e20 <__set_arm_clock_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__set_arm_clock_veneer+0x4>
60001e24:	0000039d 	.word	0x0000039d

60001e28 <__sm_set_pool_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__sm_set_pool_veneer+0x4>
60001e2c:	000021b1 	.word	0x000021b1

60001e30 <____libc_init_array_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <____libc_init_array_veneer+0x4>
60001e34:	000036b5 	.word	0x000036b5

60001e38 <__main_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__main_veneer+0x4>
60001e3c:	00000079 	.word	0x00000079

60001e40 <__frame_dummy_init_array_entry>:
60001e40:	00000045 00000061 00001049 000013fd     E...a...I.......
60001e50:	00001489 00001b91 00001c1d 00001ca1     ................
60001e60:	00001d2d 00002061 000020ed 00002f5d     -...a ... ..]/..
60001e70:	00002fb9                                ./..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	b510      	push	{r4, lr}
      22:	4c05      	ldr	r4, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
                        errno = ENOMEM;
      24:	7823      	ldrb	r3, [r4, #0]
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x11>
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xd>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af 8000 	nop.w
      32:	2301      	movs	r3, #1
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      38:	20001a28 	.word	0x20001a28
}

void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
      3c:	00000000 	.word	0x00000000
	qh->config = config;
      40:	60008400 	.word	0x60008400

00000044 <frame_dummy>:
	qh->callback_function = callback;
      44:	b508      	push	{r3, lr}
      46:	4b03      	ldr	r3, [pc, #12]	; (54 <frame_dummy+0x10>)
	qh->next = 1; // Terminate bit = 1
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4903      	ldr	r1, [pc, #12]	; (58 <frame_dummy+0x14>)
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      4c:	4803      	ldr	r0, [pc, #12]	; (5c <frame_dummy+0x18>)
      4e:	f3af 8000 	nop.w
      52:	bd08      	pop	{r3, pc}
      54:	00000000 	.word	0x00000000
      58:	20001a2c 	.word	0x20001a2c
      5c:	60008400 	.word	0x60008400

00000060 <_GLOBAL__sub_I_console>:
// Refer to serial devices by use
usb_serial_class& console = SerialUSB;
HardwareSerial& gps = Serial1;

char nmeaBuffer[1024];
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
      60:	2200      	movs	r2, #0
      62:	4902      	ldr	r1, [pc, #8]	; (6c <_GLOBAL__sub_I_console+0xc>)
      64:	4802      	ldr	r0, [pc, #8]	; (70 <_GLOBAL__sub_I_console+0x10>)
      66:	f003 b939 	b.w	32dc <MicroNMEA::MicroNMEA(void*, unsigned char)>
      6a:	bf00      	nop
      6c:	20002244 	.word	0x20002244
      70:	200021f8 	.word	0x200021f8
		return ADC2_R0;
      74:	00000000 	.word	0x00000000

00000078 <main>:
	if (pin > sizeof(pin_to_channel)) return 0;
      78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}
      7c:	4db0      	ldr	r5, [pc, #704]	; (340 <main+0x2c8>)
      7e:	f240 27ee 	movw	r7, #750	; 0x2ee
      82:	4cb0      	ldr	r4, [pc, #704]	; (344 <main+0x2cc>)
      84:	f8df 830c 	ldr.w	r8, [pc, #780]	; 394 <main+0x31c>
      88:	f8df 930c 	ldr.w	r9, [pc, #780]	; 398 <main+0x320>
class usb_serial_class : public Stream
{
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
      8c:	682e      	ldr	r6, [r5, #0]
bool ledState = LOW;

extern "C" int main(void)
{
      8e:	ed2d 8b06 	vpush	{d8-d10}
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
      92:	f002 fd97 	bl	2bc4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      96:	7823      	ldrb	r3, [r4, #0]
      98:	2b00      	cmp	r3, #0
      9a:	f000 813a 	beq.w	312 <main+0x29a>
      9e:	f898 3000 	ldrb.w	r3, [r8]
      a2:	07db      	lsls	r3, r3, #31
      a4:	f140 8135 	bpl.w	312 <main+0x29a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      a8:	682b      	ldr	r3, [r5, #0]
      aa:	f8d9 2000 	ldr.w	r2, [r9]
      ae:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      b0:	2b0e      	cmp	r3, #14
      b2:	f240 812e 	bls.w	312 <main+0x29a>
    while (SerialUSB1) {}    // Wait for Debugger connect
    debug.begin(SerialUSB1);  // Start Debug Serial e.g. COM11
    #endif

    console.begin(115200); // console
    gps.begin(9600); // gps
      b6:	2200      	movs	r2, #0
      b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
      bc:	48a2      	ldr	r0, [pc, #648]	; (348 <main+0x2d0>)
			} else if (pin == 23) {
				CORE_PIN23_PORTSET = CORE_PIN23_BITMASK;
			} else if (pin == 24) {
				CORE_PIN24_PORTSET = CORE_PIN24_BITMASK;
			} else if (pin == 25) {
				CORE_PIN25_PORTSET = CORE_PIN25_BITMASK;
      be:	f04f 4784 	mov.w	r7, #1107296256	; 0x42000000
      c2:	f001 faf1 	bl	16a8 <HardwareSerial::begin(unsigned long, unsigned short)>

    pinMode(13, OUTPUT);
      c6:	2101      	movs	r1, #1
      c8:	200d      	movs	r0, #13
      ca:	f44f 5800 	mov.w	r8, #8192	; 0x2000
      ce:	f000 fad1 	bl	674 <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
      d2:	4b9e      	ldr	r3, [pc, #632]	; (34c <main+0x2d4>)
      d4:	2208      	movs	r2, #8
    digitalWriteFast(13, LOW);
    pinMode(25, OUTPUT);
      d6:	2101      	movs	r1, #1
      d8:	2019      	movs	r0, #25
      da:	4c9d      	ldr	r4, [pc, #628]	; (350 <main+0x2d8>)
      dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      e0:	f000 fac8 	bl	674 <pinMode>
    digitalWriteFast(25, HIGH);
    pinMode(26, OUTPUT);
      e4:	2101      	movs	r1, #1
      e6:	201a      	movs	r0, #26
				CORE_PIN25_PORTSET = CORE_PIN25_BITMASK;
      e8:	f8c7 8084 	str.w	r8, [r7, #132]	; 0x84
      ec:	f000 fac2 	bl	674 <pinMode>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
      f0:	4d98      	ldr	r5, [pc, #608]	; (354 <main+0x2dc>)
				CORE_PIN26_PORTSET = CORE_PIN26_BITMASK;
      f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
        console.println(int(nmea.getSecond()));

        long latitude_mdeg = nmea.getLatitude();
        long longitude_mdeg = nmea.getLongitude();
        console.print("Latitude (deg): ");
        console.println(latitude_mdeg / 1000000., 6);
      f6:	ed9f 9b8e 	vldr	d9, [pc, #568]	; 330 <main+0x2b8>
        console.println(longitude_mdeg / 1000000., 6);

        long alt;
        console.print("Altitude (m): ");
        if (nmea.getAltitude(alt))
          console.println(alt / 1000., 3);
      fa:	ed9f 8b8f 	vldr	d8, [pc, #572]	; 338 <main+0x2c0>
      fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (gps.available()) {
     102:	4e91      	ldr	r6, [pc, #580]	; (348 <main+0x2d0>)
			} else if (pin == 23) {
				CORE_PIN23_PORTCLEAR = CORE_PIN23_BITMASK;
			} else if (pin == 24) {
				CORE_PIN24_PORTCLEAR = CORE_PIN24_BITMASK;
			} else if (pin == 25) {
				CORE_PIN25_PORTCLEAR = CORE_PIN25_BITMASK;
     104:	f8c7 8088 	str.w	r8, [r7, #136]	; 0x88
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
	}
}
     108:	e006      	b.n	118 <main+0xa0>
            char c = gps.read();
     10a:	f001 fa57 	bl	15bc <HardwareSerial::read()>
     10e:	4601      	mov	r1, r0
            nmea.process(c);
     110:	4620      	mov	r0, r4
     112:	b2c9      	uxtb	r1, r1
     114:	f003 fa36 	bl	3584 <MicroNMEA::process(char)>
        while (gps.available()) {
     118:	4630      	mov	r0, r6
     11a:	f001 fa01 	bl	1520 <HardwareSerial::available()>
     11e:	4603      	mov	r3, r0
            char c = gps.read();
     120:	4630      	mov	r0, r6
        while (gps.available()) {
     122:	2b00      	cmp	r3, #0
     124:	d1f1      	bne.n	10a <main+0x92>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     126:	210b      	movs	r1, #11
     128:	488b      	ldr	r0, [pc, #556]	; (358 <main+0x2e0>)
				CORE_PIN25_PORTSET = CORE_PIN25_BITMASK;
     12a:	f8c7 8084 	str.w	r8, [r7, #132]	; 0x84
     12e:	f002 fc8b 	bl	2a48 <usb_serial_write>
        console.println(nmea.isValid() ? "yes" : "no");
     132:	7d22      	ldrb	r2, [r4, #20]
     134:	4b89      	ldr	r3, [pc, #548]	; (35c <main+0x2e4>)
     136:	2a00      	cmp	r2, #0
     138:	4889      	ldr	r0, [pc, #548]	; (360 <main+0x2e8>)
     13a:	bf12      	itee	ne
     13c:	2103      	movne	r1, #3
     13e:	2102      	moveq	r1, #2
     140:	4618      	moveq	r0, r3
     142:	f002 fc81 	bl	2a48 <usb_serial_write>
     146:	4628      	mov	r0, r5
     148:	f001 f834 	bl	11b4 <Print::println()>
     14c:	210d      	movs	r1, #13
     14e:	4885      	ldr	r0, [pc, #532]	; (364 <main+0x2ec>)
     150:	f002 fc7a 	bl	2a48 <usb_serial_write>
     * @brief Get the navigation system in use
     * @details `N` = GNSS, `P` = GPS, `L` = GLONASS, `A` = Galileo, `\0` = none
     * @return char
     */
    char getNavSystem(void) const {
      return _navSystem;
     154:	7ce0      	ldrb	r0, [r4, #19]
        if (nmea.getNavSystem())
     156:	2800      	cmp	r0, #0
     158:	f000 80c6 	beq.w	2e8 <main+0x270>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     15c:	f002 fc5e 	bl	2a1c <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
     160:	4628      	mov	r0, r5
     162:	f001 f827 	bl	11b4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     166:	2111      	movs	r1, #17
     168:	487f      	ldr	r0, [pc, #508]	; (368 <main+0x2f0>)
     16a:	f002 fc6d 	bl	2a48 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     16e:	220a      	movs	r2, #10
     170:	2300      	movs	r3, #0
     172:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
     176:	4628      	mov	r0, r5
     178:	f001 f82a 	bl	11d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     17c:	4628      	mov	r0, r5
     17e:	f001 f819 	bl	11b4 <Print::println()>
     182:	2106      	movs	r1, #6
     184:	4879      	ldr	r0, [pc, #484]	; (36c <main+0x2f4>)
     186:	f002 fc5f 	bl	2a48 <usb_serial_write>
        console.println(nmea.getHDOP() / 10., 1);
     18a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
     18e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     192:	2101      	movs	r1, #1
     194:	ee07 3a10 	vmov	s14, r3
     198:	4628      	mov	r0, r5
     19a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     19e:	ee87 0b00 	vdiv.f64	d0, d7, d0
     1a2:	f001 f821 	bl	11e8 <Print::printFloat(double, unsigned char)>
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     1a6:	4628      	mov	r0, r5
     1a8:	f001 f804 	bl	11b4 <Print::println()>
     1ac:	210b      	movs	r1, #11
     1ae:	4870      	ldr	r0, [pc, #448]	; (370 <main+0x2f8>)
     1b0:	f002 fc4a 	bl	2a48 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     1b4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
     1b6:	4628      	mov	r0, r5
     1b8:	f000 fff0 	bl	119c <Print::print(long)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     1bc:	202d      	movs	r0, #45	; 0x2d
     1be:	f002 fc2d 	bl	2a1c <usb_serial_putchar>
     1c2:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
     1c6:	4628      	mov	r0, r5
     1c8:	f000 ffe8 	bl	119c <Print::print(long)>
     1cc:	202d      	movs	r0, #45	; 0x2d
     1ce:	f002 fc25 	bl	2a1c <usb_serial_putchar>
     1d2:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
     1d6:	4628      	mov	r0, r5
     1d8:	f000 ffe0 	bl	119c <Print::print(long)>
     1dc:	2054      	movs	r0, #84	; 0x54
     1de:	f002 fc1d 	bl	2a1c <usb_serial_putchar>
     1e2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
     1e6:	4628      	mov	r0, r5
     1e8:	f000 ffd8 	bl	119c <Print::print(long)>
     1ec:	203a      	movs	r0, #58	; 0x3a
     1ee:	f002 fc15 	bl	2a1c <usb_serial_putchar>
     1f2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
     1f6:	4628      	mov	r0, r5
     1f8:	f000 ffd0 	bl	119c <Print::print(long)>
     1fc:	203a      	movs	r0, #58	; 0x3a
     1fe:	f002 fc0d 	bl	2a1c <usb_serial_putchar>
     202:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
     206:	4628      	mov	r0, r5
     208:	f000 ffc8 	bl	119c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     20c:	4628      	mov	r0, r5
     20e:	f000 ffd1 	bl	11b4 <Print::println()>
     * @brief Get the latitude, in millionths of a degree
     * @details North is positive.
     * @return long
     */
    long getLatitude(void) const {
      return _latitude;
     212:	ed94 aa06 	vldr	s20, [r4, #24]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     216:	2110      	movs	r1, #16
     218:	4856      	ldr	r0, [pc, #344]	; (374 <main+0x2fc>)
     * @brief Get the longitude, in millionths of a degree
     * @details East is positive.
     * @return long
     */
    long getLongitude(void) const {
      return _longitude;
     21a:	69e6      	ldr	r6, [r4, #28]
     21c:	f002 fc14 	bl	2a48 <usb_serial_write>
        console.println(latitude_mdeg / 1000000., 6);
     220:	eeb8 0bca 	vcvt.f64.s32	d0, s20
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     224:	2106      	movs	r1, #6
     226:	4628      	mov	r0, r5
     228:	ee80 0b09 	vdiv.f64	d0, d0, d9
     22c:	f000 ffdc 	bl	11e8 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     230:	4628      	mov	r0, r5
     232:	f000 ffbf 	bl	11b4 <Print::println()>
     236:	2111      	movs	r1, #17
     238:	484f      	ldr	r0, [pc, #316]	; (378 <main+0x300>)
     23a:	f002 fc05 	bl	2a48 <usb_serial_write>
        console.println(longitude_mdeg / 1000000., 6);
     23e:	ee07 6a90 	vmov	s15, r6
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     242:	2106      	movs	r1, #6
     244:	4628      	mov	r0, r5
     246:	eeb8 0be7 	vcvt.f64.s32	d0, s15
     24a:	ee80 0b09 	vdiv.f64	d0, d0, d9
     24e:	f000 ffcb 	bl	11e8 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     252:	4628      	mov	r0, r5
     254:	f000 ffae 	bl	11b4 <Print::println()>
     258:	210e      	movs	r1, #14
     25a:	4848      	ldr	r0, [pc, #288]	; (37c <main+0x304>)
     25c:	f002 fbf4 	bl	2a48 <usb_serial_write>
     * @param alt Reference to long value where altitude is to be stored
     * @return true Altitude is valid
     * @return false Altitude not valid
     */
    bool getAltitude(long &alt) const {
      if (_altitudeValid)
     260:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
     264:	2b00      	cmp	r3, #0
     266:	d04c      	beq.n	302 <main+0x28a>
          console.println(alt / 1000., 3);
     268:	edd4 7a08 	vldr	s15, [r4, #32]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     26c:	2103      	movs	r1, #3
     26e:	4628      	mov	r0, r5
     270:	eeb8 0be7 	vcvt.f64.s32	d0, s15
     274:	ee80 0b08 	vdiv.f64	d0, d0, d8
     278:	f000 ffb6 	bl	11e8 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     27c:	4628      	mov	r0, r5
     27e:	f000 ff99 	bl	11b4 <Print::println()>
     282:	2107      	movs	r1, #7
     284:	483e      	ldr	r0, [pc, #248]	; (380 <main+0x308>)
     286:	f002 fbdf 	bl	2a48 <usb_serial_write>
        else
          console.println("not available");

        console.print("Speed: ");
        console.println(nmea.getSpeed() / 1000., 3);
     28a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     28e:	2103      	movs	r1, #3
     290:	4628      	mov	r0, r5
     292:	eeb8 0be7 	vcvt.f64.s32	d0, s15
     296:	ee80 0b08 	vdiv.f64	d0, d0, d8
     29a:	f000 ffa5 	bl	11e8 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     29e:	4628      	mov	r0, r5
     2a0:	f000 ff88 	bl	11b4 <Print::println()>
     2a4:	2108      	movs	r1, #8
     2a6:	4837      	ldr	r0, [pc, #220]	; (384 <main+0x30c>)
     2a8:	f002 fbce 	bl	2a48 <usb_serial_write>
        console.print("Course: ");
        console.println(nmea.getCourse() / 1000., 3);
     2ac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     2b0:	2103      	movs	r1, #3
     2b2:	4628      	mov	r0, r5
     2b4:	eeb8 0be7 	vcvt.f64.s32	d0, s15
     2b8:	ee80 0b08 	vdiv.f64	d0, d0, d8
     2bc:	f000 ff94 	bl	11e8 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     2c0:	4628      	mov	r0, r5
     2c2:	f000 ff77 	bl	11b4 <Print::println()>
     2c6:	2117      	movs	r1, #23
     2c8:	482f      	ldr	r0, [pc, #188]	; (388 <main+0x310>)
     2ca:	f002 fbbd 	bl	2a48 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     2ce:	4628      	mov	r0, r5
     2d0:	f000 ff70 	bl	11b4 <Print::println()>

        console.println("-----------------------");
        nmea.clear();
     2d4:	4620      	mov	r0, r4
     2d6:	f003 f82f 	bl	3338 <MicroNMEA::clear()>

        nmea.isValid() ? digitalWriteFast(26, LOW) : digitalWriteFast(26, HIGH);
     2da:	7d23      	ldrb	r3, [r4, #20]
     2dc:	b163      	cbz	r3, 2f8 <main+0x280>
				CORE_PIN26_PORTCLEAR = CORE_PIN26_BITMASK;
     2de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     2e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
}
     2e6:	e70c      	b.n	102 <main+0x8a>
     2e8:	2104      	movs	r1, #4
     2ea:	4828      	ldr	r0, [pc, #160]	; (38c <main+0x314>)
     2ec:	f002 fbac 	bl	2a48 <usb_serial_write>
     2f0:	4628      	mov	r0, r5
     2f2:	f000 ff5f 	bl	11b4 <Print::println()>
     2f6:	e736      	b.n	166 <main+0xee>
				CORE_PIN26_PORTSET = CORE_PIN26_BITMASK;
     2f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     2fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
}
     300:	e6ff      	b.n	102 <main+0x8a>
     302:	210d      	movs	r1, #13
     304:	4822      	ldr	r0, [pc, #136]	; (390 <main+0x318>)
     306:	f002 fb9f 	bl	2a48 <usb_serial_write>
     30a:	4628      	mov	r0, r5
     30c:	f000 ff52 	bl	11b4 <Print::println()>
     310:	e7b7      	b.n	282 <main+0x20a>
			uint32_t elapsed = systick_millis_count - millis_begin;
     312:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     314:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     316:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     318:	b132      	cbz	r2, 328 <main+0x2b0>
				if (elapsed > 2000) break;
     31a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     31e:	f63f aeca 	bhi.w	b6 <main+0x3e>
			yield();
     322:	f002 fc4f 	bl	2bc4 <yield>
		while (!(*this)) {
     326:	e6b4      	b.n	92 <main+0x1a>
				if (elapsed > 750) break;
     328:	42bb      	cmp	r3, r7
     32a:	d9fa      	bls.n	322 <main+0x2aa>
     32c:	e6c3      	b.n	b6 <main+0x3e>
     32e:	bf00      	nop
     330:	00000000 	.word	0x00000000
     334:	412e8480 	.word	0x412e8480
     338:	00000000 	.word	0x00000000
     33c:	408f4000 	.word	0x408f4000
     340:	200027c4 	.word	0x200027c4
     344:	20002809 	.word	0x20002809
     348:	20001a44 	.word	0x20001a44
     34c:	42004000 	.word	0x42004000
     350:	200021f8 	.word	0x200021f8
     354:	20000dbc 	.word	0x20000dbc
     358:	2000085c 	.word	0x2000085c
     35c:	20000858 	.word	0x20000858
     360:	20000854 	.word	0x20000854
     364:	20000868 	.word	0x20000868
     368:	20000880 	.word	0x20000880
     36c:	20000894 	.word	0x20000894
     370:	2000089c 	.word	0x2000089c
     374:	200008a8 	.word	0x200008a8
     378:	200008bc 	.word	0x200008bc
     37c:	200008d0 	.word	0x200008d0
     380:	200008e0 	.word	0x200008e0
     384:	200008e8 	.word	0x200008e8
     388:	200008f4 	.word	0x200008f4
     38c:	20000878 	.word	0x20000878
     390:	2000090c 	.word	0x2000090c
     394:	20002808 	.word	0x20002808
     398:	200027e0 	.word	0x200027e0

0000039c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     39c:	499c      	ldr	r1, [pc, #624]	; (610 <set_arm_clock+0x274>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     39e:	4b9d      	ldr	r3, [pc, #628]	; (614 <set_arm_clock+0x278>)
	if (frequency > 528000000) {
     3a0:	4288      	cmp	r0, r1
{
     3a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
     3a6:	4c9c      	ldr	r4, [pc, #624]	; (618 <set_arm_clock+0x27c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     3a8:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     3aa:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     3ac:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
     3b0:	d91b      	bls.n	3ea <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     3b2:	4b9a      	ldr	r3, [pc, #616]	; (61c <set_arm_clock+0x280>)
     3b4:	4298      	cmp	r0, r3
     3b6:	f240 80f8 	bls.w	5aa <set_arm_clock+0x20e>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     3ba:	1ac3      	subs	r3, r0, r3
     3bc:	4998      	ldr	r1, [pc, #608]	; (620 <set_arm_clock+0x284>)
     3be:	0a1b      	lsrs	r3, r3, #8
     3c0:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3c4:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     3c8:	09db      	lsrs	r3, r3, #7
     3ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     3ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     3d2:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3d6:	428b      	cmp	r3, r1
     3d8:	bf28      	it	cs
     3da:	460b      	movcs	r3, r1
     3dc:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
     3e0:	4b90      	ldr	r3, [pc, #576]	; (624 <set_arm_clock+0x288>)
     3e2:	fba3 3707 	umull	r3, r7, r3, r7
     3e6:	08ff      	lsrs	r7, r7, #3
     3e8:	e004      	b.n	3f4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
     3ea:	4f8f      	ldr	r7, [pc, #572]	; (628 <set_arm_clock+0x28c>)
     3ec:	42b8      	cmp	r0, r7
     3ee:	bf8c      	ite	hi
     3f0:	270e      	movhi	r7, #14
     3f2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     3f4:	4987      	ldr	r1, [pc, #540]	; (614 <set_arm_clock+0x278>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3f6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     3fa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     3fe:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     404:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     408:	d20c      	bcs.n	424 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     40a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     40e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     412:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
     416:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     41a:	680b      	ldr	r3, [r1, #0]
     41c:	2b00      	cmp	r3, #0
     41e:	dafc      	bge.n	41a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     420:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     424:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
     428:	d124      	bne.n	474 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     42a:	4980      	ldr	r1, [pc, #512]	; (62c <set_arm_clock+0x290>)
     42c:	690c      	ldr	r4, [r1, #16]
     42e:	4980      	ldr	r1, [pc, #512]	; (630 <set_arm_clock+0x294>)
     430:	43a1      	bics	r1, r4
     432:	f000 80df 	beq.w	5f4 <set_arm_clock+0x258>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     436:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
     43a:	4634      	mov	r4, r6
     43c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     440:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     444:	d004      	beq.n	450 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     446:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     44a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
     44c:	4b71      	ldr	r3, [pc, #452]	; (614 <set_arm_clock+0x278>)
     44e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     450:	f411 5f40 	tst.w	r1, #12288	; 0x3000
     454:	d007      	beq.n	466 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     456:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
     45a:	496e      	ldr	r1, [pc, #440]	; (614 <set_arm_clock+0x278>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     45c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
     45e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     460:	6c8b      	ldr	r3, [r1, #72]	; 0x48
     462:	071b      	lsls	r3, r3, #28
     464:	d4fc      	bmi.n	460 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     466:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     46a:	4a6a      	ldr	r2, [pc, #424]	; (614 <set_arm_clock+0x278>)
     46c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     46e:	6c93      	ldr	r3, [r2, #72]	; 0x48
     470:	069d      	lsls	r5, r3, #26
     472:	d4fc      	bmi.n	46e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
     474:	4d6f      	ldr	r5, [pc, #444]	; (634 <set_arm_clock+0x298>)
     476:	42a8      	cmp	r0, r5
     478:	f200 80c3 	bhi.w	602 <set_arm_clock+0x266>
	uint32_t div_ahb = 1;
     47c:	2301      	movs	r3, #1
	uint32_t div_arm = 1;
     47e:	461c      	mov	r4, r3
				div_ahb = div_ahb + 1;
     480:	fb03 f100 	mul.w	r1, r3, r0
			div_arm = div_arm + 1;
     484:	f104 0c01 	add.w	ip, r4, #1
				div_ahb = div_ahb + 1;
     488:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     48c:	fb04 1201 	mla	r2, r4, r1, r1
     490:	42aa      	cmp	r2, r5
     492:	f200 80aa 	bhi.w	5ea <set_arm_clock+0x24e>
		if (div_arm < 8) {
     496:	f1bc 0f08 	cmp.w	ip, #8
				div_arm = 1;
     49a:	f04f 0401 	mov.w	r4, #1
		if (div_arm < 8) {
     49e:	f040 80a0 	bne.w	5e2 <set_arm_clock+0x246>
			if (div_ahb < 5) {
     4a2:	2b04      	cmp	r3, #4
     4a4:	f200 8087 	bhi.w	5b6 <set_arm_clock+0x21a>
	while (frequency * div_arm * div_ahb < 648000000) {
     4a8:	1842      	adds	r2, r0, r1
     4aa:	42aa      	cmp	r2, r5
     4ac:	d801      	bhi.n	4b2 <set_arm_clock+0x116>
				div_arm = 1;
     4ae:	4673      	mov	r3, lr
     4b0:	e7e6      	b.n	480 <set_arm_clock+0xe4>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     4b2:	029d      	lsls	r5, r3, #10
     4b4:	2400      	movs	r4, #0
     4b6:	ea86 2183 	eor.w	r1, r6, r3, lsl #10
				div_arm = 1;
     4ba:	f04f 0c01 	mov.w	ip, #1
				div_ahb = div_ahb + 1;
     4be:	4673      	mov	r3, lr
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     4c0:	485d      	ldr	r0, [pc, #372]	; (638 <set_arm_clock+0x29c>)
     4c2:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
     4c4:	4a5d      	ldr	r2, [pc, #372]	; (63c <set_arm_clock+0x2a0>)
     4c6:	4290      	cmp	r0, r2
     4c8:	d97c      	bls.n	5c4 <set_arm_clock+0x228>
     4ca:	f8df e19c 	ldr.w	lr, [pc, #412]	; 668 <set_arm_clock+0x2cc>
     4ce:	226c      	movs	r2, #108	; 0x6c
     4d0:	485b      	ldr	r0, [pc, #364]	; (640 <set_arm_clock+0x2a4>)
	frequency = mult * 12000000 / div_arm / div_ahb;
     4d2:	fbb0 f0fc 	udiv	r0, r0, ip
     4d6:	fbb0 f0f3 	udiv	r0, r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     4da:	4b54      	ldr	r3, [pc, #336]	; (62c <set_arm_clock+0x290>)
     4dc:	f8df c18c 	ldr.w	ip, [pc, #396]	; 66c <set_arm_clock+0x2d0>
     4e0:	f8d3 a000 	ldr.w	sl, [r3]
     4e4:	ea0a 0c0c 	and.w	ip, sl, ip
     4e8:	45f4      	cmp	ip, lr
     4ea:	d009      	beq.n	500 <set_arm_clock+0x164>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     4ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     4f0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
     4f4:	f8c3 c000 	str.w	ip, [r3]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     4f8:	601a      	str	r2, [r3, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     4fa:	681a      	ldr	r2, [r3, #0]
     4fc:	2a00      	cmp	r2, #0
     4fe:	dafc      	bge.n	4fa <set_arm_clock+0x15e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     500:	4b44      	ldr	r3, [pc, #272]	; (614 <set_arm_clock+0x278>)
     502:	691a      	ldr	r2, [r3, #16]
     504:	f002 0207 	and.w	r2, r2, #7
     508:	42a2      	cmp	r2, r4
     50a:	d003      	beq.n	514 <set_arm_clock+0x178>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     50c:	611c      	str	r4, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     50e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     510:	03d4      	lsls	r4, r2, #15
     512:	d4fc      	bmi.n	50e <set_arm_clock+0x172>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     514:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
     518:	d009      	beq.n	52e <set_arm_clock+0x192>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     51a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     51e:	f405 55e0 	and.w	r5, r5, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
     522:	4a3c      	ldr	r2, [pc, #240]	; (614 <set_arm_clock+0x278>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     524:	432e      	orrs	r6, r5
		CCM_CBCDR = cbcdr;
     526:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     528:	6c93      	ldr	r3, [r2, #72]	; 0x48
     52a:	0799      	lsls	r1, r3, #30
     52c:	d4fc      	bmi.n	528 <set_arm_clock+0x18c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     52e:	4b45      	ldr	r3, [pc, #276]	; (644 <set_arm_clock+0x2a8>)
	if (div_ipg > 4) div_ipg = 4;
     530:	4a45      	ldr	r2, [pc, #276]	; (648 <set_arm_clock+0x2ac>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     532:	4403      	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
     534:	4293      	cmp	r3, r2
     536:	d83a      	bhi.n	5ae <set_arm_clock+0x212>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     538:	4a44      	ldr	r2, [pc, #272]	; (64c <set_arm_clock+0x2b0>)
     53a:	09db      	lsrs	r3, r3, #7
     53c:	fba2 2303 	umull	r2, r3, r2, r3
     540:	0b1b      	lsrs	r3, r3, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     542:	1e5a      	subs	r2, r3, #1
     544:	0212      	lsls	r2, r2, #8
     546:	ea86 0102 	eor.w	r1, r6, r2
     54a:	f411 7f40 	tst.w	r1, #768	; 0x300
     54e:	d006      	beq.n	55e <set_arm_clock+0x1c2>
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     550:	f402 7240 	and.w	r2, r2, #768	; 0x300
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     554:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     558:	4316      	orrs	r6, r2
		CCM_CBCDR = cbcdr;
     55a:	4a2e      	ldr	r2, [pc, #184]	; (614 <set_arm_clock+0x278>)
     55c:	6156      	str	r6, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     55e:	492d      	ldr	r1, [pc, #180]	; (614 <set_arm_clock+0x278>)
     560:	694a      	ldr	r2, [r1, #20]
     562:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
     566:	614a      	str	r2, [r1, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     568:	6c8a      	ldr	r2, [r1, #72]	; 0x48
     56a:	0692      	lsls	r2, r2, #26
     56c:	d4fc      	bmi.n	568 <set_arm_clock+0x1cc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     56e:	4a38      	ldr	r2, [pc, #224]	; (650 <set_arm_clock+0x2b4>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     570:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     572:	fba2 1200 	umull	r1, r2, r2, r0
     576:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     57a:	ea4f 4292 	mov.w	r2, r2, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
     57e:	fbb0 f3f3 	udiv	r3, r0, r3
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     582:	fbb1 f2f2 	udiv	r2, r1, r2
	F_CPU_ACTUAL = frequency;
     586:	4933      	ldr	r1, [pc, #204]	; (654 <set_arm_clock+0x2b8>)
     588:	6008      	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
     58a:	4933      	ldr	r1, [pc, #204]	; (658 <set_arm_clock+0x2bc>)
     58c:	600b      	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     58e:	4b33      	ldr	r3, [pc, #204]	; (65c <set_arm_clock+0x2c0>)
     590:	601a      	str	r2, [r3, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     592:	d208      	bcs.n	5a6 <set_arm_clock+0x20a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     594:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     598:	4a1f      	ldr	r2, [pc, #124]	; (618 <set_arm_clock+0x27c>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     59a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
     59e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     5a0:	6813      	ldr	r3, [r2, #0]
     5a2:	2b00      	cmp	r3, #0
     5a4:	dafc      	bge.n	5a0 <set_arm_clock+0x204>
	}

	return frequency;
}
     5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     5aa:	2712      	movs	r7, #18
     5ac:	e722      	b.n	3f4 <set_arm_clock+0x58>
     5ae:	f44f 7240 	mov.w	r2, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
     5b2:	2304      	movs	r3, #4
     5b4:	e7c7      	b.n	546 <set_arm_clock+0x1aa>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     5b6:	1e59      	subs	r1, r3, #1
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     5b8:	481f      	ldr	r0, [pc, #124]	; (638 <set_arm_clock+0x29c>)
     5ba:	2407      	movs	r4, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     5bc:	028d      	lsls	r5, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     5be:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     5c0:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     5c4:	4a26      	ldr	r2, [pc, #152]	; (660 <set_arm_clock+0x2c4>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
     5c6:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 670 <set_arm_clock+0x2d4>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     5ca:	fba2 2000 	umull	r2, r0, r2, r0
     5ce:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
     5d0:	4824      	ldr	r0, [pc, #144]	; (664 <set_arm_clock+0x2c8>)
     5d2:	2a36      	cmp	r2, #54	; 0x36
     5d4:	bf38      	it	cc
     5d6:	2236      	movcc	r2, #54	; 0x36
     5d8:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
     5dc:	ea42 0e0e 	orr.w	lr, r2, lr
     5e0:	e777      	b.n	4d2 <set_arm_clock+0x136>
     5e2:	469e      	mov	lr, r3
     5e4:	4664      	mov	r4, ip
				div_arm = 1;
     5e6:	4673      	mov	r3, lr
     5e8:	e74a      	b.n	480 <set_arm_clock+0xe4>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     5ea:	1e59      	subs	r1, r3, #1
     5ec:	028d      	lsls	r5, r1, #10
     5ee:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
     5f2:	e765      	b.n	4c0 <set_arm_clock+0x124>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     5f4:	461d      	mov	r5, r3
     5f6:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
     5fa:	4611      	mov	r1, r2
     5fc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
     600:	e71e      	b.n	440 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
     602:	2500      	movs	r5, #0
	uint32_t div_ahb = 1;
     604:	2301      	movs	r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     606:	4602      	mov	r2, r0
     608:	4631      	mov	r1, r6
     60a:	462c      	mov	r4, r5
	uint32_t div_arm = 1;
     60c:	469c      	mov	ip, r3
     60e:	e757      	b.n	4c0 <set_arm_clock+0x124>
     610:	1f78a400 	.word	0x1f78a400
     614:	400fc000 	.word	0x400fc000
     618:	40080000 	.word	0x40080000
     61c:	23c34600 	.word	0x23c34600
     620:	004cb223 	.word	0x004cb223
     624:	51eb851f 	.word	0x51eb851f
     628:	016e3600 	.word	0x016e3600
     62c:	400d8000 	.word	0x400d8000
     630:	80003040 	.word	0x80003040
     634:	269fb1ff 	.word	0x269fb1ff
     638:	005b8d80 	.word	0x005b8d80
     63c:	4df67eff 	.word	0x4df67eff
     640:	4d3f6400 	.word	0x4d3f6400
     644:	08f0d17f 	.word	0x08f0d17f
     648:	2cb4177f 	.word	0x2cb4177f
     64c:	00e5109f 	.word	0x00e5109f
     650:	431bde83 	.word	0x431bde83
     654:	20000db8 	.word	0x20000db8
     658:	20000db4 	.word	0x20000db4
     65c:	200026bc 	.word	0x200026bc
     660:	165e9f81 	.word	0x165e9f81
     664:	00b71b00 	.word	0x00b71b00
     668:	8000206c 	.word	0x8000206c
     66c:	8001307f 	.word	0x8001307f
     670:	80002000 	.word	0x80002000

00000674 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     674:	2836      	cmp	r0, #54	; 0x36
     676:	d829      	bhi.n	6cc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     678:	4b16      	ldr	r3, [pc, #88]	; (6d4 <pinMode+0x60>)
     67a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     67c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     67e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     682:	589a      	ldr	r2, [r3, r2]
{
     684:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     686:	6853      	ldr	r3, [r2, #4]
     688:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     68a:	d00e      	beq.n	6aa <pinMode+0x36>
     68c:	2904      	cmp	r1, #4
     68e:	d00c      	beq.n	6aa <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     690:	ea23 0304 	bic.w	r3, r3, r4
     694:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     696:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     698:	b1a9      	cbz	r1, 6c6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     69a:	2902      	cmp	r1, #2
     69c:	d017      	beq.n	6ce <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     69e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     6a0:	bf0c      	ite	eq
     6a2:	4a0d      	ldreq	r2, [pc, #52]	; (6d8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     6a4:	4a0d      	ldrne	r2, [pc, #52]	; (6dc <pinMode+0x68>)
     6a6:	601a      	str	r2, [r3, #0]
     6a8:	e007      	b.n	6ba <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     6aa:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     6ac:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     6ae:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     6b0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     6b2:	d008      	beq.n	6c6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     6b4:	f640 0238 	movw	r2, #2104	; 0x838
     6b8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     6ba:	6843      	ldr	r3, [r0, #4]
     6bc:	2215      	movs	r2, #21
}
     6be:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     6c2:	601a      	str	r2, [r3, #0]
}
     6c4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     6c6:	2238      	movs	r2, #56	; 0x38
     6c8:	601a      	str	r2, [r3, #0]
     6ca:	e7f6      	b.n	6ba <pinMode+0x46>
     6cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     6ce:	4a04      	ldr	r2, [pc, #16]	; (6e0 <pinMode+0x6c>)
     6d0:	601a      	str	r2, [r3, #0]
     6d2:	e7f2      	b.n	6ba <pinMode+0x46>
     6d4:	200004e4 	.word	0x200004e4
     6d8:	00013038 	.word	0x00013038
     6dc:	00010038 	.word	0x00010038
     6e0:	0001f038 	.word	0x0001f038

000006e4 <Panic_Temp_isr>:
  unused_interrupt_vector();
     6e4:	f002 bafa 	b.w	2cdc <unused_interrupt_vector>

000006e8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     6e8:	4a13      	ldr	r2, [pc, #76]	; (738 <tempmonGetTemp+0x50>)
     6ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     6ee:	075b      	lsls	r3, r3, #29
     6f0:	d5fb      	bpl.n	6ea <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     6f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     6f6:	4811      	ldr	r0, [pc, #68]	; (73c <tempmonGetTemp+0x54>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     6f8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     6fc:	4910      	ldr	r1, [pc, #64]	; (740 <tempmonGetTemp+0x58>)
     6fe:	4a11      	ldr	r2, [pc, #68]	; (744 <tempmonGetTemp+0x5c>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     700:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     704:	6803      	ldr	r3, [r0, #0]
     706:	ed91 6a00 	vldr	s12, [r1]
     70a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     70e:	ee07 3a90 	vmov	s15, r3
     712:	edd2 6a00 	vldr	s13, [r2]
     716:	eef8 7a67 	vcvt.f32.u32	s15, s15
     71a:	4b0b      	ldr	r3, [pc, #44]	; (748 <tempmonGetTemp+0x60>)
     71c:	ee77 7a67 	vsub.f32	s15, s14, s15
     720:	ed93 7a00 	vldr	s14, [r3]
     724:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     728:	ee67 7a86 	vmul.f32	s15, s15, s12
     72c:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     730:	ee37 0a40 	vsub.f32	s0, s14, s0
     734:	4770      	bx	lr
     736:	bf00      	nop
     738:	400d8100 	.word	0x400d8100
     73c:	200026ac 	.word	0x200026ac
     740:	200026b4 	.word	0x200026b4
     744:	200026b8 	.word	0x200026b8
     748:	200026b0 	.word	0x200026b0

0000074c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     74c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     74e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     750:	b11b      	cbz	r3, 75a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     752:	6853      	ldr	r3, [r2, #4]
     754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     758:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     75a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     75c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     75e:	b33c      	cbz	r4, 7b0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     760:	4b1a      	ldr	r3, [pc, #104]	; (7cc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     762:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     764:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     768:	420c      	tst	r4, r1
     76a:	d11d      	bne.n	7a8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     76c:	4e18      	ldr	r6, [pc, #96]	; (7d0 <schedule_transfer+0x84>)
     76e:	6877      	ldr	r7, [r6, #4]
     770:	e004      	b.n	77c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     772:	6874      	ldr	r4, [r6, #4]
     774:	1be4      	subs	r4, r4, r7
     776:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     77a:	d20b      	bcs.n	794 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     77c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     780:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     784:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     788:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     78c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     790:	0464      	lsls	r4, r4, #17
     792:	d5ee      	bpl.n	772 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     794:	400d      	ands	r5, r1
     796:	d107      	bne.n	7a8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
     798:	4c0c      	ldr	r4, [pc, #48]	; (7cc <schedule_transfer+0x80>)
		endpoint->status = 0;
     79a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
     79e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     7a2:	4319      	orrs	r1, r3
     7a4:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
     7a8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     7aa:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     7ac:	bcf0      	pop	{r4, r5, r6, r7}
     7ae:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
     7b0:	4d06      	ldr	r5, [pc, #24]	; (7cc <schedule_transfer+0x80>)
	endpoint->status = 0;
     7b2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
     7b6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     7ba:	4319      	orrs	r1, r3
     7bc:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     7c0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
     7c2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     7c4:	b662      	cpsie	i
}
     7c6:	bcf0      	pop	{r4, r5, r6, r7}
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop
     7cc:	402e0000 	.word	0x402e0000
     7d0:	e0001000 	.word	0xe0001000

000007d4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     7d6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
     7d8:	b19d      	cbz	r5, 802 <run_callbacks+0x2e>
     7da:	4606      	mov	r6, r0
     7dc:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
     7de:	2400      	movs	r4, #0
     7e0:	e003      	b.n	7ea <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     7e2:	6812      	ldr	r2, [r2, #0]
		count++;
     7e4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
     7e6:	2a01      	cmp	r2, #1
     7e8:	d00c      	beq.n	804 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
     7ea:	6853      	ldr	r3, [r2, #4]
     7ec:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     7f0:	d0f7      	beq.n	7e2 <run_callbacks+0xe>
			ep->first_transfer = t;
     7f2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     7f4:	b12c      	cbz	r4, 802 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
     7f6:	4628      	mov	r0, r5
		ep->callback_function(first);
     7f8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
     7fa:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
     7fc:	4798      	blx	r3
	while (count) {
     7fe:	3c01      	subs	r4, #1
     800:	d1f9      	bne.n	7f6 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
     802:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
     804:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
     808:	e7f4      	b.n	7f4 <run_callbacks+0x20>
     80a:	bf00      	nop

0000080c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     80c:	b430      	push	{r4, r5}
	if (len > 0) {
     80e:	b9d9      	cbnz	r1, 848 <endpoint0_transmit.constprop.0+0x3c>
     810:	4c1f      	ldr	r4, [pc, #124]	; (890 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
     812:	4b20      	ldr	r3, [pc, #128]	; (894 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
     814:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     816:	4a20      	ldr	r2, [pc, #128]	; (898 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
     818:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     81a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
     81e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     820:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
     822:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     826:	2480      	movs	r4, #128	; 0x80
     828:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     82a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     82e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     832:	481a      	ldr	r0, [pc, #104]	; (89c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
     834:	432b      	orrs	r3, r5
     836:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     83a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
     83c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     840:	2b00      	cmp	r3, #0
     842:	d1fb      	bne.n	83c <endpoint0_transmit.constprop.0+0x30>
}
     844:	bc30      	pop	{r4, r5}
     846:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     848:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
     84a:	4b15      	ldr	r3, [pc, #84]	; (8a0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     84c:	4c10      	ldr	r4, [pc, #64]	; (890 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
     84e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     850:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     854:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
     856:	4a10      	ldr	r2, [pc, #64]	; (898 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     858:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     85a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     85e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     860:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     862:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     866:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
     868:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     86a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     86e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     872:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
     874:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
     876:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
     878:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     87a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     87e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     882:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     886:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     88a:	2b00      	cmp	r3, #0
     88c:	d1fb      	bne.n	886 <endpoint0_transmit.constprop.0+0x7a>
     88e:	e7c0      	b.n	812 <endpoint0_transmit.constprop.0+0x6>
     890:	20000000 	.word	0x20000000
     894:	200016e0 	.word	0x200016e0
     898:	402e0000 	.word	0x402e0000
     89c:	200021e0 	.word	0x200021e0
     8a0:	20001700 	.word	0x20001700

000008a4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
     8a4:	4908      	ldr	r1, [pc, #32]	; (8c8 <usb_stop_sof_interrupts+0x24>)
     8a6:	2201      	movs	r2, #1
     8a8:	780b      	ldrb	r3, [r1, #0]
     8aa:	fa02 f000 	lsl.w	r0, r2, r0
     8ae:	ea23 0000 	bic.w	r0, r3, r0
     8b2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
     8b4:	b930      	cbnz	r0, 8c4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
     8b6:	4a05      	ldr	r2, [pc, #20]	; (8cc <usb_stop_sof_interrupts+0x28>)
     8b8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
     8bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     8c0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop
     8c8:	20002801 	.word	0x20002801
     8cc:	402e0000 	.word	0x402e0000

000008d0 <usb_isr>:
{
     8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
     8d4:	4c99      	ldr	r4, [pc, #612]	; (b3c <usb_isr+0x26c>)
{
     8d6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
     8d8:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     8dc:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
     8de:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     8e2:	d56a      	bpl.n	9ba <usb_isr+0xea>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     8e4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
     8e8:	2b00      	cmp	r3, #0
     8ea:	d061      	beq.n	9b0 <usb_isr+0xe0>
		uint32_t addr = (uint32_t)data;
     8ec:	f8df 8278 	ldr.w	r8, [pc, #632]	; b68 <usb_isr+0x298>
     8f0:	4d93      	ldr	r5, [pc, #588]	; (b40 <usb_isr+0x270>)
     8f2:	f8df b26c 	ldr.w	fp, [pc, #620]	; b60 <usb_isr+0x290>
		endpoint0_transfer_data.pointer1 = addr + 4096;
     8f6:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     8fa:	f8df 9270 	ldr.w	r9, [pc, #624]	; b6c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     8fe:	4f91      	ldr	r7, [pc, #580]	; (b44 <usb_isr+0x274>)
			USB1_ENDPTSETUPSTAT = setupstatus;
     900:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
     904:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
     908:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     90c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     910:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     914:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     918:	049b      	lsls	r3, r3, #18
     91a:	d5f5      	bpl.n	908 <usb_isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     91c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     924:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     928:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     92c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     930:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
     934:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
     938:	d1fa      	bne.n	930 <usb_isr+0x60>
			endpoint0_notify_mask = 0;
     93a:	b291      	uxth	r1, r2
	switch (setup.wRequestAndType) {
     93c:	f240 6c81 	movw	ip, #1665	; 0x681
			endpoint0_notify_mask = 0;
     940:	f8cb 3000 	str.w	r3, [fp]
	switch (setup.wRequestAndType) {
     944:	4561      	cmp	r1, ip
     946:	f200 80d4 	bhi.w	af2 <usb_isr+0x222>
     94a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     94e:	f080 8161 	bcs.w	c14 <usb_isr+0x344>
     952:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     956:	f000 818f 	beq.w	c78 <usb_isr+0x3a8>
     95a:	f240 80a6 	bls.w	aaa <usb_isr+0x1da>
     95e:	f240 3c02 	movw	ip, #770	; 0x302
     962:	4561      	cmp	r1, ip
     964:	f000 81b2 	beq.w	ccc <usb_isr+0x3fc>
     968:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
     96c:	f040 80bc 	bne.w	ae8 <usb_isr+0x218>
	endpoint0_transfer_ack.next = 1;
     970:	4975      	ldr	r1, [pc, #468]	; (b48 <usb_isr+0x278>)
	endpoint_queue_head[1].status = 0;
     972:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     974:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
     976:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     978:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     97a:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     97c:	2380      	movs	r3, #128	; 0x80
     97e:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     980:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     984:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     988:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     98c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     990:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     994:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     998:	2b00      	cmp	r3, #0
     99a:	d1fb      	bne.n	994 <usb_isr+0xc4>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     99c:	0c13      	lsrs	r3, r2, #16
     99e:	065b      	lsls	r3, r3, #25
     9a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     9a4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     9a8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
     9ac:	2b00      	cmp	r3, #0
     9ae:	d1a7      	bne.n	900 <usb_isr+0x30>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     9b0:	4b62      	ldr	r3, [pc, #392]	; (b3c <usb_isr+0x26c>)
     9b2:	f8d3 71bc 	ldr.w	r7, [r3, #444]	; 0x1bc
		if (completestatus) {
     9b6:	2f00      	cmp	r7, #0
     9b8:	d145      	bne.n	a46 <usb_isr+0x176>
	if (status & USB_USBSTS_URI) { // page 3164
     9ba:	0672      	lsls	r2, r6, #25
     9bc:	d516      	bpl.n	9ec <usb_isr+0x11c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     9be:	4b5f      	ldr	r3, [pc, #380]	; (b3c <usb_isr+0x26c>)
     9c0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
     9c4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     9c8:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
     9cc:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     9d0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     9d4:	2c00      	cmp	r4, #0
     9d6:	d1fb      	bne.n	9d0 <usb_isr+0x100>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     9d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9dc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     9e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
     9e4:	f001 feb8 	bl	2758 <usb_serial_reset>
		endpointN_notify_mask = 0;
     9e8:	4b58      	ldr	r3, [pc, #352]	; (b4c <usb_isr+0x27c>)
     9ea:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
     9ec:	01f4      	lsls	r4, r6, #7
     9ee:	d503      	bpl.n	9f8 <usb_isr+0x128>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     9f0:	4b57      	ldr	r3, [pc, #348]	; (b50 <usb_isr+0x280>)
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	b103      	cbz	r3, 9f8 <usb_isr+0x128>
     9f6:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
     9f8:	01b0      	lsls	r0, r6, #6
     9fa:	d503      	bpl.n	a04 <usb_isr+0x134>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     9fc:	4b55      	ldr	r3, [pc, #340]	; (b54 <usb_isr+0x284>)
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	b103      	cbz	r3, a04 <usb_isr+0x134>
     a02:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
     a04:	0771      	lsls	r1, r6, #29
     a06:	d508      	bpl.n	a1a <usb_isr+0x14a>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     a08:	4b4c      	ldr	r3, [pc, #304]	; (b3c <usb_isr+0x26c>)
     a0a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     a0e:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     a12:	d015      	beq.n	a40 <usb_isr+0x170>
			usb_high_speed = 1;
     a14:	4b50      	ldr	r3, [pc, #320]	; (b58 <usb_isr+0x288>)
     a16:	2201      	movs	r2, #1
     a18:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     a1a:	4b48      	ldr	r3, [pc, #288]	; (b3c <usb_isr+0x26c>)
     a1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
     a20:	061a      	lsls	r2, r3, #24
     a22:	d50a      	bpl.n	a3a <usb_isr+0x16a>
     a24:	0633      	lsls	r3, r6, #24
     a26:	d508      	bpl.n	a3a <usb_isr+0x16a>
		if (usb_reboot_timer) {
     a28:	4a4c      	ldr	r2, [pc, #304]	; (b5c <usb_isr+0x28c>)
     a2a:	7813      	ldrb	r3, [r2, #0]
     a2c:	b12b      	cbz	r3, a3a <usb_isr+0x16a>
			if (--usb_reboot_timer == 0) {
     a2e:	3b01      	subs	r3, #1
     a30:	b2db      	uxtb	r3, r3
     a32:	7013      	strb	r3, [r2, #0]
     a34:	2b00      	cmp	r3, #0
     a36:	f000 8256 	beq.w	ee6 <usb_isr+0x616>
}
     a3a:	b003      	add	sp, #12
     a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			usb_high_speed = 0;
     a40:	4a45      	ldr	r2, [pc, #276]	; (b58 <usb_isr+0x288>)
     a42:	7013      	strb	r3, [r2, #0]
     a44:	e7e9      	b.n	a1a <usb_isr+0x14a>
			if (completestatus & endpoint0_notify_mask) {
     a46:	4a46      	ldr	r2, [pc, #280]	; (b60 <usb_isr+0x290>)
			USB1_ENDPTCOMPLETE = completestatus;
     a48:	f8c3 71bc 	str.w	r7, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
     a4c:	6811      	ldr	r1, [r2, #0]
     a4e:	420f      	tst	r7, r1
     a50:	f040 816f 	bne.w	d32 <usb_isr+0x462>
			completestatus &= endpointN_notify_mask;
     a54:	4b3d      	ldr	r3, [pc, #244]	; (b4c <usb_isr+0x27c>)
     a56:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
     a58:	401f      	ands	r7, r3
     a5a:	d0ae      	beq.n	9ba <usb_isr+0xea>
				while (tx) {
     a5c:	ea5f 4817 	movs.w	r8, r7, lsr #16
     a60:	d010      	beq.n	a84 <usb_isr+0x1b4>
     a62:	4d37      	ldr	r5, [pc, #220]	; (b40 <usb_isr+0x270>)
					tx &= ~(1<<p);
     a64:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
     a68:	fa98 f4a8 	rbit	r4, r8
     a6c:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     a70:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
					tx &= ~(1<<p);
     a74:	fa09 f404 	lsl.w	r4, r9, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     a78:	3040      	adds	r0, #64	; 0x40
     a7a:	f7ff feab 	bl	7d4 <run_callbacks>
				while (tx) {
     a7e:	ea38 0804 	bics.w	r8, r8, r4
     a82:	d1f1      	bne.n	a68 <usb_isr+0x198>
				uint32_t rx = completestatus & 0xffff;
     a84:	b2bf      	uxth	r7, r7
				while(rx) {
     a86:	2f00      	cmp	r7, #0
     a88:	d097      	beq.n	9ba <usb_isr+0xea>
     a8a:	4d2d      	ldr	r5, [pc, #180]	; (b40 <usb_isr+0x270>)
					rx &= ~(1<<p);
     a8c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
     a90:	fa97 f4a7 	rbit	r4, r7
     a94:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
     a98:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
					rx &= ~(1<<p);
     a9c:	fa08 f404 	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
     aa0:	f7ff fe98 	bl	7d4 <run_callbacks>
				while(rx) {
     aa4:	43a7      	bics	r7, r4
     aa6:	d1f3      	bne.n	a90 <usb_isr+0x1c0>
     aa8:	e787      	b.n	9ba <usb_isr+0xea>
	switch (setup.wRequestAndType) {
     aaa:	2980      	cmp	r1, #128	; 0x80
     aac:	f000 80ac 	beq.w	c08 <usb_isr+0x338>
     ab0:	2982      	cmp	r1, #130	; 0x82
     ab2:	d119      	bne.n	ae8 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
     ab4:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
     ab6:	f010 0078 	ands.w	r0, r0, #120	; 0x78
     aba:	d115      	bne.n	ae8 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
     abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     ac0:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
     ac4:	4a27      	ldr	r2, [pc, #156]	; (b64 <usb_isr+0x294>)
     ac6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     ac8:	0618      	lsls	r0, r3, #24
     aca:	f100 81fc 	bmi.w	ec6 <usb_isr+0x5f6>
     ace:	07cb      	lsls	r3, r1, #31
     ad0:	d501      	bpl.n	ad6 <usb_isr+0x206>
			reply_buffer[0] = 1;
     ad2:	2301      	movs	r3, #1
     ad4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     ad6:	2102      	movs	r1, #2
     ad8:	4822      	ldr	r0, [pc, #136]	; (b64 <usb_isr+0x294>)
     ada:	f7ff fe97 	bl	80c <endpoint0_transmit.constprop.0>
		return;
     ade:	e763      	b.n	9a8 <usb_isr+0xd8>
		if (setup.wLength != 7) break;
     ae0:	0c01      	lsrs	r1, r0, #16
     ae2:	2907      	cmp	r1, #7
     ae4:	f000 8156 	beq.w	d94 <usb_isr+0x4c4>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     ae8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     aec:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
     af0:	e75a      	b.n	9a8 <usb_isr+0xd8>
	switch (setup.wRequestAndType) {
     af2:	f242 0c21 	movw	ip, #8225	; 0x2021
     af6:	4561      	cmp	r1, ip
     af8:	d0f2      	beq.n	ae0 <usb_isr+0x210>
     afa:	d939      	bls.n	b70 <usb_isr+0x2a0>
     afc:	f242 2321 	movw	r3, #8737	; 0x2221
     b00:	4299      	cmp	r1, r3
     b02:	d06a      	beq.n	bda <usb_isr+0x30a>
     b04:	f242 3321 	movw	r3, #8993	; 0x2321
     b08:	4299      	cmp	r1, r3
     b0a:	d1ed      	bne.n	ae8 <usb_isr+0x218>
	endpoint0_transfer_ack.next = 1;
     b0c:	4b0e      	ldr	r3, [pc, #56]	; (b48 <usb_isr+0x278>)
	endpoint0_transfer_ack.pointer0 = 0;
     b0e:	2200      	movs	r2, #0
     b10:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
     b12:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     b14:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     b16:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     b18:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     b1a:	2280      	movs	r2, #128	; 0x80
     b1c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     b1e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     b22:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     b26:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     b2e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     b32:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     b36:	2b00      	cmp	r3, #0
     b38:	d1fb      	bne.n	b32 <usb_isr+0x262>
     b3a:	e735      	b.n	9a8 <usb_isr+0xd8>
     b3c:	402e0000 	.word	0x402e0000
     b40:	20000000 	.word	0x20000000
     b44:	402e01c0 	.word	0x402e01c0
     b48:	200016e0 	.word	0x200016e0
     b4c:	200021e4 	.word	0x200021e4
     b50:	200027e4 	.word	0x200027e4
     b54:	200027e8 	.word	0x200027e8
     b58:	2000280a 	.word	0x2000280a
     b5c:	2000280b 	.word	0x2000280b
     b60:	200021e0 	.word	0x200021e0
     b64:	20002644 	.word	0x20002644
     b68:	200021d8 	.word	0x200021d8
     b6c:	20001700 	.word	0x20001700
	switch (setup.wRequestAndType) {
     b70:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
     b74:	d040      	beq.n	bf8 <usb_isr+0x328>
     b76:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
     b7a:	d1b5      	bne.n	ae8 <usb_isr+0x218>
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     b7c:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
     b80:	f3c2 4c07 	ubfx	ip, r2, #16, #8
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     b84:	48a3      	ldr	r0, [pc, #652]	; (e14 <usb_isr+0x544>)
		usb_configuration = setup.wValue;
     b86:	4aa4      	ldr	r2, [pc, #656]	; (e18 <usb_isr+0x548>)
     b88:	9300      	str	r3, [sp, #0]
     b8a:	f882 c000 	strb.w	ip, [r2]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     b8e:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     b92:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     b96:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
     b9a:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
		usb_serial_configure();
     b9e:	f001 fddd 	bl	275c <usb_serial_configure>
		usb_serial2_configure();
     ba2:	f001 f9d1 	bl	1f48 <usb_serial2_configure>
	endpoint0_transfer_ack.next = 1;
     ba6:	4a9d      	ldr	r2, [pc, #628]	; (e1c <usb_isr+0x54c>)
     ba8:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
     baa:	9b00      	ldr	r3, [sp, #0]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     bac:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     bae:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     bb0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
     bb2:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     bb4:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     bb6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
     bba:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     bbc:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     bc0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
     bc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     bc8:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     bcc:	f8cb 3000 	str.w	r3, [fp]
	while (USB1_ENDPTPRIME) ;
     bd0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     bd4:	2b00      	cmp	r3, #0
     bd6:	d1fb      	bne.n	bd0 <usb_isr+0x300>
     bd8:	e6e6      	b.n	9a8 <usb_isr+0xd8>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
     bda:	b280      	uxth	r0, r0
     bdc:	2800      	cmp	r0, #0
     bde:	f000 809f 	beq.w	d20 <usb_isr+0x450>
		if (setup.wIndex == CDC2_STATUS_INTERFACE) {
     be2:	2802      	cmp	r0, #2
     be4:	d192      	bne.n	b0c <usb_isr+0x23c>
			usb_cdc2_line_rtsdtr_millis = systick_millis_count;
     be6:	4b8e      	ldr	r3, [pc, #568]	; (e20 <usb_isr+0x550>)
			usb_cdc2_line_rtsdtr = setup.wValue;
     be8:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc2_line_rtsdtr_millis = systick_millis_count;
     bec:	6819      	ldr	r1, [r3, #0]
     bee:	4b8d      	ldr	r3, [pc, #564]	; (e24 <usb_isr+0x554>)
     bf0:	6019      	str	r1, [r3, #0]
			usb_cdc2_line_rtsdtr = setup.wValue;
     bf2:	4b8d      	ldr	r3, [pc, #564]	; (e28 <usb_isr+0x558>)
     bf4:	701a      	strb	r2, [r3, #0]
     bf6:	e789      	b.n	b0c <usb_isr+0x23c>
		reply_buffer[0] = usb_configuration;
     bf8:	4b87      	ldr	r3, [pc, #540]	; (e18 <usb_isr+0x548>)
		endpoint0_transmit(reply_buffer, 1, 0);
     bfa:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
     bfc:	488b      	ldr	r0, [pc, #556]	; (e2c <usb_isr+0x55c>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     c02:	f7ff fe03 	bl	80c <endpoint0_transmit.constprop.0>
		return;
     c06:	e6cf      	b.n	9a8 <usb_isr+0xd8>
		reply_buffer[0] = 0;
     c08:	4888      	ldr	r0, [pc, #544]	; (e2c <usb_isr+0x55c>)
		endpoint0_transmit(reply_buffer, 2, 0);
     c0a:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
     c0c:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     c0e:	f7ff fdfd 	bl	80c <endpoint0_transmit.constprop.0>
		return;
     c12:	e6c9      	b.n	9a8 <usb_isr+0xd8>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     c14:	4b86      	ldr	r3, [pc, #536]	; (e30 <usb_isr+0x560>)
     c16:	6859      	ldr	r1, [r3, #4]
     c18:	2900      	cmp	r1, #0
     c1a:	f43f af65 	beq.w	ae8 <usb_isr+0x218>
     c1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     c22:	b282      	uxth	r2, r0
     c24:	e004      	b.n	c30 <usb_isr+0x360>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     c26:	6919      	ldr	r1, [r3, #16]
     c28:	330c      	adds	r3, #12
     c2a:	2900      	cmp	r1, #0
     c2c:	f43f af5c 	beq.w	ae8 <usb_isr+0x218>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     c30:	f8b3 c000 	ldrh.w	ip, [r3]
     c34:	45f4      	cmp	ip, lr
     c36:	d1f6      	bne.n	c26 <usb_isr+0x356>
     c38:	f8b3 c002 	ldrh.w	ip, [r3, #2]
     c3c:	4594      	cmp	ip, r2
     c3e:	d1f2      	bne.n	c26 <usb_isr+0x356>
				if ((setup.wValue >> 8) == 3) {
     c40:	ea4f 221e 	mov.w	r2, lr, lsr #8
     c44:	2a03      	cmp	r2, #3
     c46:	f000 810f 	beq.w	e68 <usb_isr+0x598>
					datalen = list->length;
     c4a:	891b      	ldrh	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
     c4c:	0c02      	lsrs	r2, r0, #16
     c4e:	429a      	cmp	r2, r3
     c50:	bf28      	it	cs
     c52:	461a      	movcs	r2, r3
				if (setup.wValue == 0x200) {
     c54:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     c58:	f040 810b 	bne.w	e72 <usb_isr+0x5a2>
					if (usb_high_speed) src = usb_config_descriptor_480;
     c5c:	4b75      	ldr	r3, [pc, #468]	; (e34 <usb_isr+0x564>)
     c5e:	4976      	ldr	r1, [pc, #472]	; (e38 <usb_isr+0x568>)
     c60:	7818      	ldrb	r0, [r3, #0]
     c62:	4b76      	ldr	r3, [pc, #472]	; (e3c <usb_isr+0x56c>)
					memcpy(usb_descriptor_buffer, src, datalen);
     c64:	9200      	str	r2, [sp, #0]
     c66:	2800      	cmp	r0, #0
     c68:	bf18      	it	ne
     c6a:	4619      	movne	r1, r3
     c6c:	4874      	ldr	r0, [pc, #464]	; (e40 <usb_isr+0x570>)
     c6e:	f002 fd4d 	bl	370c <memcpy>
     c72:	4b73      	ldr	r3, [pc, #460]	; (e40 <usb_isr+0x570>)
     c74:	9a00      	ldr	r2, [sp, #0]
     c76:	e111      	b.n	e9c <usb_isr+0x5cc>
		if (endpoint > 7) break;
     c78:	f010 0f78 	tst.w	r0, #120	; 0x78
     c7c:	b283      	uxth	r3, r0
     c7e:	f47f af33 	bne.w	ae8 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
     c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     c86:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     c8a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
     c8e:	bf14      	ite	ne
     c90:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     c94:	f023 0301 	biceq.w	r3, r3, #1
     c98:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     c9c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     c9e:	4b5f      	ldr	r3, [pc, #380]	; (e1c <usb_isr+0x54c>)
	endpoint_queue_head[1].status = 0;
     ca0:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     ca2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     ca4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ca6:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     ca8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     caa:	2280      	movs	r2, #128	; 0x80
     cac:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     cae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     cb2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     cb6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     cbe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     cc2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     cc6:	2b00      	cmp	r3, #0
     cc8:	d1fb      	bne.n	cc2 <usb_isr+0x3f2>
     cca:	e66d      	b.n	9a8 <usb_isr+0xd8>
		if (endpoint > 7) break;
     ccc:	f010 0f78 	tst.w	r0, #120	; 0x78
     cd0:	b283      	uxth	r3, r0
     cd2:	f47f af09 	bne.w	ae8 <usb_isr+0x218>
		endpoint = setup.wIndex & 0x7F;
     cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     cda:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     cde:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
     ce2:	bf14      	ite	ne
     ce4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     ce8:	f043 0301 	orreq.w	r3, r3, #1
     cec:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     cf0:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     cf2:	4b4a      	ldr	r3, [pc, #296]	; (e1c <usb_isr+0x54c>)
	endpoint_queue_head[1].status = 0;
     cf4:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     cf6:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     cf8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     cfa:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     cfc:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cfe:	2280      	movs	r2, #128	; 0x80
     d00:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     d06:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     d0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     d12:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     d16:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     d1a:	2b00      	cmp	r3, #0
     d1c:	d1fb      	bne.n	d16 <usb_isr+0x446>
     d1e:	e643      	b.n	9a8 <usb_isr+0xd8>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     d20:	4b3f      	ldr	r3, [pc, #252]	; (e20 <usb_isr+0x550>)
			usb_cdc_line_rtsdtr = setup.wValue;
     d22:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     d26:	6819      	ldr	r1, [r3, #0]
     d28:	4b46      	ldr	r3, [pc, #280]	; (e44 <usb_isr+0x574>)
     d2a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     d2c:	4b46      	ldr	r3, [pc, #280]	; (e48 <usb_isr+0x578>)
     d2e:	701a      	strb	r2, [r3, #0]
		if (setup.wIndex == CDC2_STATUS_INTERFACE) {
     d30:	e6ec      	b.n	b0c <usb_isr+0x23c>
				endpoint0_notify_mask = 0;
     d32:	2100      	movs	r1, #0
     d34:	6011      	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     d36:	4945      	ldr	r1, [pc, #276]	; (e4c <usb_isr+0x57c>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     d38:	8808      	ldrh	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     d3a:	684a      	ldr	r2, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     d3c:	f242 0121 	movw	r1, #8225	; 0x2021
     d40:	4288      	cmp	r0, r1
     d42:	f47f ae87 	bne.w	a54 <usb_isr+0x184>
     d46:	b292      	uxth	r2, r2
     d48:	2a00      	cmp	r2, #0
     d4a:	f000 80c9 	beq.w	ee0 <usb_isr+0x610>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC2_STATUS_INTERFACE) {
     d4e:	2a02      	cmp	r2, #2
     d50:	f47f ae80 	bne.w	a54 <usb_isr+0x184>
		memcpy(usb_cdc2_line_coding, endpoint0_buffer, 7);
     d54:	493e      	ldr	r1, [pc, #248]	; (e50 <usb_isr+0x580>)
     d56:	4a3f      	ldr	r2, [pc, #252]	; (e54 <usb_isr+0x584>)
     d58:	c903      	ldmia	r1, {r0, r1}
     d5a:	8091      	strh	r1, [r2, #4]
		if (usb_cdc2_line_coding[0] == 134) {
     d5c:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc2_line_coding, endpoint0_buffer, 7);
     d5e:	ea4f 4111 	mov.w	r1, r1, lsr #16
     d62:	6010      	str	r0, [r2, #0]
     d64:	7191      	strb	r1, [r2, #6]
		if (usb_cdc2_line_coding[0] == 134) {
     d66:	f47f ae75 	bne.w	a54 <usb_isr+0x184>
	__disable_irq();
     d6a:	b672      	cpsid	i
	sof_usage |= (1 << interface);
     d6c:	493a      	ldr	r1, [pc, #232]	; (e58 <usb_isr+0x588>)
     d6e:	780a      	ldrb	r2, [r1, #0]
     d70:	f042 0210 	orr.w	r2, r2, #16
     d74:	700a      	strb	r2, [r1, #0]
	uint32_t intr = USB1_USBINTR;
     d76:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
     d7a:	0615      	lsls	r5, r2, #24
     d7c:	d405      	bmi.n	d8a <usb_isr+0x4ba>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     d7e:	2180      	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     d80:	430a      	orrs	r2, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     d82:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     d86:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	__enable_irq();
     d8a:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
     d8c:	4b33      	ldr	r3, [pc, #204]	; (e5c <usb_isr+0x58c>)
     d8e:	2250      	movs	r2, #80	; 0x50
     d90:	701a      	strb	r2, [r3, #0]
     d92:	e65f      	b.n	a54 <usb_isr+0x184>
		endpoint_queue_head[0].status = 0;
     d94:	60eb      	str	r3, [r5, #12]
		endpoint0_transfer_data.next = 1;
     d96:	2301      	movs	r3, #1
		endpoint0_setupdata.bothwords = setupdata;
     d98:	492c      	ldr	r1, [pc, #176]	; (e4c <usb_isr+0x57c>)
		endpoint0_transfer_data.next = 1;
     d9a:	f8c9 3000 	str.w	r3, [r9]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d9e:	4b30      	ldr	r3, [pc, #192]	; (e60 <usb_isr+0x590>)
		endpoint0_setupdata.bothwords = setupdata;
     da0:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     da2:	f8c9 3004 	str.w	r3, [r9, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     da6:	4b2f      	ldr	r3, [pc, #188]	; (e64 <usb_isr+0x594>)
		endpoint0_setupdata.bothwords = setupdata;
     da8:	6048      	str	r0, [r1, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     daa:	f8c9 3010 	str.w	r3, [r9, #16]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     dae:	f8c5 9008 	str.w	r9, [r5, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     db2:	e9c9 8a02 	strd	r8, sl, [r9, #8]
		USB1_ENDPTPRIME |= (1<<0);
     db6:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
     dba:	f042 0201 	orr.w	r2, r2, #1
     dbe:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
     dc2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     dc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     dca:	f8c9 2014 	str.w	r2, [r9, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     dce:	f8c9 3018 	str.w	r3, [r9, #24]
		while (USB1_ENDPTPRIME) ;
     dd2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     dd6:	2b00      	cmp	r3, #0
     dd8:	d1fb      	bne.n	dd2 <usb_isr+0x502>
	endpoint0_transfer_ack.next = 1;
     dda:	4a10      	ldr	r2, [pc, #64]	; (e1c <usb_isr+0x54c>)
	endpoint_queue_head[1].status = 0;
     ddc:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     dde:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
     de0:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     de2:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     de4:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     de6:	f248 0380 	movw	r3, #32896	; 0x8080
     dea:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     dec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     df0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     df4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     dfc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     e04:	f8cb 3000 	str.w	r3, [fp]
	while (USB1_ENDPTPRIME) ;
     e08:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e0c:	2b00      	cmp	r3, #0
     e0e:	d1fb      	bne.n	e08 <usb_isr+0x538>
     e10:	e5ca      	b.n	9a8 <usb_isr+0xd8>
     e12:	bf00      	nop
     e14:	00cc0002 	.word	0x00cc0002
     e18:	20002809 	.word	0x20002809
     e1c:	200016e0 	.word	0x200016e0
     e20:	200027c4 	.word	0x200027c4
     e24:	200027d4 	.word	0x200027d4
     e28:	20002807 	.word	0x20002807
     e2c:	20002644 	.word	0x20002644
     e30:	2000091c 	.word	0x2000091c
     e34:	2000280a 	.word	0x2000280a
     e38:	60001eb4 	.word	0x60001eb4
     e3c:	60001f44 	.word	0x60001f44
     e40:	20206000 	.word	0x20206000
     e44:	200027e0 	.word	0x200027e0
     e48:	20002808 	.word	0x20002808
     e4c:	20001a20 	.word	0x20001a20
     e50:	200021d8 	.word	0x200021d8
     e54:	200027cc 	.word	0x200027cc
     e58:	20002801 	.word	0x20002801
     e5c:	2000280b 	.word	0x2000280b
     e60:	00070080 	.word	0x00070080
     e64:	200041d8 	.word	0x200041d8
				if (datalen > setup.wLength) datalen = setup.wLength;
     e68:	0c02      	lsrs	r2, r0, #16
					datalen = *(list->addr);
     e6a:	780b      	ldrb	r3, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
     e6c:	429a      	cmp	r2, r3
     e6e:	bf28      	it	cs
     e70:	461a      	movcs	r2, r3
				} else if (setup.wValue == 0x700) {
     e72:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
     e76:	d12a      	bne.n	ece <usb_isr+0x5fe>
					if (usb_high_speed) src = usb_config_descriptor_12;
     e78:	4b1d      	ldr	r3, [pc, #116]	; (ef0 <usb_isr+0x620>)
     e7a:	481e      	ldr	r0, [pc, #120]	; (ef4 <usb_isr+0x624>)
     e7c:	f893 c000 	ldrb.w	ip, [r3]
     e80:	491d      	ldr	r1, [pc, #116]	; (ef8 <usb_isr+0x628>)
					memcpy(usb_descriptor_buffer, src, datalen);
     e82:	4b1e      	ldr	r3, [pc, #120]	; (efc <usb_isr+0x62c>)
     e84:	f1bc 0f00 	cmp.w	ip, #0
     e88:	bf18      	it	ne
     e8a:	4601      	movne	r1, r0
     e8c:	9200      	str	r2, [sp, #0]
     e8e:	4618      	mov	r0, r3
     e90:	f002 fc3c 	bl	370c <memcpy>
					usb_descriptor_buffer[1] = 7;
     e94:	2107      	movs	r1, #7
					memcpy(usb_descriptor_buffer, src, datalen);
     e96:	4603      	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
     e98:	7041      	strb	r1, [r0, #1]
     e9a:	9a00      	ldr	r2, [sp, #0]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     e9c:	f023 011f 	bic.w	r1, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
     ea0:	4413      	add	r3, r2
	asm volatile("": : :"memory");
	asm("dsb");
     ea2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     ea6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
     eaa:	f8c0 1f70 	str.w	r1, [r0, #3952]	; 0xf70
		location += 32;
     eae:	3120      	adds	r1, #32
	} while (location < end_addr);
     eb0:	428b      	cmp	r3, r1
     eb2:	d8fa      	bhi.n	eaa <usb_isr+0x5da>
	asm("dsb");
     eb4:	f3bf 8f4f 	dsb	sy
	asm("isb");
     eb8:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     ebc:	480f      	ldr	r0, [pc, #60]	; (efc <usb_isr+0x62c>)
     ebe:	4611      	mov	r1, r2
     ec0:	f7ff fca4 	bl	80c <endpoint0_transmit.constprop.0>
				return;
     ec4:	e570      	b.n	9a8 <usb_isr+0xd8>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     ec6:	03c9      	lsls	r1, r1, #15
     ec8:	f53f ae03 	bmi.w	ad2 <usb_isr+0x202>
     ecc:	e603      	b.n	ad6 <usb_isr+0x206>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     ece:	4b0b      	ldr	r3, [pc, #44]	; (efc <usb_isr+0x62c>)
     ed0:	4618      	mov	r0, r3
     ed2:	e9cd 2300 	strd	r2, r3, [sp]
     ed6:	f002 fc19 	bl	370c <memcpy>
     eda:	e9dd 2300 	ldrd	r2, r3, [sp]
     ede:	e7dd      	b.n	e9c <usb_isr+0x5cc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     ee0:	4907      	ldr	r1, [pc, #28]	; (f00 <usb_isr+0x630>)
     ee2:	4a08      	ldr	r2, [pc, #32]	; (f04 <usb_isr+0x634>)
     ee4:	e738      	b.n	d58 <usb_isr+0x488>
				usb_stop_sof_interrupts(NUM_INTERFACE);
     ee6:	2004      	movs	r0, #4
     ee8:	f7ff fcdc 	bl	8a4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
     eec:	f002 ff40 	bl	3d70 <___reboot_Teensyduino__veneer>
     ef0:	2000280a 	.word	0x2000280a
     ef4:	60001eb4 	.word	0x60001eb4
     ef8:	60001f44 	.word	0x60001f44
     efc:	20206000 	.word	0x20206000
     f00:	200021d8 	.word	0x200021d8
     f04:	200027d8 	.word	0x200027d8

00000f08 <usb_config_rx>:
{
     f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f0c:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     f0e:	040d      	lsls	r5, r1, #16
{
     f10:	461e      	mov	r6, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     f12:	b90a      	cbnz	r2, f18 <usb_config_rx+0x10>
     f14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     f18:	1ea2      	subs	r2, r4, #2
     f1a:	2a03      	cmp	r2, #3
     f1c:	d901      	bls.n	f22 <usb_config_rx+0x1a>
}
     f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     f22:	f8df 9034 	ldr.w	r9, [pc, #52]	; f58 <usb_config_rx+0x50>
	memset(qh, 0, sizeof(endpoint_t));
     f26:	223c      	movs	r2, #60	; 0x3c
     f28:	2100      	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     f2a:	ea4f 18c4 	mov.w	r8, r4, lsl #7
     f2e:	eb09 17c4 	add.w	r7, r9, r4, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     f32:	1d38      	adds	r0, r7, #4
     f34:	f002 fc84 	bl	3840 <memset>
	qh->next = 1; // Terminate bit = 1
     f38:	2001      	movs	r0, #1
	qh->config = config;
     f3a:	f849 5008 	str.w	r5, [r9, r8]
	qh->callback_function = callback;
     f3e:	63be      	str	r6, [r7, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     f40:	60b8      	str	r0, [r7, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
     f42:	2e00      	cmp	r6, #0
     f44:	d0eb      	beq.n	f1e <usb_config_rx+0x16>
     f46:	4b03      	ldr	r3, [pc, #12]	; (f54 <usb_config_rx+0x4c>)
     f48:	40a0      	lsls	r0, r4
     f4a:	681c      	ldr	r4, [r3, #0]
     f4c:	4320      	orrs	r0, r4
     f4e:	6018      	str	r0, [r3, #0]
}
     f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f54:	200021e4 	.word	0x200021e4
     f58:	20000000 	.word	0x20000000

00000f5c <usb_config_tx>:
{
     f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f60:	b083      	sub	sp, #12
     f62:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     f64:	040d      	lsls	r5, r1, #16
{
     f66:	461f      	mov	r7, r3
     f68:	9001      	str	r0, [sp, #4]
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     f6a:	b90a      	cbnz	r2, f70 <usb_config_tx+0x14>
     f6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     f70:	1ea2      	subs	r2, r4, #2
     f72:	2a03      	cmp	r2, #3
     f74:	d902      	bls.n	f7c <usb_config_tx+0x20>
}
     f76:	b003      	add	sp, #12
     f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     f7c:	01e6      	lsls	r6, r4, #7
     f7e:	f8df 9040 	ldr.w	r9, [pc, #64]	; fc0 <usb_config_tx+0x64>
	memset(qh, 0, sizeof(endpoint_t));
     f82:	223c      	movs	r2, #60	; 0x3c
     f84:	2100      	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     f86:	3640      	adds	r6, #64	; 0x40
     f88:	eb09 0806 	add.w	r8, r9, r6
	memset(qh, 0, sizeof(endpoint_t));
     f8c:	f108 0004 	add.w	r0, r8, #4
     f90:	f002 fc56 	bl	3840 <memset>
	qh->next = 1; // Terminate bit = 1
     f94:	2201      	movs	r2, #1
	qh->config = config;
     f96:	f849 5006 	str.w	r5, [r9, r6]
	qh->callback_function = callback;
     f9a:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     f9e:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
     fa2:	2f00      	cmp	r7, #0
     fa4:	d0e7      	beq.n	f76 <usb_config_tx+0x1a>
     fa6:	4b05      	ldr	r3, [pc, #20]	; (fbc <usb_config_tx+0x60>)
     fa8:	3410      	adds	r4, #16
     faa:	6819      	ldr	r1, [r3, #0]
     fac:	fa02 f404 	lsl.w	r4, r2, r4
     fb0:	430c      	orrs	r4, r1
     fb2:	601c      	str	r4, [r3, #0]
}
     fb4:	b003      	add	sp, #12
     fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     fba:	bf00      	nop
     fbc:	200021e4 	.word	0x200021e4
     fc0:	20000000 	.word	0x20000000

00000fc4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
     fc4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
     fc6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
     fc8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
     fca:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
     fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
     fd2:	b410      	push	{r4}
	transfer->next = 1;
     fd4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
     fd6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
     fd8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
     fdc:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
     fde:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
     fe2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
     fe6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
     fe8:	6181      	str	r1, [r0, #24]
}
     fea:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
     fee:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
     ff2:	4770      	bx	lr

00000ff4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     ff4:	1e83      	subs	r3, r0, #2
{
     ff6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     ff8:	2b03      	cmp	r3, #3
     ffa:	d900      	bls.n	ffe <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
     ffc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1000:	f100 0110 	add.w	r1, r0, #16
    1004:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1008:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    100c:	fa0c f101 	lsl.w	r1, ip, r1
    1010:	3040      	adds	r0, #64	; 0x40
    1012:	f7ff bb9b 	b.w	74c <schedule_transfer>
    1016:	bf00      	nop
    1018:	20000000 	.word	0x20000000

0000101c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    101c:	1e83      	subs	r3, r0, #2
{
    101e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1020:	2b03      	cmp	r3, #3
    1022:	d900      	bls.n	1026 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    1024:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    1026:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    1028:	4b02      	ldr	r3, [pc, #8]	; (1034 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    102a:	4081      	lsls	r1, r0
    102c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1030:	f7ff bb8c 	b.w	74c <schedule_transfer>
    1034:	20000000 	.word	0x20000000

00001038 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1038:	6840      	ldr	r0, [r0, #4]
#endif
}
    103a:	4770      	bx	lr

0000103c <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    103c:	b510      	push	{r4, lr}
    103e:	4604      	mov	r4, r0
		end();
    1040:	f001 f8f8 	bl	2234 <IntervalTimer::end()>
	}
    1044:	4620      	mov	r0, r4
    1046:	bd10      	pop	{r4, pc}

00001048 <_GLOBAL__sub_I__Z4tonehtm>:
static uint32_t tone_toggle_count;
static volatile uint32_t *tone_reg;
static uint32_t tone_mask;
static float tone_usec=0.0;
static uint32_t tone_new_count=0;
static IntervalTimer tone_timer;
    1048:	4a02      	ldr	r2, [pc, #8]	; (1054 <_GLOBAL__sub_I__Z4tonehtm+0xc>)
    104a:	4903      	ldr	r1, [pc, #12]	; (1058 <_GLOBAL__sub_I__Z4tonehtm+0x10>)
    104c:	4803      	ldr	r0, [pc, #12]	; (105c <_GLOBAL__sub_I__Z4tonehtm+0x14>)
    104e:	f002 bb1f 	b.w	3690 <__aeabi_atexit>
    1052:	bf00      	nop
    1054:	20000db0 	.word	0x20000db0
    1058:	0000103d 	.word	0x0000103d
    105c:	20000dcc 	.word	0x20000dcc

00001060 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    1060:	4a07      	ldr	r2, [pc, #28]	; (1080 <rtc_get+0x20>)
    1062:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    1064:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    1066:	4619      	mov	r1, r3
    1068:	4684      	mov	ip, r0
    106a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    106c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    106e:	4299      	cmp	r1, r3
    1070:	d1f9      	bne.n	1066 <rtc_get+0x6>
    1072:	4584      	cmp	ip, r0
    1074:	d1f7      	bne.n	1066 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    1076:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    1078:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    107c:	4770      	bx	lr
    107e:	bf00      	nop
    1080:	400d4000 	.word	0x400d4000

00001084 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    1084:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    1088:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    108a:	4666      	mov	r6, ip
	int i=0, j;
    108c:	2400      	movs	r4, #0
    108e:	e000      	b.n	1092 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1090:	3401      	adds	r4, #1
		digit = val % radix;
    1092:	fbb0 f5f2 	udiv	r5, r0, r2
    1096:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    109a:	2b09      	cmp	r3, #9
    109c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    10a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    10a4:	fa5f fe8e 	uxtb.w	lr, lr
    10a8:	bf98      	it	ls
    10aa:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    10ae:	4290      	cmp	r0, r2
		val /= radix;
    10b0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    10b2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    10b6:	d2eb      	bcs.n	1090 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    10b8:	1c63      	adds	r3, r4, #1
    10ba:	2200      	movs	r2, #0
    10bc:	18c8      	adds	r0, r1, r3
    10be:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    10c0:	b17c      	cbz	r4, 10e2 <ultoa+0x5e>
		t = buf[j];
    10c2:	4662      	mov	r2, ip
    10c4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    10c8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    10cc:	ea6f 030c 	mvn.w	r3, ip
    10d0:	3202      	adds	r2, #2
		buf[j] = buf[i];
    10d2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    10d6:	440b      	add	r3, r1
    10d8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    10da:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    10dc:	4423      	add	r3, r4
    10de:	429a      	cmp	r2, r3
    10e0:	dbef      	blt.n	10c2 <ultoa+0x3e>
	}
	return buf;
}
    10e2:	4608      	mov	r0, r1
    10e4:	bd70      	pop	{r4, r5, r6, pc}
    10e6:	bf00      	nop

000010e8 <serialEventUSB1()>:

#include <Arduino.h>
void serialEventUSB1() __attribute__((weak));
void serialEventUSB1() {}
    10e8:	4770      	bx	lr
    10ea:	bf00      	nop

000010ec <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    10ee:	460c      	mov	r4, r1
    10f0:	b171      	cbz	r1, 1110 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    10f2:	b182      	cbz	r2, 1116 <Print::write(unsigned char const*, unsigned int)+0x2a>
    10f4:	4606      	mov	r6, r0
    10f6:	188f      	adds	r7, r1, r2
	size_t count = 0;
    10f8:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    10fa:	6833      	ldr	r3, [r6, #0]
    10fc:	4630      	mov	r0, r6
    10fe:	f814 1b01 	ldrb.w	r1, [r4], #1
    1102:	681b      	ldr	r3, [r3, #0]
    1104:	4798      	blx	r3
    1106:	42bc      	cmp	r4, r7
    1108:	4405      	add	r5, r0
    110a:	d1f6      	bne.n	10fa <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    110c:	4628      	mov	r0, r5
    110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    1110:	460d      	mov	r5, r1
}
    1112:	4628      	mov	r0, r5
    1114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    1116:	4615      	mov	r5, r2
    1118:	e7f8      	b.n	110c <Print::write(unsigned char const*, unsigned int)+0x20>
    111a:	bf00      	nop

0000111c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    111c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    111e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    1120:	bf08      	it	eq
    1122:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    1124:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    1126:	b399      	cbz	r1, 1190 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x74>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    1128:	f04f 0e21 	mov.w	lr, #33	; 0x21
    112c:	e001      	b.n	1132 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    112e:	fa5f fe86 	uxtb.w	lr, r6
    1132:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
    1136:	fbb1 f5f2 	udiv	r5, r1, r2
    113a:	fb02 1415 	mls	r4, r2, r5, r1
    113e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1142:	2c09      	cmp	r4, #9
    1144:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    1148:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    114c:	bf88      	it	hi
    114e:	fa5f fc84 	uxtbhi.w	ip, r4
    1152:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    1156:	bf98      	it	ls
    1158:	fa5f fc8c 	uxtbls.w	ip, ip
			if (n == 0) break;
    115c:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    115e:	446c      	add	r4, sp
			n /= base;
    1160:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1162:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    1166:	d2e2      	bcs.n	112e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    1168:	b14b      	cbz	r3, 117e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x62>
		i--;
    116a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
    116e:	222d      	movs	r2, #45	; 0x2d
		i--;
    1170:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    1174:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    1178:	446b      	add	r3, sp
    117a:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    117e:	6803      	ldr	r3, [r0, #0]
    1180:	a901      	add	r1, sp, #4
    1182:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    1186:	685b      	ldr	r3, [r3, #4]
    1188:	4471      	add	r1, lr
    118a:	4798      	blx	r3
}
    118c:	b00a      	add	sp, #40	; 0x28
    118e:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    1190:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1192:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    1196:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    119a:	e7e5      	b.n	1168 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4c>

0000119c <Print::print(long)>:
	if (n < 0) {
    119c:	2900      	cmp	r1, #0
    119e:	db03      	blt.n	11a8 <Print::print(long)+0xc>
	uint8_t sign=0;
    11a0:	2300      	movs	r3, #0
	if (base == 0) {
    11a2:	220a      	movs	r2, #10
    11a4:	f7ff bfba 	b.w	111c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    11a8:	4249      	negs	r1, r1
		sign = '-';
    11aa:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    11ac:	220a      	movs	r2, #10
    11ae:	f7ff bfb5 	b.w	111c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    11b2:	bf00      	nop

000011b4 <Print::println()>:
{
    11b4:	b500      	push	{lr}
	return write(buf, 2);
    11b6:	6803      	ldr	r3, [r0, #0]
{
    11b8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    11ba:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    11be:	2202      	movs	r2, #2
    11c0:	a901      	add	r1, sp, #4
    11c2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    11c4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    11c8:	4798      	blx	r3
}
    11ca:	b003      	add	sp, #12
    11cc:	f85d fb04 	ldr.w	pc, [sp], #4

000011d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    11d0:	b932      	cbnz	r2, 11e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    11d2:	6803      	ldr	r3, [r0, #0]
    11d4:	b2c9      	uxtb	r1, r1
{
    11d6:	b500      	push	{lr}
		return write((uint8_t)n);
    11d8:	681b      	ldr	r3, [r3, #0]
}
    11da:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    11de:	4718      	bx	r3
    11e0:	f7ff bf9c 	b.w	111c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    11e4:	0000      	movs	r0, r0
	...

000011e8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    11e8:	eeb4 0b40 	vcmp.f64	d0, d0
{
    11ec:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    11ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    11f2:	4605      	mov	r5, r0
    11f4:	ed2d 8b02 	vpush	{d8}
    11f8:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    11fa:	d678      	bvs.n	12ee <Print::printFloat(double, unsigned char)+0x106>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    11fc:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    1200:	ed9f 6b45 	vldr	d6, [pc, #276]	; 1318 <Print::printFloat(double, unsigned char)+0x130>
    1204:	eeb4 7b46 	vcmp.f64	d7, d6
    1208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    120c:	dc67      	bgt.n	12de <Print::printFloat(double, unsigned char)+0xf6>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    120e:	ed9f 7b44 	vldr	d7, [pc, #272]	; 1320 <Print::printFloat(double, unsigned char)+0x138>
    1212:	eeb4 0bc7 	vcmpe.f64	d0, d7
    1216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    121a:	dc56      	bgt.n	12ca <Print::printFloat(double, unsigned char)+0xe2>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    121c:	ed9f 7b42 	vldr	d7, [pc, #264]	; 1328 <Print::printFloat(double, unsigned char)+0x140>
    1220:	eeb4 0bc7 	vcmpe.f64	d0, d7
    1224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1228:	d44f      	bmi.n	12ca <Print::printFloat(double, unsigned char)+0xe2>
	
	// Handle negative numbers
	if (number < 0.0) {
    122a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    122e:	460c      	mov	r4, r1
    1230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1234:	d457      	bmi.n	12e6 <Print::printFloat(double, unsigned char)+0xfe>
	uint8_t sign=0;
    1236:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    1238:	2c00      	cmp	r4, #0
    123a:	d05c      	beq.n	12f6 <Print::printFloat(double, unsigned char)+0x10e>
	double rounding = 0.5;
    123c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    1240:	2200      	movs	r2, #0
		rounding *= 0.1;
    1242:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 1330 <Print::printFloat(double, unsigned char)+0x148>
	for (uint8_t i=0; i<digits; ++i) {
    1246:	3201      	adds	r2, #1
		rounding *= 0.1;
    1248:	ee28 8b07 	vmul.f64	d8, d8, d7
	for (uint8_t i=0; i<digits; ++i) {
    124c:	b2d1      	uxtb	r1, r2
    124e:	42a1      	cmp	r1, r4
    1250:	d3f9      	bcc.n	1246 <Print::printFloat(double, unsigned char)+0x5e>
	}
	number += rounding;
    1252:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    1256:	220a      	movs	r2, #10
    1258:	4628      	mov	r0, r5
    125a:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    125e:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    1262:	ee17 1a90 	vmov	r1, s15
    1266:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    126a:	f7ff ff57 	bl	111c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    126e:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    1270:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    1274:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
    1278:	4606      	mov	r6, r0
		buf[0] = '.';
    127a:	bf28      	it	cs
    127c:	240f      	movcs	r4, #15
    127e:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    1282:	aa02      	add	r2, sp, #8
    1284:	f104 0308 	add.w	r3, r4, #8
    1288:	eb0d 0103 	add.w	r1, sp, r3
			remainder *= 10.0;
    128c:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
    1290:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    1294:	edcd 6a01 	vstr	s13, [sp, #4]
    1298:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    129c:	ee06 3a90 	vmov	s13, r3
			buf[count++] = '0' + n;
    12a0:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    12a2:	eeb8 8be6 	vcvt.f64.s32	d8, s13
			buf[count++] = '0' + n;
    12a6:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    12aa:	4291      	cmp	r1, r2
			remainder -= n; 
    12ac:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    12b0:	d1ec      	bne.n	128c <Print::printFloat(double, unsigned char)+0xa4>
		}
		count += write(buf, count);
    12b2:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    12b4:	3401      	adds	r4, #1
		count += write(buf, count);
    12b6:	a902      	add	r1, sp, #8
    12b8:	4628      	mov	r0, r5
    12ba:	685b      	ldr	r3, [r3, #4]
    12bc:	b2e2      	uxtb	r2, r4
    12be:	4798      	blx	r3
	}
	return count;
}
    12c0:	4630      	mov	r0, r6
    12c2:	b006      	add	sp, #24
    12c4:	ecbd 8b02 	vpop	{d8}
    12c8:	bd70      	pop	{r4, r5, r6, pc}
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    12ca:	682b      	ldr	r3, [r5, #0]
    12cc:	2203      	movs	r2, #3
    12ce:	491a      	ldr	r1, [pc, #104]	; (1338 <Print::printFloat(double, unsigned char)+0x150>)
    12d0:	685b      	ldr	r3, [r3, #4]
    12d2:	b006      	add	sp, #24
    12d4:	ecbd 8b02 	vpop	{d8}
    12d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    12dc:	4718      	bx	r3
    12de:	6803      	ldr	r3, [r0, #0]
    12e0:	2203      	movs	r2, #3
    12e2:	4916      	ldr	r1, [pc, #88]	; (133c <Print::printFloat(double, unsigned char)+0x154>)
    12e4:	e7f4      	b.n	12d0 <Print::printFloat(double, unsigned char)+0xe8>
		number = -number;
    12e6:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	e7a4      	b.n	1238 <Print::printFloat(double, unsigned char)+0x50>
    12ee:	6803      	ldr	r3, [r0, #0]
    12f0:	2203      	movs	r2, #3
    12f2:	4913      	ldr	r1, [pc, #76]	; (1340 <Print::printFloat(double, unsigned char)+0x158>)
    12f4:	e7ec      	b.n	12d0 <Print::printFloat(double, unsigned char)+0xe8>
	number += rounding;
    12f6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    12fa:	220a      	movs	r2, #10
    12fc:	4628      	mov	r0, r5
    12fe:	ee30 0b07 	vadd.f64	d0, d0, d7
    1302:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    1306:	ee17 1a90 	vmov	r1, s15
}
    130a:	b006      	add	sp, #24
    130c:	ecbd 8b02 	vpop	{d8}
    1310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1314:	f7ff bf02 	b.w	111c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    1318:	ffffffff 	.word	0xffffffff
    131c:	7fefffff 	.word	0x7fefffff
    1320:	e0000000 	.word	0xe0000000
    1324:	41efffff 	.word	0x41efffff
    1328:	e0000000 	.word	0xe0000000
    132c:	c1efffff 	.word	0xc1efffff
    1330:	9999999a 	.word	0x9999999a
    1334:	3fb99999 	.word	0x3fb99999
    1338:	2000036c 	.word	0x2000036c
    133c:	20000368 	.word	0x20000368
    1340:	20000364 	.word	0x20000364

00001344 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1344:	b900      	cbnz	r0, 1348 <delay+0x4>
    1346:	4770      	bx	lr
{
    1348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    134c:	2101      	movs	r1, #1
    134e:	4681      	mov	r9, r0
    1350:	4c22      	ldr	r4, [pc, #136]	; (13dc <delay+0x98>)
    1352:	4d23      	ldr	r5, [pc, #140]	; (13e0 <delay+0x9c>)
    1354:	4e23      	ldr	r6, [pc, #140]	; (13e4 <delay+0xa0>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1356:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    135a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    135c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    135e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1362:	2b00      	cmp	r3, #0
    1364:	d1f7      	bne.n	1356 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1366:	4920      	ldr	r1, [pc, #128]	; (13e8 <delay+0xa4>)
    1368:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    136a:	f8df a080 	ldr.w	sl, [pc, #128]	; 13ec <delay+0xa8>
	uint32_t ccdelta = cyccnt - scc;
    136e:	1a18      	subs	r0, r3, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1370:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    1374:	2701      	movs	r7, #1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1376:	f8da 3000 	ldr.w	r3, [sl]
	uint32_t usec = 1000*smc + frac;
    137a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    137e:	fba0 0303 	umull	r0, r3, r0, r3
	uint32_t usec = 1000*smc + frac;
    1382:	455b      	cmp	r3, fp
    1384:	bf94      	ite	ls
    1386:	4498      	addls	r8, r3
    1388:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    138a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    138e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1390:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1392:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1396:	2b00      	cmp	r3, #0
    1398:	d1f7      	bne.n	138a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    139a:	f8d1 c004 	ldr.w	ip, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    139e:	f8da 3000 	ldr.w	r3, [sl]
	uint32_t ccdelta = cyccnt - scc;
    13a2:	ebac 0000 	sub.w	r0, ip, r0
	uint32_t usec = 1000*smc + frac;
    13a6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    13aa:	fba0 0303 	umull	r0, r3, r0, r3
		while ((micros() - start) >= 1000) {
    13ae:	eba2 0208 	sub.w	r2, r2, r8
    13b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    13b6:	bf94      	ite	ls
    13b8:	18d2      	addls	r2, r2, r3
    13ba:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
    13be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    13c2:	d306      	bcc.n	13d2 <delay+0x8e>
			if (--msec == 0) return;
    13c4:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    13c8:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    13cc:	d1dd      	bne.n	138a <delay+0x46>
}
    13ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    13d2:	f001 fbf7 	bl	2bc4 <yield>
		while ((micros() - start) >= 1000) {
    13d6:	4904      	ldr	r1, [pc, #16]	; (13e8 <delay+0xa4>)
    13d8:	e7d7      	b.n	138a <delay+0x46>
    13da:	bf00      	nop
    13dc:	200027c8 	.word	0x200027c8
    13e0:	200027c4 	.word	0x200027c4
    13e4:	200027c0 	.word	0x200027c0
    13e8:	e0001000 	.word	0xe0001000
    13ec:	200026bc 	.word	0x200026bc

000013f0 <IRQHandler_Serial8>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial8()
{
	Serial8.IRQHandler();
    13f0:	4801      	ldr	r0, [pc, #4]	; (13f8 <IRQHandler_Serial8+0x8>)
    13f2:	f000 bb15 	b.w	1a20 <HardwareSerial::IRQHandler()>
    13f6:	bf00      	nop
    13f8:	20001ce4 	.word	0x20001ce4

000013fc <_GLOBAL__sub_I_IRQHandler_Serial8>:
	2, //  CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART5_TRG_INPUT
};
HardwareSerial Serial8(&IMXRT_LPUART5, &UART5_Hardware, tx_buffer8, SERIAL8_TX_BUFFER_SIZE,
	rx_buffer8,  SERIAL8_RX_BUFFER_SIZE);
    13fc:	b410      	push	{r4}
	constexpr Print() : write_error(0) {}
    13fe:	4b17      	ldr	r3, [pc, #92]	; (145c <_GLOBAL__sub_I_IRQHandler_Serial8+0x60>)
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1400:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1404:	2200      	movs	r2, #0
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    1406:	2028      	movs	r0, #40	; 0x28
    1408:	609c      	str	r4, [r3, #8]
    140a:	2140      	movs	r1, #64	; 0x40
    140c:	4c14      	ldr	r4, [pc, #80]	; (1460 <_GLOBAL__sub_I_IRQHandler_Serial8+0x64>)
    140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1412:	601c      	str	r4, [r3, #0]
    1414:	4c13      	ldr	r4, [pc, #76]	; (1464 <_GLOBAL__sub_I_IRQHandler_Serial8+0x68>)
    1416:	711a      	strb	r2, [r3, #4]
    1418:	611c      	str	r4, [r3, #16]
    141a:	4c13      	ldr	r4, [pc, #76]	; (1468 <_GLOBAL__sub_I_IRQHandler_Serial8+0x6c>)
    141c:	731a      	strb	r2, [r3, #12]
    141e:	615c      	str	r4, [r3, #20]
    1420:	4c12      	ldr	r4, [pc, #72]	; (146c <_GLOBAL__sub_I_IRQHandler_Serial8+0x70>)
    1422:	831a      	strh	r2, [r3, #24]
    1424:	769a      	strb	r2, [r3, #26]
    1426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    142a:	61dc      	str	r4, [r3, #28]
    142c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    1430:	f85d 4b04 	ldr.w	r4, [sp], #4
    1434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1438:	625a      	str	r2, [r3, #36]	; 0x24
    143a:	641a      	str	r2, [r3, #64]	; 0x40
    143c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    1440:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    1444:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    1448:	4809      	ldr	r0, [pc, #36]	; (1470 <_GLOBAL__sub_I_IRQHandler_Serial8+0x74>)
    144a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    144e:	6218      	str	r0, [r3, #32]
    1450:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1454:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1458:	4770      	bx	lr
    145a:	bf00      	nop
    145c:	20001ce4 	.word	0x20001ce4
    1460:	20000380 	.word	0x20000380
    1464:	40194000 	.word	0x40194000
    1468:	20000f64 	.word	0x20000f64
    146c:	20002074 	.word	0x20002074
    1470:	20001f04 	.word	0x20001f04

00001474 <serialEvent8()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent8() __attribute__((weak));
void serialEvent8() {}		// No use calling this so disable if called...
    1474:	4770      	bx	lr
    1476:	bf00      	nop

00001478 <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    1478:	4770      	bx	lr
    147a:	bf00      	nop

0000147c <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    147c:	4801      	ldr	r0, [pc, #4]	; (1484 <IRQHandler_Serial7+0x8>)
    147e:	f000 bacf 	b.w	1a20 <HardwareSerial::IRQHandler()>
    1482:	bf00      	nop
    1484:	20001c84 	.word	0x20001c84

00001488 <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    1488:	b410      	push	{r4}
    148a:	4b17      	ldr	r3, [pc, #92]	; (14e8 <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    148c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1490:	2200      	movs	r2, #0
    1492:	2028      	movs	r0, #40	; 0x28
    1494:	609c      	str	r4, [r3, #8]
    1496:	2140      	movs	r1, #64	; 0x40
    1498:	4c14      	ldr	r4, [pc, #80]	; (14ec <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    149a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    149e:	601c      	str	r4, [r3, #0]
    14a0:	4c13      	ldr	r4, [pc, #76]	; (14f0 <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    14a2:	711a      	strb	r2, [r3, #4]
    14a4:	611c      	str	r4, [r3, #16]
    14a6:	4c13      	ldr	r4, [pc, #76]	; (14f4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
    14a8:	731a      	strb	r2, [r3, #12]
    14aa:	615c      	str	r4, [r3, #20]
    14ac:	4c12      	ldr	r4, [pc, #72]	; (14f8 <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
    14ae:	831a      	strh	r2, [r3, #24]
    14b0:	769a      	strb	r2, [r3, #26]
    14b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    14b6:	61dc      	str	r4, [r3, #28]
    14b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    14bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    14c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    14c4:	625a      	str	r2, [r3, #36]	; 0x24
    14c6:	641a      	str	r2, [r3, #64]	; 0x40
    14c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    14cc:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    14d0:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    14d4:	4809      	ldr	r0, [pc, #36]	; (14fc <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
    14d6:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    14da:	6218      	str	r0, [r3, #32]
    14dc:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    14e0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	20001c84 	.word	0x20001c84
    14ec:	20000380 	.word	0x20000380
    14f0:	4019c000 	.word	0x4019c000
    14f4:	20000fc8 	.word	0x20000fc8
    14f8:	2000204c 	.word	0x2000204c
    14fc:	20001ec4 	.word	0x20001ec4

00001500 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    1500:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    1504:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    1508:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    150a:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    150c:	4293      	cmp	r3, r2
    150e:	d202      	bcs.n	1516 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    1510:	1e50      	subs	r0, r2, #1
    1512:	1ac0      	subs	r0, r0, r3
}
    1514:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    1516:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1518:	3801      	subs	r0, #1
    151a:	4410      	add	r0, r2
    151c:	1ac0      	subs	r0, r0, r3
    151e:	4770      	bx	lr

00001520 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    1520:	b672      	cpsid	i
	head = rx_buffer_head_;
    1522:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    1526:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    152a:	b299      	uxth	r1, r3
	tail = rx_buffer_tail_;
    152c:	b293      	uxth	r3, r2
	int avail;
	if (head >= tail) avail = head - tail;
    152e:	4299      	cmp	r1, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    1530:	bf3c      	itt	cc
    1532:	6b82      	ldrcc	r2, [r0, #56]	; 0x38
    1534:	1889      	addcc	r1, r1, r2
	avail += (port->WATER >> 24) & 0x7;
    1536:	6902      	ldr	r2, [r0, #16]
	else avail = rx_buffer_total_size_ + head - tail;	
    1538:	1acb      	subs	r3, r1, r3
	avail += (port->WATER >> 24) & 0x7;
    153a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    153c:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    153e:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    1542:	4418      	add	r0, r3
    1544:	4770      	bx	lr
    1546:	bf00      	nop

00001548 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    1548:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    154c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    154e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    1552:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    1554:	b29b      	uxth	r3, r3
	if (head == tail) {
    1556:	4299      	cmp	r1, r3
    1558:	d010      	beq.n	157c <HardwareSerial::peek()+0x34>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    155a:	3301      	adds	r3, #1
    155c:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    155e:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    1560:	4298      	cmp	r0, r3
    1562:	bf98      	it	ls
    1564:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    1566:	4299      	cmp	r1, r3
    1568:	d903      	bls.n	1572 <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    156a:	6a12      	ldr	r2, [r2, #32]
    156c:	5cd0      	ldrb	r0, [r2, r3]
    156e:	b2c0      	uxtb	r0, r0
    1570:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    1572:	1a5b      	subs	r3, r3, r1
    1574:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1576:	5cd0      	ldrb	r0, [r2, r3]
    1578:	b2c0      	uxtb	r0, r0
	}
}
    157a:	4770      	bx	lr
		__disable_irq();
    157c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    157e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    1582:	b280      	uxth	r0, r0
		if (head == tail) {
    1584:	4281      	cmp	r1, r0
    1586:	d001      	beq.n	158c <HardwareSerial::peek()+0x44>
		__enable_irq();
    1588:	b662      	cpsie	i
    158a:	e7e6      	b.n	155a <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    158c:	6913      	ldr	r3, [r2, #16]
    158e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1590:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    1594:	d103      	bne.n	159e <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    1596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    159a:	b662      	cpsie	i
			return c;
    159c:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    159e:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    15a0:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    15a2:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    15a6:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    15a8:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    15ac:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    15b0:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    15b2:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    15b6:	704b      	strb	r3, [r1, #1]
    15b8:	e7ef      	b.n	159a <HardwareSerial::peek()+0x52>
    15ba:	bf00      	nop

000015bc <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    15bc:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    15c0:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    15c2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    15c6:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    15c8:	b29b      	uxth	r3, r3
	if (head == tail) {
    15ca:	4299      	cmp	r1, r3
    15cc:	d027      	beq.n	161e <HardwareSerial::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    15ce:	3301      	adds	r3, #1
{
    15d0:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    15d2:	6b94      	ldr	r4, [r2, #56]	; 0x38
    15d4:	429c      	cmp	r4, r3
    15d6:	d917      	bls.n	1608 <HardwareSerial::read()+0x4c>
	if (tail < rx_buffer_size_) {
    15d8:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    15da:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    15de:	4298      	cmp	r0, r3
    15e0:	d918      	bls.n	1614 <HardwareSerial::read()+0x58>
		c = rx_buffer_[tail];
    15e2:	6a10      	ldr	r0, [r2, #32]
    15e4:	5cc0      	ldrb	r0, [r0, r3]
    15e6:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    15e8:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    15ea:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    15ee:	b14d      	cbz	r5, 1604 <HardwareSerial::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    15f0:	4299      	cmp	r1, r3
		else avail = rx_buffer_total_size_ + head - tail;
    15f2:	bf38      	it	cc
    15f4:	1909      	addcc	r1, r1, r4
    15f6:	1acb      	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    15f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    15fa:	4299      	cmp	r1, r3
    15fc:	d302      	bcc.n	1604 <HardwareSerial::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    15fe:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    1600:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    1604:	bc30      	pop	{r4, r5}
    1606:	4770      	bx	lr
    1608:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    160c:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    160e:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    1610:	4298      	cmp	r0, r3
    1612:	d8e6      	bhi.n	15e2 <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    1614:	1a18      	subs	r0, r3, r0
    1616:	6a55      	ldr	r5, [r2, #36]	; 0x24
    1618:	5c28      	ldrb	r0, [r5, r0]
    161a:	b2c0      	uxtb	r0, r0
    161c:	e7e4      	b.n	15e8 <HardwareSerial::read()+0x2c>
    161e:	4608      	mov	r0, r1
		__disable_irq();
    1620:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    1622:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    1626:	b289      	uxth	r1, r1
		if (head == tail) {
    1628:	4288      	cmp	r0, r1
    162a:	d001      	beq.n	1630 <HardwareSerial::read()+0x74>
		__enable_irq();
    162c:	b662      	cpsie	i
    162e:	e7ce      	b.n	15ce <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    1630:	6913      	ldr	r3, [r2, #16]
    1632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1634:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    1638:	d103      	bne.n	1642 <HardwareSerial::read()+0x86>
			c = -1;	// assume nothing to return
    163a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    163e:	b662      	cpsie	i
}	
    1640:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1642:	69d8      	ldr	r0, [r3, #28]
    1644:	f3c0 0009 	ubfx	r0, r0, #0, #10
    1648:	e7f9      	b.n	163e <HardwareSerial::read()+0x82>
    164a:	bf00      	nop

0000164c <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    164c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    1650:	b143      	cbz	r3, 1664 <HardwareSerial::flush()+0x18>
{
    1652:	b510      	push	{r4, lr}
    1654:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    1656:	f001 fab5 	bl	2bc4 <yield>
    165a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    165e:	2b00      	cmp	r3, #0
    1660:	d1f9      	bne.n	1656 <HardwareSerial::flush()+0xa>
}
    1662:	bd10      	pop	{r4, pc}
    1664:	4770      	bx	lr
    1666:	bf00      	nop

00001668 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    1668:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    166c:	b9b8      	cbnz	r0, 169e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    166e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    1672:	b94b      	cbnz	r3, 1688 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1674:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    1678:	b93a      	cbnz	r2, 168a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    167a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    167e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1682:	b150      	cbz	r0, 169a <nvic_execution_priority()+0x32>
    1684:	4298      	cmp	r0, r3
    1686:	d208      	bcs.n	169a <nvic_execution_priority()+0x32>
}
    1688:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    168a:	2a0f      	cmp	r2, #15
    168c:	d9f7      	bls.n	167e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    168e:	4b05      	ldr	r3, [pc, #20]	; (16a4 <nvic_execution_priority()+0x3c>)
    1690:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    1692:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    1696:	2800      	cmp	r0, #0
    1698:	d1f4      	bne.n	1684 <nvic_execution_priority()+0x1c>
    169a:	4618      	mov	r0, r3
	return priority;
    169c:	4770      	bx	lr
	if (faultmask) return -1;
    169e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16a2:	e7f1      	b.n	1688 <nvic_execution_priority()+0x20>
    16a4:	e000e3f0 	.word	0xe000e3f0

000016a8 <HardwareSerial::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    16a8:	ee07 1a90 	vmov	s15, r1
    16ac:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 1918 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    16b0:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    16b2:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    16b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    16ba:	ed9f 6a98 	vldr	s12, [pc, #608]	; 191c <HardwareSerial::begin(unsigned long, unsigned short)+0x274>
    16be:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    16c2:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    16c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int bestosr = 4;
    16ca:	468e      	mov	lr, r1
	int bestdiv = 1;
    16cc:	2401      	movs	r4, #1
		float div = base / (float)osr;
    16ce:	ee07 1a90 	vmov	s15, r1
    16d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    16d6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    16da:	ee77 7a05 	vadd.f32	s15, s14, s10
    16de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    16e2:	ee17 3a90 	vmov	r3, s15
    16e6:	4563      	cmp	r3, ip
    16e8:	bfa8      	it	ge
    16ea:	4663      	movge	r3, ip
    16ec:	2b01      	cmp	r3, #1
    16ee:	bfb8      	it	lt
    16f0:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    16f2:	ee07 3a90 	vmov	s15, r3
    16f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    16fa:	ee76 6ac7 	vsub.f32	s13, s13, s14
    16fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    1702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    170a:	bf48      	it	mi
    170c:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    1710:	eef4 7ac6 	vcmpe.f32	s15, s12
    1714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1718:	d803      	bhi.n	1722 <HardwareSerial::begin(unsigned long, unsigned short)+0x7a>
			besterr = err;
    171a:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    171e:	468e      	mov	lr, r1
			bestdiv = divint;
    1720:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    1722:	3101      	adds	r1, #1
    1724:	2921      	cmp	r1, #33	; 0x21
    1726:	d1d2      	bne.n	16ce <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
	rx_buffer_head_ = 0;
    1728:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    172a:	6943      	ldr	r3, [r0, #20]
    172c:	f402 7500 	and.w	r5, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    1730:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    1734:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1738:	428d      	cmp	r5, r1
	rx_buffer_tail_ = 0;
    173a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    173e:	f8b3 505c 	ldrh.w	r5, [r3, #92]	; 0x5c
	tx_buffer_head_ = 0;
    1742:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    1746:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    174a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    174e:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    1750:	691e      	ldr	r6, [r3, #16]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    1752:	eba1 0505 	sub.w	r5, r1, r5
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    1756:	eba1 010c 	sub.w	r1, r1, ip
    175a:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    175e:	6831      	ldr	r1, [r6, #0]
    1760:	695d      	ldr	r5, [r3, #20]
    1762:	ea41 0105 	orr.w	r1, r1, r5
    1766:	6031      	str	r1, [r6, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    1768:	bf14      	ite	ne
    176a:	2101      	movne	r1, #1
    176c:	2100      	moveq	r1, #0
    176e:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    1770:	f040 80a3 	bne.w	18ba <HardwareSerial::begin(unsigned long, unsigned short)+0x212>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1774:	7e05      	ldrb	r5, [r0, #24]
    1776:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1934 <HardwareSerial::begin(unsigned long, unsigned short)+0x28c>
    177a:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    177e:	4e68      	ldr	r6, [pc, #416]	; (1920 <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    1780:	f89c 5018 	ldrb.w	r5, [ip, #24]
    1784:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    1788:	68a9      	ldr	r1, [r5, #8]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    178a:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    178c:	600e      	str	r6, [r1, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    178e:	f8dc 601c 	ldr.w	r6, [ip, #28]
    1792:	602e      	str	r6, [r5, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    1794:	f8dc 5020 	ldr.w	r5, [ip, #32]
    1798:	b115      	cbz	r5, 17a0 <HardwareSerial::begin(unsigned long, unsigned short)+0xf8>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    179a:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
    179e:	602e      	str	r6, [r5, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    17a0:	7e45      	ldrb	r5, [r0, #25]
    17a2:	27d9      	movs	r7, #217	; 0xd9
    17a4:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    17a8:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    17ac:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    17b0:	688e      	ldr	r6, [r1, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    17b2:	6849      	ldr	r1, [r1, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    17b4:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    17b6:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    17b8:	600d      	str	r5, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    17ba:	7e41      	ldrb	r1, [r0, #25]
    17bc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    17c0:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    17c2:	b10d      	cbz	r5, 17c8 <HardwareSerial::begin(unsigned long, unsigned short)+0x120>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    17c4:	6c49      	ldr	r1, [r1, #68]	; 0x44
    17c6:	6029      	str	r1, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    17c8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    17cc:	f1be 0f08 	cmp.w	lr, #8
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    17d0:	685d      	ldr	r5, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    17d2:	ea4f 6101 	mov.w	r1, r1, lsl #24
    17d6:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
    17da:	ea44 0401 	orr.w	r4, r4, r1
    17de:	6901      	ldr	r1, [r0, #16]
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    17e0:	bfd8      	it	le
    17e2:	f444 3400 	orrle.w	r4, r4, #131072	; 0x20000
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    17e6:	610c      	str	r4, [r1, #16]
	port->PINCFG = 0;
    17e8:	2400      	movs	r4, #0
    17ea:	60cc      	str	r4, [r1, #12]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    17ec:	7859      	ldrb	r1, [r3, #1]
    17ee:	4c4d      	ldr	r4, [pc, #308]	; (1924 <HardwareSerial::begin(unsigned long, unsigned short)+0x27c>)
    17f0:	f101 0310 	add.w	r3, r1, #16
    17f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    17f8:	6943      	ldr	r3, [r0, #20]
    17fa:	494b      	ldr	r1, [pc, #300]	; (1928 <HardwareSerial::begin(unsigned long, unsigned short)+0x280>)
    17fc:	785c      	ldrb	r4, [r3, #1]
    17fe:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1802:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    1804:	2401      	movs	r4, #1
    1806:	6945      	ldr	r5, [r0, #20]
    1808:	4b48      	ldr	r3, [pc, #288]	; (192c <HardwareSerial::begin(unsigned long, unsigned short)+0x284>)
    180a:	7869      	ldrb	r1, [r5, #1]
    180c:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    1810:	f001 011f 	and.w	r1, r1, #31
    1814:	009b      	lsls	r3, r3, #2
    1816:	fa04 f101 	lsl.w	r1, r4, r1
    181a:	6019      	str	r1, [r3, #0]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    181c:	6901      	ldr	r1, [r0, #16]
    181e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1820:	089b      	lsrs	r3, r3, #2
    1822:	f003 031c 	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    1826:	2b0f      	cmp	r3, #15
    1828:	d845      	bhi.n	18b6 <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
    182a:	40e3      	lsrs	r3, r4
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    182c:	f003 0402 	and.w	r4, r3, #2
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    1830:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1832:	009b      	lsls	r3, r3, #2
    1834:	f003 031c 	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    1838:	2b0f      	cmp	r3, #15
    183a:	d839      	bhi.n	18b0 <HardwareSerial::begin(unsigned long, unsigned short)+0x208>
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    183c:	03db      	lsls	r3, r3, #15
    183e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    1842:	4323      	orrs	r3, r4
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    1844:	f002 0403 	and.w	r4, r2, #3
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    1848:	62cb      	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    184a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    184c:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    1850:	628b      	str	r3, [r1, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    1852:	0753      	lsls	r3, r2, #29
    1854:	d429      	bmi.n	18aa <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    1856:	f444 1370 	orr.w	r3, r4, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    185a:	f002 040f 	and.w	r4, r2, #15
    185e:	2c04      	cmp	r4, #4
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1860:	7e84      	ldrb	r4, [r0, #26]
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    1862:	bf08      	it	eq
    1864:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    1868:	0697      	lsls	r7, r2, #26
    186a:	bf48      	it	mi
    186c:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    1870:	b10c      	cbz	r4, 1876 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ce>
    1872:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    1876:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    1878:	618b      	str	r3, [r1, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    187a:	d503      	bpl.n	1884 <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    187c:	690b      	ldr	r3, [r1, #16]
    187e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1882:	610b      	str	r3, [r1, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1884:	694b      	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    1886:	06d4      	lsls	r4, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    1888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    188c:	bf48      	it	mi
    188e:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    1892:	614b      	str	r3, [r1, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    1894:	05d3      	lsls	r3, r2, #23
    1896:	d503      	bpl.n	18a0 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f8>
    1898:	690b      	ldr	r3, [r1, #16]
    189a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    189e:	610b      	str	r3, [r1, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    18a0:	68eb      	ldr	r3, [r5, #12]
    18a2:	781b      	ldrb	r3, [r3, #0]
    18a4:	b1cb      	cbz	r3, 18da <HardwareSerial::begin(unsigned long, unsigned short)+0x232>
};
    18a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    18aa:	4b21      	ldr	r3, [pc, #132]	; (1930 <HardwareSerial::begin(unsigned long, unsigned short)+0x288>)
    18ac:	4323      	orrs	r3, r4
    18ae:	e7d4      	b.n	185a <HardwareSerial::begin(unsigned long, unsigned short)+0x1b2>
    18b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    18b4:	e7c5      	b.n	1842 <HardwareSerial::begin(unsigned long, unsigned short)+0x19a>
    18b6:	2403      	movs	r4, #3
    18b8:	e7ba      	b.n	1830 <HardwareSerial::begin(unsigned long, unsigned short)+0x188>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    18ba:	7e41      	ldrb	r1, [r0, #25]
    18bc:	f24f 07d9 	movw	r7, #61657	; 0xf0d9
    18c0:	4d1c      	ldr	r5, [pc, #112]	; (1934 <HardwareSerial::begin(unsigned long, unsigned short)+0x28c>)
    18c2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    18c6:	f891 6038 	ldrb.w	r6, [r1, #56]	; 0x38
    18ca:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    18ce:	68ae      	ldr	r6, [r5, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    18d0:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    18d2:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    18d4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    18d6:	6029      	str	r1, [r5, #0]
    18d8:	e76f      	b.n	17ba <HardwareSerial::begin(unsigned long, unsigned short)+0x112>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    18da:	4e17      	ldr	r6, [pc, #92]	; (1938 <HardwareSerial::begin(unsigned long, unsigned short)+0x290>)
    18dc:	7834      	ldrb	r4, [r6, #0]
    18de:	b1bc      	cbz	r4, 1910 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>
    18e0:	1e61      	subs	r1, r4, #1
    18e2:	4d16      	ldr	r5, [pc, #88]	; (193c <HardwareSerial::begin(unsigned long, unsigned short)+0x294>)
    18e4:	b2c9      	uxtb	r1, r1
    18e6:	1f2b      	subs	r3, r5, #4
    18e8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    18ec:	f853 2f04 	ldr.w	r2, [r3, #4]!
    18f0:	4290      	cmp	r0, r2
    18f2:	d0d8      	beq.n	18a6 <HardwareSerial::begin(unsigned long, unsigned short)+0x1fe>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    18f4:	4299      	cmp	r1, r3
    18f6:	d1f9      	bne.n	18ec <HardwareSerial::begin(unsigned long, unsigned short)+0x244>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    18f8:	1c63      	adds	r3, r4, #1
    18fa:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    18fc:	4a10      	ldr	r2, [pc, #64]	; (1940 <HardwareSerial::begin(unsigned long, unsigned short)+0x298>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    18fe:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1900:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    1902:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    1906:	f043 0302 	orr.w	r3, r3, #2
    190a:	7013      	strb	r3, [r2, #0]
};
    190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1910:	2301      	movs	r3, #1
    1912:	4d0a      	ldr	r5, [pc, #40]	; (193c <HardwareSerial::begin(unsigned long, unsigned short)+0x294>)
    1914:	e7f2      	b.n	18fc <HardwareSerial::begin(unsigned long, unsigned short)+0x254>
    1916:	bf00      	nop
    1918:	4bb71b00 	.word	0x4bb71b00
    191c:	60ad78ec 	.word	0x60ad78ec
    1920:	0001f038 	.word	0x0001f038
    1924:	20001400 	.word	0x20001400
    1928:	e000e400 	.word	0xe000e400
    192c:	38003840 	.word	0x38003840
    1930:	003c0010 	.word	0x003c0010
    1934:	200004e4 	.word	0x200004e4
    1938:	200027f9 	.word	0x200027f9
    193c:	200020ac 	.word	0x200020ac
    1940:	200010de 	.word	0x200010de

00001944 <HardwareSerial::write9bit(unsigned long)>:
{
    1944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1946:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    1948:	4604      	mov	r4, r0
    194a:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    194c:	b113      	cbz	r3, 1954 <HardwareSerial::write9bit(unsigned long)+0x10>
    194e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    1950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    1954:	7ea3      	ldrb	r3, [r4, #26]
    1956:	b133      	cbz	r3, 1966 <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    1958:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    195a:	6922      	ldr	r2, [r4, #16]
    195c:	6993      	ldr	r3, [r2, #24]
    195e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1962:	6193      	str	r3, [r2, #24]
		__enable_irq();
    1964:	b662      	cpsie	i
	head = tx_buffer_head_;
    1966:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    196a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    196c:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    196e:	3501      	adds	r5, #1
    1970:	42ab      	cmp	r3, r5
    1972:	d94b      	bls.n	1a0c <HardwareSerial::write9bit(unsigned long)+0xc8>
	tx_buffer_head_ = head;
    1974:	b2af      	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    1976:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    197a:	b29b      	uxth	r3, r3
    197c:	429d      	cmp	r5, r3
    197e:	d01a      	beq.n	19b6 <HardwareSerial::write9bit(unsigned long)+0x72>
    1980:	e029      	b.n	19d6 <HardwareSerial::write9bit(unsigned long)+0x92>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    1982:	6921      	ldr	r1, [r4, #16]
    1984:	694b      	ldr	r3, [r1, #20]
    1986:	021b      	lsls	r3, r3, #8
    1988:	d510      	bpl.n	19ac <HardwareSerial::write9bit(unsigned long)+0x68>
				uint32_t tail = tx_buffer_tail_;
    198a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    198e:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    1990:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1992:	3301      	adds	r3, #1
    1994:	429a      	cmp	r2, r3
    1996:	d936      	bls.n	1a06 <HardwareSerial::write9bit(unsigned long)+0xc2>
				tx_buffer_tail_ = tail;
    1998:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    199a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    199c:	4298      	cmp	r0, r3
    199e:	d92d      	bls.n	19fc <HardwareSerial::write9bit(unsigned long)+0xb8>
					n = tx_buffer_[tail];
    19a0:	69e0      	ldr	r0, [r4, #28]
    19a2:	5cc3      	ldrb	r3, [r0, r3]
    19a4:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    19a6:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    19a8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    19ac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    19b0:	b29b      	uxth	r3, r3
    19b2:	42ab      	cmp	r3, r5
    19b4:	d10f      	bne.n	19d6 <HardwareSerial::write9bit(unsigned long)+0x92>
		int priority = nvic_execution_priority();
    19b6:	f7ff fe57 	bl	1668 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    19ba:	6963      	ldr	r3, [r4, #20]
    19bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    19c0:	4283      	cmp	r3, r0
    19c2:	dade      	bge.n	1982 <HardwareSerial::write9bit(unsigned long)+0x3e>
		} else if (priority >= 256) 
    19c4:	28ff      	cmp	r0, #255	; 0xff
    19c6:	ddf1      	ble.n	19ac <HardwareSerial::write9bit(unsigned long)+0x68>
			yield(); // wait
    19c8:	f001 f8fc 	bl	2bc4 <yield>
	while (tx_buffer_tail_ == head) {
    19cc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    19d0:	b29b      	uxth	r3, r3
    19d2:	42ab      	cmp	r3, r5
    19d4:	d0ef      	beq.n	19b6 <HardwareSerial::write9bit(unsigned long)+0x72>
	if (head < tx_buffer_size_) {
    19d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    19d8:	42ab      	cmp	r3, r5
    19da:	d91a      	bls.n	1a12 <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    19dc:	69e3      	ldr	r3, [r4, #28]
    19de:	b2f6      	uxtb	r6, r6
    19e0:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    19e2:	b672      	cpsid	i
	transmitting_ = 1;
    19e4:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    19e6:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    19e8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    19ec:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    19f0:	6993      	ldr	r3, [r2, #24]
    19f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    19f6:	6193      	str	r3, [r2, #24]
	__enable_irq();
    19f8:	b662      	cpsie	i
}
    19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    19fc:	1a1b      	subs	r3, r3, r0
    19fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1a00:	5cc3      	ldrb	r3, [r0, r3]
    1a02:	b2db      	uxtb	r3, r3
    1a04:	e7cf      	b.n	19a6 <HardwareSerial::write9bit(unsigned long)+0x62>
    1a06:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    1a08:	4613      	mov	r3, r2
    1a0a:	e7c6      	b.n	199a <HardwareSerial::write9bit(unsigned long)+0x56>
    1a0c:	2700      	movs	r7, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    1a0e:	463d      	mov	r5, r7
    1a10:	e7b1      	b.n	1976 <HardwareSerial::write9bit(unsigned long)+0x32>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    1a12:	1aed      	subs	r5, r5, r3
    1a14:	b2f6      	uxtb	r6, r6
    1a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a18:	555e      	strb	r6, [r3, r5]
    1a1a:	e7e2      	b.n	19e2 <HardwareSerial::write9bit(unsigned long)+0x9e>

00001a1c <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    1a1c:	f7ff bf92 	b.w	1944 <HardwareSerial::write9bit(unsigned long)>

00001a20 <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1a20:	6902      	ldr	r2, [r0, #16]
    1a22:	6953      	ldr	r3, [r2, #20]
    1a24:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    1a28:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    1a2a:	4615      	mov	r5, r2
    1a2c:	d047      	beq.n	1abe <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1a2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    1a30:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    1a34:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    1a38:	d03e      	beq.n	1ab8 <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    1a3a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    1a3e:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    1a42:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    1a44:	b2ad      	uxth	r5, r5
    1a46:	e008      	b.n	1a5a <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    1a48:	6a02      	ldr	r2, [r0, #32]
    1a4a:	f802 c003 	strb.w	ip, [r2, r3]
    1a4e:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    1a50:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    1a54:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1a58:	d01e      	beq.n	1a98 <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1a5a:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    1a5c:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    1a5e:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1a62:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    1a64:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    1a68:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    1a6c:	429e      	cmp	r6, r3
    1a6e:	bf98      	it	ls
    1a70:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    1a72:	459c      	cmp	ip, r3
    1a74:	d0ec      	beq.n	1a50 <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    1a76:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1a78:	fa5f fc81 	uxtb.w	ip, r1
    1a7c:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    1a7e:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1a80:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    1a84:	d8e0      	bhi.n	1a48 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    1a86:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1a88:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    1a8c:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    1a90:	6902      	ldr	r2, [r0, #16]
    1a92:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    1a96:	d1e0      	bne.n	1a5a <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    1a98:	b2a3      	uxth	r3, r4
    1a9a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    1a9e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d05a      	beq.n	1b5a <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    1aa4:	42ac      	cmp	r4, r5
    1aa6:	d35d      	bcc.n	1b64 <HardwareSerial::IRQHandler()+0x144>
    1aa8:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    1aaa:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1aac:	42a1      	cmp	r1, r4
    1aae:	d854      	bhi.n	1b5a <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1ab0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    1ab2:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    1ab4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    1ab8:	6953      	ldr	r3, [r2, #20]
    1aba:	02dc      	lsls	r4, r3, #11
    1abc:	d448      	bmi.n	1b50 <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    1abe:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    1ac0:	0231      	lsls	r1, r6, #8
    1ac2:	d529      	bpl.n	1b18 <HardwareSerial::IRQHandler()+0xf8>
    1ac4:	6953      	ldr	r3, [r2, #20]
    1ac6:	021b      	lsls	r3, r3, #8
    1ac8:	d526      	bpl.n	1b18 <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    1aca:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    1ace:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    1ad2:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    1ad6:	b29b      	uxth	r3, r3
    1ad8:	e006      	b.n	1ae8 <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    1ada:	69c1      	ldr	r1, [r0, #28]
    1adc:	5cc9      	ldrb	r1, [r1, r3]
    1ade:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1ae0:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1ae2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1ae4:	054c      	lsls	r4, r1, #21
    1ae6:	d412      	bmi.n	1b0e <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    1ae8:	4563      	cmp	r3, ip
    1aea:	d03f      	beq.n	1b6c <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    1aec:	6b44      	ldr	r4, [r0, #52]	; 0x34
    1aee:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    1af0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    1af2:	429c      	cmp	r4, r3
    1af4:	bf98      	it	ls
    1af6:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    1af8:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1afa:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    1afe:	d8ec      	bhi.n	1ada <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    1b00:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1b02:	5d09      	ldrb	r1, [r1, r4]
    1b04:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    1b06:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    1b08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1b0a:	054c      	lsls	r4, r1, #21
    1b0c:	d5ec      	bpl.n	1ae8 <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    1b0e:	b299      	uxth	r1, r3
		if (head == tail) {
    1b10:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    1b12:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    1b16:	d02c      	beq.n	1b72 <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    1b18:	0271      	lsls	r1, r6, #9
    1b1a:	d518      	bpl.n	1b4e <HardwareSerial::IRQHandler()+0x12e>
    1b1c:	6953      	ldr	r3, [r2, #20]
    1b1e:	025b      	lsls	r3, r3, #9
    1b20:	d515      	bpl.n	1b4e <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    1b22:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1b24:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    1b26:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    1b2a:	b113      	cbz	r3, 1b32 <HardwareSerial::IRQHandler()+0x112>
    1b2c:	6d42      	ldr	r2, [r0, #84]	; 0x54
    1b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    1b32:	7e83      	ldrb	r3, [r0, #26]
    1b34:	b13b      	cbz	r3, 1b46 <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    1b36:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    1b38:	6902      	ldr	r2, [r0, #16]
    1b3a:	6993      	ldr	r3, [r2, #24]
    1b3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    1b40:	6193      	str	r3, [r2, #24]
			__enable_irq();
    1b42:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    1b44:	6905      	ldr	r5, [r0, #16]
    1b46:	69ab      	ldr	r3, [r5, #24]
    1b48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1b4c:	61ab      	str	r3, [r5, #24]
}
    1b4e:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    1b50:	6953      	ldr	r3, [r2, #20]
    1b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1b56:	6153      	str	r3, [r2, #20]
    1b58:	e7b1      	b.n	1abe <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    1b5a:	6953      	ldr	r3, [r2, #20]
    1b5c:	4615      	mov	r5, r2
    1b5e:	02dc      	lsls	r4, r3, #11
    1b60:	d5ad      	bpl.n	1abe <HardwareSerial::IRQHandler()+0x9e>
    1b62:	e7f5      	b.n	1b50 <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    1b64:	6b81      	ldr	r1, [r0, #56]	; 0x38
    1b66:	1b49      	subs	r1, r1, r5
    1b68:	440c      	add	r4, r1
    1b6a:	e79e      	b.n	1aaa <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    1b72:	6993      	ldr	r3, [r2, #24]
    1b74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    1b78:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    1b7a:	6993      	ldr	r3, [r2, #24]
    1b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1b80:	6193      	str	r3, [r2, #24]
    1b82:	e7c9      	b.n	1b18 <HardwareSerial::IRQHandler()+0xf8>

00001b84 <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    1b84:	4801      	ldr	r0, [pc, #4]	; (1b8c <IRQHandler_Serial6+0x8>)
    1b86:	f7ff bf4b 	b.w	1a20 <HardwareSerial::IRQHandler()>
    1b8a:	bf00      	nop
    1b8c:	20001c24 	.word	0x20001c24

00001b90 <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    1b90:	b410      	push	{r4}
    1b92:	4b17      	ldr	r3, [pc, #92]	; (1bf0 <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    1b94:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1b98:	2200      	movs	r2, #0
    1b9a:	2028      	movs	r0, #40	; 0x28
    1b9c:	609c      	str	r4, [r3, #8]
    1b9e:	2140      	movs	r1, #64	; 0x40
    1ba0:	4c14      	ldr	r4, [pc, #80]	; (1bf4 <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    1ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1ba6:	601c      	str	r4, [r3, #0]
    1ba8:	4c13      	ldr	r4, [pc, #76]	; (1bf8 <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    1baa:	711a      	strb	r2, [r3, #4]
    1bac:	611c      	str	r4, [r3, #16]
    1bae:	4c13      	ldr	r4, [pc, #76]	; (1bfc <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
    1bb0:	731a      	strb	r2, [r3, #12]
    1bb2:	615c      	str	r4, [r3, #20]
    1bb4:	4c12      	ldr	r4, [pc, #72]	; (1c00 <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
    1bb6:	831a      	strh	r2, [r3, #24]
    1bb8:	769a      	strb	r2, [r3, #26]
    1bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    1bbe:	61dc      	str	r4, [r3, #28]
    1bc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    1bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1bcc:	625a      	str	r2, [r3, #36]	; 0x24
    1bce:	641a      	str	r2, [r3, #64]	; 0x40
    1bd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    1bd4:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    1bd8:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    1bdc:	4809      	ldr	r0, [pc, #36]	; (1c04 <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
    1bde:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    1be2:	6218      	str	r0, [r3, #32]
    1be4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1be8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop
    1bf0:	20001c24 	.word	0x20001c24
    1bf4:	20000380 	.word	0x20000380
    1bf8:	40184000 	.word	0x40184000
    1bfc:	20000dd4 	.word	0x20000dd4
    1c00:	20002024 	.word	0x20002024
    1c04:	20001e84 	.word	0x20001e84

00001c08 <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    1c08:	4770      	bx	lr
    1c0a:	bf00      	nop

00001c0c <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    1c0c:	4770      	bx	lr
    1c0e:	bf00      	nop

00001c10 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    1c10:	4801      	ldr	r0, [pc, #4]	; (1c18 <IRQHandler_Serial4+0x8>)
    1c12:	f7ff bf05 	b.w	1a20 <HardwareSerial::IRQHandler()>
    1c16:	bf00      	nop
    1c18:	20001b64 	.word	0x20001b64

00001c1c <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    1c1c:	b410      	push	{r4}
    1c1e:	4b17      	ldr	r3, [pc, #92]	; (1c7c <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    1c20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1c24:	2200      	movs	r2, #0
    1c26:	2028      	movs	r0, #40	; 0x28
    1c28:	609c      	str	r4, [r3, #8]
    1c2a:	2140      	movs	r1, #64	; 0x40
    1c2c:	4c14      	ldr	r4, [pc, #80]	; (1c80 <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    1c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1c32:	601c      	str	r4, [r3, #0]
    1c34:	4c13      	ldr	r4, [pc, #76]	; (1c84 <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    1c36:	711a      	strb	r2, [r3, #4]
    1c38:	611c      	str	r4, [r3, #16]
    1c3a:	4c13      	ldr	r4, [pc, #76]	; (1c88 <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
    1c3c:	731a      	strb	r2, [r3, #12]
    1c3e:	615c      	str	r4, [r3, #20]
    1c40:	4c12      	ldr	r4, [pc, #72]	; (1c8c <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
    1c42:	831a      	strh	r2, [r3, #24]
    1c44:	769a      	strb	r2, [r3, #26]
    1c46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    1c4a:	61dc      	str	r4, [r3, #28]
    1c4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    1c50:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1c58:	625a      	str	r2, [r3, #36]	; 0x24
    1c5a:	641a      	str	r2, [r3, #64]	; 0x40
    1c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    1c60:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    1c64:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    1c68:	4809      	ldr	r0, [pc, #36]	; (1c90 <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
    1c6a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    1c6e:	6218      	str	r0, [r3, #32]
    1c70:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1c74:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1c78:	4770      	bx	lr
    1c7a:	bf00      	nop
    1c7c:	20001b64 	.word	0x20001b64
    1c80:	20000380 	.word	0x20000380
    1c84:	4018c000 	.word	0x4018c000
    1c88:	20000e9c 	.word	0x20000e9c
    1c8c:	20001fd4 	.word	0x20001fd4
    1c90:	20001e04 	.word	0x20001e04

00001c94 <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    1c94:	4801      	ldr	r0, [pc, #4]	; (1c9c <IRQHandler_Serial5+0x8>)
    1c96:	f7ff bec3 	b.w	1a20 <HardwareSerial::IRQHandler()>
    1c9a:	bf00      	nop
    1c9c:	20001bc4 	.word	0x20001bc4

00001ca0 <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    1ca0:	b410      	push	{r4}
    1ca2:	4b17      	ldr	r3, [pc, #92]	; (1d00 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    1ca4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1ca8:	2200      	movs	r2, #0
    1caa:	2028      	movs	r0, #40	; 0x28
    1cac:	609c      	str	r4, [r3, #8]
    1cae:	2140      	movs	r1, #64	; 0x40
    1cb0:	4c14      	ldr	r4, [pc, #80]	; (1d04 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    1cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1cb6:	601c      	str	r4, [r3, #0]
    1cb8:	4c13      	ldr	r4, [pc, #76]	; (1d08 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    1cba:	711a      	strb	r2, [r3, #4]
    1cbc:	611c      	str	r4, [r3, #16]
    1cbe:	4c13      	ldr	r4, [pc, #76]	; (1d0c <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    1cc0:	731a      	strb	r2, [r3, #12]
    1cc2:	615c      	str	r4, [r3, #20]
    1cc4:	4c12      	ldr	r4, [pc, #72]	; (1d10 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    1cc6:	831a      	strh	r2, [r3, #24]
    1cc8:	769a      	strb	r2, [r3, #26]
    1cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    1cce:	61dc      	str	r4, [r3, #28]
    1cd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    1cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1cdc:	625a      	str	r2, [r3, #36]	; 0x24
    1cde:	641a      	str	r2, [r3, #64]	; 0x40
    1ce0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    1ce4:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    1ce8:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    1cec:	4809      	ldr	r0, [pc, #36]	; (1d14 <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
    1cee:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    1cf2:	6218      	str	r0, [r3, #32]
    1cf4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1cf8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1cfc:	4770      	bx	lr
    1cfe:	bf00      	nop
    1d00:	20001bc4 	.word	0x20001bc4
    1d04:	20000380 	.word	0x20000380
    1d08:	401a0000 	.word	0x401a0000
    1d0c:	2000102c 	.word	0x2000102c
    1d10:	20001ffc 	.word	0x20001ffc
    1d14:	20001e44 	.word	0x20001e44

00001d18 <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    1d18:	4770      	bx	lr
    1d1a:	bf00      	nop

00001d1c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    1d1c:	4770      	bx	lr
    1d1e:	bf00      	nop

00001d20 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    1d20:	4801      	ldr	r0, [pc, #4]	; (1d28 <IRQHandler_Serial1+0x8>)
    1d22:	f7ff be7d 	b.w	1a20 <HardwareSerial::IRQHandler()>
    1d26:	bf00      	nop
    1d28:	20001a44 	.word	0x20001a44

00001d2c <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    1d2c:	b410      	push	{r4}
    1d2e:	4b16      	ldr	r3, [pc, #88]	; (1d88 <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
    1d30:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1d34:	4815      	ldr	r0, [pc, #84]	; (1d8c <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    1d36:	2200      	movs	r2, #0
    1d38:	609c      	str	r4, [r3, #8]
    1d3a:	2140      	movs	r1, #64	; 0x40
    1d3c:	4c14      	ldr	r4, [pc, #80]	; (1d90 <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
    1d3e:	6018      	str	r0, [r3, #0]
    1d40:	4814      	ldr	r0, [pc, #80]	; (1d94 <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    1d42:	611c      	str	r4, [r3, #16]
    1d44:	6158      	str	r0, [r3, #20]
    1d46:	4c14      	ldr	r4, [pc, #80]	; (1d98 <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    1d48:	4814      	ldr	r0, [pc, #80]	; (1d9c <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
    1d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1d4e:	711a      	strb	r2, [r3, #4]
    1d50:	731a      	strb	r2, [r3, #12]
    1d52:	831a      	strh	r2, [r3, #24]
    1d54:	769a      	strb	r2, [r3, #26]
    1d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    1d5a:	61dc      	str	r4, [r3, #28]
    1d5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    1d60:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    1d68:	625a      	str	r2, [r3, #36]	; 0x24
    1d6a:	629a      	str	r2, [r3, #40]	; 0x28
    1d6c:	6218      	str	r0, [r3, #32]
    1d6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    1d72:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
    1d76:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    1d7a:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    1d7e:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    1d82:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    1d86:	4770      	bx	lr
    1d88:	20001a44 	.word	0x20001a44
    1d8c:	20000380 	.word	0x20000380
    1d90:	40198000 	.word	0x40198000
    1d94:	20000300 	.word	0x20000300
    1d98:	20001f44 	.word	0x20001f44
    1d9c:	20001d44 	.word	0x20001d44

00001da0 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    1da0:	4770      	bx	lr
    1da2:	bf00      	nop

00001da4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1da6:	4c14      	ldr	r4, [pc, #80]	; (1df8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1da8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1dac:	4e13      	ldr	r6, [pc, #76]	; (1dfc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1db2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1db6:	4f12      	ldr	r7, [pc, #72]	; (1e00 <rx_queue_transfer+0x5c>)
    1db8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    1dbc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1dbe:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1dc2:	4621      	mov	r1, r4
    1dc4:	883a      	ldrh	r2, [r7, #0]
    1dc6:	4630      	mov	r0, r6
    1dc8:	f7ff f8fc 	bl	fc4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    1dcc:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    1dce:	4423      	add	r3, r4
	asm("dsb");
    1dd0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    1dd4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    1dd8:	3420      	adds	r4, #32
	} while (location < end_addr);
    1dda:	42a3      	cmp	r3, r4
    1ddc:	d8fa      	bhi.n	1dd4 <rx_queue_transfer+0x30>
	asm("dsb");
    1dde:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1de2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC2_RX_ENDPOINT, rx_transfer + i);
    1de6:	2005      	movs	r0, #5
    1de8:	4631      	mov	r1, r6
    1dea:	f7ff f917 	bl	101c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1df2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    1df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1df8:	20200000 	.word	0x20200000
    1dfc:	20001720 	.word	0x20001720
    1e00:	200027ec 	.word	0x200027ec

00001e04 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1e04:	4b24      	ldr	r3, [pc, #144]	; (1e98 <rx_event+0x94>)
    1e06:	6842      	ldr	r2, [r0, #4]
{
    1e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1e0c:	f3c2 420e 	ubfx	r2, r2, #16, #15
    1e10:	881c      	ldrh	r4, [r3, #0]
	int i = t->callback_param;
    1e12:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1e14:	1aa4      	subs	r4, r4, r2
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    1e16:	2c00      	cmp	r4, #0
    1e18:	dd24      	ble.n	1e64 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    1e1a:	4920      	ldr	r1, [pc, #128]	; (1e9c <rx_event+0x98>)
		if (head != rx_tail) {
    1e1c:	4820      	ldr	r0, [pc, #128]	; (1ea0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    1e1e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    1e20:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    1e22:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    1e24:	4e1f      	ldr	r6, [pc, #124]	; (1ea4 <rx_event+0xa0>)
		if (head != rx_tail) {
    1e26:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    1e28:	481f      	ldr	r0, [pc, #124]	; (1ea8 <rx_event+0xa4>)
		if (head != rx_tail) {
    1e2a:	d007      	beq.n	1e3c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    1e2c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1e30:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1e34:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1e38:	4294      	cmp	r4, r2
    1e3a:	d918      	bls.n	1e6e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1e3c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    1e3e:	2200      	movs	r2, #0
		rx_count[i] = len;
    1e40:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    1e44:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    1e46:	4e19      	ldr	r6, [pc, #100]	; (1eac <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1e48:	bf88      	it	hi
    1e4a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    1e4c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    1e50:	bf98      	it	ls
    1e52:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    1e54:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    1e56:	4b16      	ldr	r3, [pc, #88]	; (1eb0 <rx_event+0xac>)
		rx_head = head;
    1e58:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1e5a:	681a      	ldr	r2, [r3, #0]
    1e5c:	4414      	add	r4, r2
    1e5e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    1e64:	4628      	mov	r0, r5
}
    1e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    1e6a:	f7ff bf9b 	b.w	1da4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1e6e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1e72:	4910      	ldr	r1, [pc, #64]	; (1eb4 <rx_event+0xb0>)
    1e74:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    1e76:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1e78:	4408      	add	r0, r1
    1e7a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    1e7e:	f001 fc45 	bl	370c <memcpy>
				rx_available += len;
    1e82:	4a0b      	ldr	r2, [pc, #44]	; (1eb0 <rx_event+0xac>)
				rx_queue_transfer(i);
    1e84:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    1e86:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1e8a:	6813      	ldr	r3, [r2, #0]
    1e8c:	4423      	add	r3, r4
}
    1e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    1e92:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    1e94:	f7ff bf86 	b.w	1da4 <rx_queue_transfer>
    1e98:	200027ec 	.word	0x200027ec
    1e9c:	200027fd 	.word	0x200027fd
    1ea0:	200027ff 	.word	0x200027ff
    1ea4:	20002654 	.word	0x20002654
    1ea8:	20002694 	.word	0x20002694
    1eac:	20002674 	.word	0x20002674
    1eb0:	2000264c 	.word	0x2000264c
    1eb4:	20200000 	.word	0x20200000

00001eb8 <usb_serial2_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial2_flush_callback(void)
{
	if (tx_noautoflush) return;
    1eb8:	4b1d      	ldr	r3, [pc, #116]	; (1f30 <usb_serial2_flush_callback+0x78>)
    1eba:	781a      	ldrb	r2, [r3, #0]
    1ebc:	2a00      	cmp	r2, #0
    1ebe:	d136      	bne.n	1f2e <usb_serial2_flush_callback+0x76>
	if (!usb_configuration) return;
    1ec0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1ec4:	4a1b      	ldr	r2, [pc, #108]	; (1f34 <usb_serial2_flush_callback+0x7c>)
    1ec6:	7812      	ldrb	r2, [r2, #0]
    1ec8:	b38a      	cbz	r2, 1f2e <usb_serial2_flush_callback+0x76>
{
    1eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    1ece:	4d1a      	ldr	r5, [pc, #104]	; (1f38 <usb_serial2_flush_callback+0x80>)
    1ed0:	882a      	ldrh	r2, [r5, #0]
    1ed2:	b352      	cbz	r2, 1f2a <usb_serial2_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1ed4:	4e19      	ldr	r6, [pc, #100]	; (1f3c <usb_serial2_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1ed6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1eda:	4919      	ldr	r1, [pc, #100]	; (1f40 <usb_serial2_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    1edc:	7834      	ldrb	r4, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1ede:	4642      	mov	r2, r8
	transfer_t *xfer = tx_transfer + tx_head;
    1ee0:	4f18      	ldr	r7, [pc, #96]	; (1f44 <usb_serial2_flush_callback+0x8c>)
    1ee2:	eb07 1744 	add.w	r7, r7, r4, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1ee6:	eb01 24c4 	add.w	r4, r1, r4, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1eea:	4638      	mov	r0, r7
    1eec:	4621      	mov	r1, r4
    1eee:	f7ff f869 	bl	fc4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1ef2:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    1ef6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1efa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1efe:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1f02:	3420      	adds	r4, #32
	} while (location < end_addr);
    1f04:	42a2      	cmp	r2, r4
    1f06:	d8fa      	bhi.n	1efe <usb_serial2_flush_callback+0x46>
	asm("dsb");
    1f08:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1f0c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC2_TX_ENDPOINT, xfer);
    1f10:	2005      	movs	r0, #5
    1f12:	4639      	mov	r1, r7
    1f14:	f7ff f86e 	bl	ff4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1f18:	7833      	ldrb	r3, [r6, #0]
    1f1a:	3301      	adds	r3, #1
    1f1c:	b2db      	uxtb	r3, r3
    1f1e:	2b03      	cmp	r3, #3
    1f20:	bf88      	it	hi
    1f22:	2300      	movhi	r3, #0
    1f24:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1f26:	2300      	movs	r3, #0
    1f28:	802b      	strh	r3, [r5, #0]
}
    1f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f2e:	4770      	bx	lr
    1f30:	20002805 	.word	0x20002805
    1f34:	20002809 	.word	0x20002809
    1f38:	200027f0 	.word	0x200027f0
    1f3c:	20002803 	.word	0x20002803
    1f40:	20201000 	.word	0x20201000
    1f44:	20001920 	.word	0x20001920

00001f48 <usb_serial2_configure>:
	if (usb_high_speed) {
    1f48:	4b2c      	ldr	r3, [pc, #176]	; (1ffc <usb_serial2_configure+0xb4>)
{
    1f4a:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d04e      	beq.n	1ff0 <usb_serial2_configure+0xa8>
		tx_packet_size = CDC_TX_SIZE_480;
    1f52:	f44f 7300 	mov.w	r3, #512	; 0x200
    1f56:	4d2a      	ldr	r5, [pc, #168]	; (2000 <usb_serial2_configure+0xb8>)
		rx_packet_size = CDC_RX_SIZE_480;
    1f58:	4e2a      	ldr	r6, [pc, #168]	; (2004 <usb_serial2_configure+0xbc>)
		tx_packet_size = CDC_TX_SIZE_480;
    1f5a:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1f5c:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1f5e:	2280      	movs	r2, #128	; 0x80
    1f60:	2100      	movs	r1, #0
    1f62:	4829      	ldr	r0, [pc, #164]	; (2008 <usb_serial2_configure+0xc0>)
	tx_head = 0;
    1f64:	2400      	movs	r4, #0
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1f66:	f001 fc6b 	bl	3840 <memset>
	tx_head = 0;
    1f6a:	4a28      	ldr	r2, [pc, #160]	; (200c <usb_serial2_configure+0xc4>)
	tx_available = 0;
    1f6c:	4b28      	ldr	r3, [pc, #160]	; (2010 <usb_serial2_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f6e:	4621      	mov	r1, r4
	tx_head = 0;
    1f70:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f72:	f44f 7280 	mov.w	r2, #256	; 0x100
    1f76:	4827      	ldr	r0, [pc, #156]	; (2014 <usb_serial2_configure+0xcc>)
	tx_available = 0;
    1f78:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1f7a:	f001 fc61 	bl	3840 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1f7e:	4a26      	ldr	r2, [pc, #152]	; (2018 <usb_serial2_configure+0xd0>)
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f80:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1f82:	4b26      	ldr	r3, [pc, #152]	; (201c <usb_serial2_configure+0xd4>)
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1f84:	2004      	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    1f86:	e9c2 4400 	strd	r4, r4, [r2]
    1f8a:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1f8e:	4a24      	ldr	r2, [pc, #144]	; (2020 <usb_serial2_configure+0xd8>)
	memset(rx_index, 0, sizeof(rx_index));
    1f90:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1f94:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1f96:	4a23      	ldr	r2, [pc, #140]	; (2024 <usb_serial2_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1f98:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1f9c:	4b22      	ldr	r3, [pc, #136]	; (2028 <usb_serial2_configure+0xe0>)
    1f9e:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1fa0:	4623      	mov	r3, r4
	rx_available = 0;
    1fa2:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC2_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1fa4:	4622      	mov	r2, r4
    1fa6:	f7fe ffd9 	bl	f5c <usb_config_tx>
	usb_config_rx(CDC2_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1faa:	4622      	mov	r2, r4
    1fac:	8831      	ldrh	r1, [r6, #0]
    1fae:	2005      	movs	r0, #5
    1fb0:	4b1e      	ldr	r3, [pc, #120]	; (202c <usb_serial2_configure+0xe4>)
    1fb2:	f7fe ffa9 	bl	f08 <usb_config_rx>
	usb_config_tx(CDC2_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1fb6:	4623      	mov	r3, r4
    1fb8:	2201      	movs	r2, #1
    1fba:	8829      	ldrh	r1, [r5, #0]
    1fbc:	2005      	movs	r0, #5
    1fbe:	f7fe ffcd 	bl	f5c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1fc2:	4620      	mov	r0, r4
    1fc4:	3401      	adds	r4, #1
    1fc6:	f7ff feed 	bl	1da4 <rx_queue_transfer>
    1fca:	2c08      	cmp	r4, #8
    1fcc:	d1f9      	bne.n	1fc2 <usb_serial2_configure+0x7a>
	USB1_GPTIMER1CTRL = 0;
    1fce:	4b18      	ldr	r3, [pc, #96]	; (2030 <usb_serial2_configure+0xe8>)
	USB1_GPTIMER1LD = microseconds - 1;
    1fd0:	224a      	movs	r2, #74	; 0x4a
	usb_timer1_callback = callback;
    1fd2:	4818      	ldr	r0, [pc, #96]	; (2034 <usb_serial2_configure+0xec>)
	USB1_GPTIMER1CTRL = 0;
    1fd4:	2100      	movs	r1, #0
	usb_timer1_callback = callback;
    1fd6:	4c18      	ldr	r4, [pc, #96]	; (2038 <usb_serial2_configure+0xf0>)
    1fd8:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER1CTRL = 0;
    1fda:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
	USB1_GPTIMER1LD = microseconds - 1;
    1fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	USB1_USBINTR |= USB_USBINTR_TIE1;
    1fe2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1fe6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    1fea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    1fee:	bd70      	pop	{r4, r5, r6, pc}
		tx_packet_size = CDC_TX_SIZE_12;
    1ff0:	2340      	movs	r3, #64	; 0x40
    1ff2:	4d03      	ldr	r5, [pc, #12]	; (2000 <usb_serial2_configure+0xb8>)
		rx_packet_size = CDC_RX_SIZE_12;
    1ff4:	4e03      	ldr	r6, [pc, #12]	; (2004 <usb_serial2_configure+0xbc>)
		tx_packet_size = CDC_TX_SIZE_12;
    1ff6:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1ff8:	8033      	strh	r3, [r6, #0]
    1ffa:	e7b0      	b.n	1f5e <usb_serial2_configure+0x16>
    1ffc:	2000280a 	.word	0x2000280a
    2000:	200027f4 	.word	0x200027f4
    2004:	200027ec 	.word	0x200027ec
    2008:	20001920 	.word	0x20001920
    200c:	20002803 	.word	0x20002803
    2010:	200027f0 	.word	0x200027f0
    2014:	20001720 	.word	0x20001720
    2018:	20002654 	.word	0x20002654
    201c:	20002674 	.word	0x20002674
    2020:	200027fd 	.word	0x200027fd
    2024:	2000264c 	.word	0x2000264c
    2028:	200027ff 	.word	0x200027ff
    202c:	00001e05 	.word	0x00001e05
    2030:	402e0000 	.word	0x402e0000
    2034:	200027e8 	.word	0x200027e8
    2038:	00001eb9 	.word	0x00001eb9

0000203c <usb_serial2_available>:
	uint32_t n = rx_available;
    203c:	4b04      	ldr	r3, [pc, #16]	; (2050 <usb_serial2_available+0x14>)
{
    203e:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2040:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    2042:	b10c      	cbz	r4, 2048 <usb_serial2_available+0xc>
}
    2044:	4620      	mov	r0, r4
    2046:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2048:	f000 fdbc 	bl	2bc4 <yield>
}
    204c:	4620      	mov	r0, r4
    204e:	bd10      	pop	{r4, pc}
    2050:	2000264c 	.word	0x2000264c

00002054 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    2054:	4801      	ldr	r0, [pc, #4]	; (205c <IRQHandler_Serial2+0x8>)
    2056:	f7ff bce3 	b.w	1a20 <HardwareSerial::IRQHandler()>
    205a:	bf00      	nop
    205c:	20001aa4 	.word	0x20001aa4

00002060 <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    2060:	b410      	push	{r4}
    2062:	4b17      	ldr	r3, [pc, #92]	; (20c0 <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    2064:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2068:	2200      	movs	r2, #0
    206a:	2028      	movs	r0, #40	; 0x28
    206c:	609c      	str	r4, [r3, #8]
    206e:	2140      	movs	r1, #64	; 0x40
    2070:	4c14      	ldr	r4, [pc, #80]	; (20c4 <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    2072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2076:	601c      	str	r4, [r3, #0]
    2078:	4c13      	ldr	r4, [pc, #76]	; (20c8 <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    207a:	711a      	strb	r2, [r3, #4]
    207c:	611c      	str	r4, [r3, #16]
    207e:	4c13      	ldr	r4, [pc, #76]	; (20cc <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
    2080:	731a      	strb	r2, [r3, #12]
    2082:	615c      	str	r4, [r3, #20]
    2084:	4c12      	ldr	r4, [pc, #72]	; (20d0 <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
    2086:	831a      	strh	r2, [r3, #24]
    2088:	769a      	strb	r2, [r3, #26]
    208a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    208e:	61dc      	str	r4, [r3, #28]
    2090:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2094:	f85d 4b04 	ldr.w	r4, [sp], #4
    2098:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    209c:	625a      	str	r2, [r3, #36]	; 0x24
    209e:	641a      	str	r2, [r3, #64]	; 0x40
    20a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    20a4:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    20a8:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    20ac:	4809      	ldr	r0, [pc, #36]	; (20d4 <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
    20ae:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    20b2:	6218      	str	r0, [r3, #32]
    20b4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    20b8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    20bc:	4770      	bx	lr
    20be:	bf00      	nop
    20c0:	20001aa4 	.word	0x20001aa4
    20c4:	20000380 	.word	0x20000380
    20c8:	40190000 	.word	0x40190000
    20cc:	20000f00 	.word	0x20000f00
    20d0:	20001f84 	.word	0x20001f84
    20d4:	20001d84 	.word	0x20001d84

000020d8 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    20d8:	4770      	bx	lr
    20da:	bf00      	nop

000020dc <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    20dc:	4770      	bx	lr
    20de:	bf00      	nop

000020e0 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    20e0:	4801      	ldr	r0, [pc, #4]	; (20e8 <IRQHandler_Serial3+0x8>)
    20e2:	f7ff bc9d 	b.w	1a20 <HardwareSerial::IRQHandler()>
    20e6:	bf00      	nop
    20e8:	20001b04 	.word	0x20001b04

000020ec <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    20ec:	b410      	push	{r4}
    20ee:	4b17      	ldr	r3, [pc, #92]	; (214c <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    20f0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    20f4:	2200      	movs	r2, #0
    20f6:	2028      	movs	r0, #40	; 0x28
    20f8:	609c      	str	r4, [r3, #8]
    20fa:	2140      	movs	r1, #64	; 0x40
    20fc:	4c14      	ldr	r4, [pc, #80]	; (2150 <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    20fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2102:	601c      	str	r4, [r3, #0]
    2104:	4c13      	ldr	r4, [pc, #76]	; (2154 <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    2106:	711a      	strb	r2, [r3, #4]
    2108:	611c      	str	r4, [r3, #16]
    210a:	4c13      	ldr	r4, [pc, #76]	; (2158 <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
    210c:	731a      	strb	r2, [r3, #12]
    210e:	615c      	str	r4, [r3, #20]
    2110:	4c12      	ldr	r4, [pc, #72]	; (215c <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
    2112:	831a      	strh	r2, [r3, #24]
    2114:	769a      	strb	r2, [r3, #26]
    2116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    211a:	61dc      	str	r4, [r3, #28]
    211c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2120:	f85d 4b04 	ldr.w	r4, [sp], #4
    2124:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2128:	625a      	str	r2, [r3, #36]	; 0x24
    212a:	641a      	str	r2, [r3, #64]	; 0x40
    212c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    2130:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
    2134:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
    2138:	4809      	ldr	r0, [pc, #36]	; (2160 <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
    213a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    213e:	6218      	str	r0, [r3, #32]
    2140:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2144:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2148:	4770      	bx	lr
    214a:	bf00      	nop
    214c:	20001b04 	.word	0x20001b04
    2150:	20000380 	.word	0x20000380
    2154:	40188000 	.word	0x40188000
    2158:	20000e38 	.word	0x20000e38
    215c:	20001fac 	.word	0x20001fac
    2160:	20001dc4 	.word	0x20001dc4

00002164 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    2164:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    2166:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    216a:	b15b      	cbz	r3, 2184 <sm_align_pool+0x20>
    216c:	b1ba      	cbz	r2, 219e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    216e:	4b0f      	ldr	r3, [pc, #60]	; (21ac <sm_align_pool+0x48>)
    2170:	fba3 1302 	umull	r1, r3, r3, r2
    2174:	08db      	lsrs	r3, r3, #3
    2176:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    217a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    217e:	d10a      	bne.n	2196 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    2180:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    2182:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    2184:	4b09      	ldr	r3, [pc, #36]	; (21ac <sm_align_pool+0x48>)
    2186:	fba3 1302 	umull	r1, r3, r3, r2
    218a:	08db      	lsrs	r3, r3, #3
    218c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    2190:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    2194:	d001      	beq.n	219a <sm_align_pool+0x36>
    2196:	1ad2      	subs	r2, r2, r3
    2198:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    219a:	2af0      	cmp	r2, #240	; 0xf0
    219c:	d8f0      	bhi.n	2180 <sm_align_pool+0x1c>
		errno = ENOSPC;
    219e:	f001 fa83 	bl	36a8 <__errno>
    21a2:	221c      	movs	r2, #28
    21a4:	4603      	mov	r3, r0
    21a6:	2000      	movs	r0, #0
    21a8:	601a      	str	r2, [r3, #0]
}
    21aa:	bd08      	pop	{r3, pc}
    21ac:	aaaaaaab 	.word	0xaaaaaaab

000021b0 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    21b0:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    21b2:	4604      	mov	r4, r0
    21b4:	b338      	cbz	r0, 2206 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    21b6:	b119      	cbz	r1, 21c0 <sm_set_pool+0x10>
    21b8:	fab2 f682 	clz	r6, r2
    21bc:	0976      	lsrs	r6, r6, #5
    21be:	b9a2      	cbnz	r2, 21ea <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    21c0:	6820      	ldr	r0, [r4, #0]
    21c2:	b300      	cbz	r0, 2206 <sm_set_pool+0x56>
    21c4:	6862      	ldr	r2, [r4, #4]
    21c6:	b1f2      	cbz	r2, 2206 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    21c8:	4b18      	ldr	r3, [pc, #96]	; (222c <sm_set_pool+0x7c>)
    21ca:	4919      	ldr	r1, [pc, #100]	; (2230 <sm_set_pool+0x80>)
    21cc:	fb02 f303 	mul.w	r3, r2, r3
    21d0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    21d4:	d317      	bcc.n	2206 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    21d6:	68a3      	ldr	r3, [r4, #8]
    21d8:	b9e3      	cbnz	r3, 2214 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    21da:	2200      	movs	r2, #0
			return 1;
    21dc:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    21de:	6022      	str	r2, [r4, #0]
    21e0:	6062      	str	r2, [r4, #4]
    21e2:	60a2      	str	r2, [r4, #8]
    21e4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    21e6:	4618      	mov	r0, r3
    21e8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    21ea:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    21ec:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    21ee:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    21f2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    21f4:	f7ff ffb6 	bl	2164 <sm_align_pool>
    21f8:	4603      	mov	r3, r0
    21fa:	2800      	cmp	r0, #0
    21fc:	d0f3      	beq.n	21e6 <sm_set_pool+0x36>
	if (do_zero) {
    21fe:	b96d      	cbnz	r5, 221c <sm_set_pool+0x6c>
	return 1;
    2200:	2301      	movs	r3, #1
}
    2202:	4618      	mov	r0, r3
    2204:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    2206:	f001 fa4f 	bl	36a8 <__errno>
    220a:	2216      	movs	r2, #22
		return 0;
    220c:	2300      	movs	r3, #0
		errno = EINVAL;
    220e:	6002      	str	r2, [r0, #0]
}
    2210:	4618      	mov	r0, r3
    2212:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    2214:	2100      	movs	r1, #0
    2216:	f001 fb13 	bl	3840 <memset>
    221a:	e7de      	b.n	21da <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    221c:	6862      	ldr	r2, [r4, #4]
    221e:	4631      	mov	r1, r6
    2220:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    2222:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    2224:	f001 fb0c 	bl	3840 <memset>
	return 1;
    2228:	2301      	movs	r3, #1
    222a:	e7dc      	b.n	21e6 <sm_set_pool+0x36>
    222c:	aaaaaaab 	.word	0xaaaaaaab
    2230:	15555555 	.word	0x15555555

00002234 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    2234:	6801      	ldr	r1, [r0, #0]
    2236:	b301      	cbz	r1, 227a <IntervalTimer::end()+0x46>
		int index = channel - IMXRT_PIT_CHANNELS;
    2238:	4b10      	ldr	r3, [pc, #64]	; (227c <IntervalTimer::end()+0x48>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    223a:	4a11      	ldr	r2, [pc, #68]	; (2280 <IntervalTimer::end()+0x4c>)
		int index = channel - IMXRT_PIT_CHANNELS;
    223c:	440b      	add	r3, r1
void IntervalTimer::end() {
    223e:	b430      	push	{r4, r5}
		funct_table[index] = nullptr;
    2240:	2400      	movs	r4, #0
		int index = channel - IMXRT_PIT_CHANNELS;
    2242:	111b      	asrs	r3, r3, #4
		funct_table[index] = nullptr;
    2244:	4d0f      	ldr	r5, [pc, #60]	; (2284 <IntervalTimer::end()+0x50>)
		channel->TCTRL = 0;
    2246:	608c      	str	r4, [r1, #8]
		nvic_priorites[index] = 255;
    2248:	21ff      	movs	r1, #255	; 0xff
		funct_table[index] = nullptr;
    224a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		nvic_priorites[index] = 255;
    224e:	54d1      	strb	r1, [r2, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2250:	f892 c000 	ldrb.w	ip, [r2]
    2254:	7853      	ldrb	r3, [r2, #1]
    2256:	7891      	ldrb	r1, [r2, #2]
    2258:	459c      	cmp	ip, r3
    225a:	bf28      	it	cs
    225c:	469c      	movcs	ip, r3
    225e:	78d3      	ldrb	r3, [r2, #3]
    2260:	460a      	mov	r2, r1
    2262:	4561      	cmp	r1, ip
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    2264:	4908      	ldr	r1, [pc, #32]	; (2288 <IntervalTimer::end()+0x54>)
    2266:	bf28      	it	cs
    2268:	4662      	movcs	r2, ip
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    226a:	4293      	cmp	r3, r2
    226c:	bf28      	it	cs
    226e:	4613      	movcs	r3, r2
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    2270:	f881 307a 	strb.w	r3, [r1, #122]	; 0x7a
		channel = 0;
    2274:	6004      	str	r4, [r0, #0]
	}
#endif
}
    2276:	bc30      	pop	{r4, r5}
    2278:	4770      	bx	lr
    227a:	4770      	bx	lr
    227c:	bff7bf00 	.word	0xbff7bf00
    2280:	20001090 	.word	0x20001090
    2284:	200016c0 	.word	0x200016c0
    2288:	e000e400 	.word	0xe000e400

0000228c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    228c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    228e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2290:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    2294:	4619      	mov	r1, r3
{
    2296:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2298:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    229c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    22a0:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22a4:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    22a8:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    22ac:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    22ae:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    22b2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    22b6:	b29b      	uxth	r3, r3
    22b8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    22bc:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22c0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    22c4:	3101      	adds	r1, #1
    22c6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    22ca:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22cc:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22ce:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    22d2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    22d4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    22d6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    22d8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    22da:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    22de:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    22e0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    22e2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    22e4:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    22e6:	d1eb      	bne.n	22c0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22e8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    22ec:	b29b      	uxth	r3, r3
    22ee:	f043 030f 	orr.w	r3, r3, #15
    22f2:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    22f6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    22fa:	b29b      	uxth	r3, r3
    22fc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2300:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    2304:	bd10      	pop	{r4, pc}
    2306:	bf00      	nop

00002308 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2308:	4b37      	ldr	r3, [pc, #220]	; (23e8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    230a:	4a38      	ldr	r2, [pc, #224]	; (23ec <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    230c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    230e:	4838      	ldr	r0, [pc, #224]	; (23f0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2310:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    2314:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2316:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2318:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    231c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2320:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2324:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2328:	430a      	orrs	r2, r1
    232a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    232e:	f7ff ffad 	bl	228c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    2332:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2336:	f7ff ffa9 	bl	228c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    233a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    233e:	f7ff ffa5 	bl	228c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    2342:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2346:	f7ff ffa1 	bl	228c <flexpwm_init>
	for (i=0; i < 4; i++) {
    234a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    234c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2350:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    2354:	4611      	mov	r1, r2
    2356:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    235a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    235e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2360:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2362:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2364:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2366:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    236a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    236c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    236e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2372:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2374:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    2376:	d1ee      	bne.n	2356 <pwm_init+0x4e>
    2378:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    237a:	481e      	ldr	r0, [pc, #120]	; (23f4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    237c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2380:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    2384:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2386:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    238a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    238e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2392:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2396:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2398:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    239a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    239c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    239e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    23a2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    23a4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    23a6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    23aa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    23ac:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    23ae:	d1ee      	bne.n	238e <pwm_init+0x86>
    23b0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    23b2:	4811      	ldr	r0, [pc, #68]	; (23f8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    23b4:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    23b6:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    23ba:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    23bc:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    23c0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    23c4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    23c8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    23cc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    23ce:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    23d0:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    23d2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    23d4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    23d6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    23d8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    23da:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    23de:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    23e0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    23e4:	d1ee      	bne.n	23c4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    23e6:	bd70      	pop	{r4, r5, r6, pc}
    23e8:	400fc000 	.word	0x400fc000
    23ec:	fc030000 	.word	0xfc030000
    23f0:	403dc000 	.word	0x403dc000
    23f4:	401e0000 	.word	0x401e0000
    23f8:	401e4000 	.word	0x401e4000

000023fc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    23fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    23fe:	4c14      	ldr	r4, [pc, #80]	; (2450 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2400:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2404:	4e13      	ldr	r6, [pc, #76]	; (2454 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    240a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    240e:	4f12      	ldr	r7, [pc, #72]	; (2458 <rx_queue_transfer+0x5c>)
    2410:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    2414:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2416:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    241a:	4621      	mov	r1, r4
    241c:	883a      	ldrh	r2, [r7, #0]
    241e:	4630      	mov	r0, r6
    2420:	f7fe fdd0 	bl	fc4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    2424:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    2426:	4423      	add	r3, r4
	asm("dsb");
    2428:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    242c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2430:	3420      	adds	r4, #32
	} while (location < end_addr);
    2432:	42a3      	cmp	r3, r4
    2434:	d8fa      	bhi.n	242c <rx_queue_transfer+0x30>
	asm("dsb");
    2436:	f3bf 8f4f 	dsb	sy
	asm("isb");
    243a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    243e:	2003      	movs	r0, #3
    2440:	4631      	mov	r1, r6
    2442:	f7fe fdeb 	bl	101c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    244a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2450:	20203000 	.word	0x20203000
    2454:	20001820 	.word	0x20001820
    2458:	200027ee 	.word	0x200027ee

0000245c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    245c:	4b24      	ldr	r3, [pc, #144]	; (24f0 <rx_event+0x94>)
    245e:	6842      	ldr	r2, [r0, #4]
{
    2460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2464:	f3c2 420e 	ubfx	r2, r2, #16, #15
    2468:	881c      	ldrh	r4, [r3, #0]
	int i = t->callback_param;
    246a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    246c:	1aa4      	subs	r4, r4, r2
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    246e:	2c00      	cmp	r4, #0
    2470:	dd24      	ble.n	24bc <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    2472:	4920      	ldr	r1, [pc, #128]	; (24f4 <rx_event+0x98>)
		if (head != rx_tail) {
    2474:	4820      	ldr	r0, [pc, #128]	; (24f8 <rx_event+0x9c>)
		uint32_t head = rx_head;
    2476:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    2478:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    247a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    247c:	4e1f      	ldr	r6, [pc, #124]	; (24fc <rx_event+0xa0>)
		if (head != rx_tail) {
    247e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    2480:	481f      	ldr	r0, [pc, #124]	; (2500 <rx_event+0xa4>)
		if (head != rx_tail) {
    2482:	d007      	beq.n	2494 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    2484:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2488:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    248c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    2490:	4294      	cmp	r4, r2
    2492:	d918      	bls.n	24c6 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2494:	3301      	adds	r3, #1
		rx_index[i] = 0;
    2496:	2200      	movs	r2, #0
		rx_count[i] = len;
    2498:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    249c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    249e:	4e19      	ldr	r6, [pc, #100]	; (2504 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    24a0:	bf88      	it	hi
    24a2:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    24a4:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    24a8:	bf98      	it	ls
    24aa:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    24ac:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    24ae:	4b16      	ldr	r3, [pc, #88]	; (2508 <rx_event+0xac>)
		rx_head = head;
    24b0:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    24b2:	681a      	ldr	r2, [r3, #0]
    24b4:	4414      	add	r4, r2
    24b6:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    24b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    24bc:	4628      	mov	r0, r5
}
    24be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    24c2:	f7ff bf9b 	b.w	23fc <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    24c6:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    24ca:	4910      	ldr	r1, [pc, #64]	; (250c <rx_event+0xb0>)
    24cc:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    24ce:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    24d0:	4408      	add	r0, r1
    24d2:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    24d6:	f001 f919 	bl	370c <memcpy>
				rx_available += len;
    24da:	4a0b      	ldr	r2, [pc, #44]	; (2508 <rx_event+0xac>)
				rx_queue_transfer(i);
    24dc:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    24de:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    24e2:	6813      	ldr	r3, [r2, #0]
    24e4:	4423      	add	r3, r4
}
    24e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    24ea:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    24ec:	f7ff bf86 	b.w	23fc <rx_queue_transfer>
    24f0:	200027ee 	.word	0x200027ee
    24f4:	200027fe 	.word	0x200027fe
    24f8:	20002800 	.word	0x20002800
    24fc:	20002664 	.word	0x20002664
    2500:	200026a0 	.word	0x200026a0
    2504:	20002684 	.word	0x20002684
    2508:	20002650 	.word	0x20002650
    250c:	20203000 	.word	0x20203000

00002510 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2510:	4b1d      	ldr	r3, [pc, #116]	; (2588 <usb_serial_flush_callback+0x78>)
    2512:	781a      	ldrb	r2, [r3, #0]
    2514:	2a00      	cmp	r2, #0
    2516:	d136      	bne.n	2586 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    2518:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    251c:	4a1b      	ldr	r2, [pc, #108]	; (258c <usb_serial_flush_callback+0x7c>)
    251e:	7812      	ldrb	r2, [r2, #0]
    2520:	b38a      	cbz	r2, 2586 <usb_serial_flush_callback+0x76>
{
    2522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    2526:	4d1a      	ldr	r5, [pc, #104]	; (2590 <usb_serial_flush_callback+0x80>)
    2528:	882a      	ldrh	r2, [r5, #0]
    252a:	b352      	cbz	r2, 2582 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    252c:	4e19      	ldr	r6, [pc, #100]	; (2594 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    252e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2532:	4919      	ldr	r1, [pc, #100]	; (2598 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    2534:	7834      	ldrb	r4, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2536:	4642      	mov	r2, r8
	transfer_t *xfer = tx_transfer + tx_head;
    2538:	4f18      	ldr	r7, [pc, #96]	; (259c <usb_serial_flush_callback+0x8c>)
    253a:	eb07 1744 	add.w	r7, r7, r4, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    253e:	eb01 24c4 	add.w	r4, r1, r4, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2542:	4638      	mov	r0, r7
    2544:	4621      	mov	r1, r4
    2546:	f7fe fd3d 	bl	fc4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    254a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    254e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2552:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2556:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    255a:	3420      	adds	r4, #32
	} while (location < end_addr);
    255c:	42a2      	cmp	r2, r4
    255e:	d8fa      	bhi.n	2556 <usb_serial_flush_callback+0x46>
	asm("dsb");
    2560:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2564:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2568:	2003      	movs	r0, #3
    256a:	4639      	mov	r1, r7
    256c:	f7fe fd42 	bl	ff4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2570:	7833      	ldrb	r3, [r6, #0]
    2572:	3301      	adds	r3, #1
    2574:	b2db      	uxtb	r3, r3
    2576:	2b03      	cmp	r3, #3
    2578:	bf88      	it	hi
    257a:	2300      	movhi	r3, #0
    257c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    257e:	2300      	movs	r3, #0
    2580:	802b      	strh	r3, [r5, #0]
}
    2582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2586:	4770      	bx	lr
    2588:	20002806 	.word	0x20002806
    258c:	20002809 	.word	0x20002809
    2590:	200027f2 	.word	0x200027f2
    2594:	20002804 	.word	0x20002804
    2598:	20204000 	.word	0x20204000
    259c:	200019a0 	.word	0x200019a0

000025a0 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    25a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25a4:	b085      	sub	sp, #20
	while (size > 0) {
    25a6:	e9cd 1001 	strd	r1, r0, [sp, #4]
    25aa:	2900      	cmp	r1, #0
    25ac:	f000 80bf 	beq.w	272e <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    25b0:	2300      	movs	r3, #0
    25b2:	4c60      	ldr	r4, [pc, #384]	; (2734 <usb_serial_write.part.0+0x194>)
    25b4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2750 <usb_serial_write.part.0+0x1b0>
    25b8:	f8df a198 	ldr.w	sl, [pc, #408]	; 2754 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    25bc:	4f5e      	ldr	r7, [pc, #376]	; (2738 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    25be:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    25c0:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    25c2:	4a5e      	ldr	r2, [pc, #376]	; (273c <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    25c4:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    25c6:	4b5e      	ldr	r3, [pc, #376]	; (2740 <usb_serial_write.part.0+0x1a0>)
    25c8:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    25ca:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    25ce:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    25d2:	2b00      	cmp	r3, #0
    25d4:	f040 80a7 	bne.w	2726 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    25d8:	461e      	mov	r6, r3
		int waiting=0;
    25da:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    25dc:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    25de:	4648      	mov	r0, r9
    25e0:	f7fe fd2a 	bl	1038 <usb_transfer_status>
			if (!(status & 0x80)) {
    25e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    25e8:	f000 808c 	beq.w	2704 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    25ec:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    25f0:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    25f4:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    25f8:	b905      	cbnz	r5, 25fc <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    25fa:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    25fc:	2b00      	cmp	r3, #0
    25fe:	d17d      	bne.n	26fc <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2600:	683b      	ldr	r3, [r7, #0]
    2602:	1b9b      	subs	r3, r3, r6
    2604:	2b78      	cmp	r3, #120	; 0x78
    2606:	f200 8087 	bhi.w	2718 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    260a:	4b4e      	ldr	r3, [pc, #312]	; (2744 <usb_serial_write.part.0+0x1a4>)
    260c:	781b      	ldrb	r3, [r3, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d074      	beq.n	26fc <usb_serial_write.part.0+0x15c>
			yield();
    2612:	f000 fad7 	bl	2bc4 <yield>
			tx_noautoflush = 1;
    2616:	2201      	movs	r2, #1
		while (!tx_available) {
    2618:	f8b8 3000 	ldrh.w	r3, [r8]
    261c:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    261e:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    2620:	2b00      	cmp	r3, #0
    2622:	d0dc      	beq.n	25de <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2624:	4a46      	ldr	r2, [pc, #280]	; (2740 <usb_serial_write.part.0+0x1a0>)
    2626:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    262a:	7811      	ldrb	r1, [r2, #0]
    262c:	461a      	mov	r2, r3
    262e:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    2632:	4d45      	ldr	r5, [pc, #276]	; (2748 <usb_serial_write.part.0+0x1a8>)
    2634:	02c9      	lsls	r1, r1, #11
    2636:	4428      	add	r0, r5
		if (size >= tx_available) {
    2638:	9d01      	ldr	r5, [sp, #4]
    263a:	4295      	cmp	r5, r2
    263c:	d217      	bcs.n	266e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    263e:	9303      	str	r3, [sp, #12]
    2640:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    2644:	462a      	mov	r2, r5
    2646:	f001 f861 	bl	370c <memcpy>
			tx_available -= size;
    264a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    264c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    2650:	1b5b      	subs	r3, r3, r5
    2652:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2656:	4b3d      	ldr	r3, [pc, #244]	; (274c <usb_serial_write.part.0+0x1ac>)
    2658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    265c:	f3bf 8f4f 	dsb	sy
			sent += size;
    2660:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    2662:	2300      	movs	r3, #0
			sent += size;
    2664:	4428      	add	r0, r5
		tx_noautoflush = 0;
    2666:	7023      	strb	r3, [r4, #0]
}
    2668:	b005      	add	sp, #20
    266a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    266e:	4b36      	ldr	r3, [pc, #216]	; (2748 <usb_serial_write.part.0+0x1a8>)
    2670:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    2672:	9902      	ldr	r1, [sp, #8]
    2674:	f001 f84a 	bl	370c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2678:	2300      	movs	r3, #0
    267a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    267e:	4629      	mov	r1, r5
    2680:	4648      	mov	r0, r9
    2682:	f7fe fc9f 	bl	fc4 <usb_prepare_transfer>
	asm("dsb");
    2686:	f3bf 8f4f 	dsb	sy
    268a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    268e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    2692:	4293      	cmp	r3, r2
    2694:	bf34      	ite	cc
    2696:	2301      	movcc	r3, #1
    2698:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    269a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    269e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    26a2:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    26a6:	3520      	adds	r5, #32
	} while (location < end_addr);
    26a8:	42ab      	cmp	r3, r5
    26aa:	d1fa      	bne.n	26a2 <usb_serial_write.part.0+0x102>
	asm("dsb");
    26ac:	f3bf 8f4f 	dsb	sy
	asm("isb");
    26b0:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    26b4:	2003      	movs	r0, #3
    26b6:	4649      	mov	r1, r9
    26b8:	f7fe fc9c 	bl	ff4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    26bc:	4a20      	ldr	r2, [pc, #128]	; (2740 <usb_serial_write.part.0+0x1a0>)
    26be:	7813      	ldrb	r3, [r2, #0]
    26c0:	3301      	adds	r3, #1
    26c2:	b2db      	uxtb	r3, r3
    26c4:	2b03      	cmp	r3, #3
    26c6:	bf84      	itt	hi
    26c8:	2300      	movhi	r3, #0
    26ca:	4a1d      	ldrhi	r2, [pc, #116]	; (2740 <usb_serial_write.part.0+0x1a0>)
    26cc:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    26ce:	f8b8 3000 	ldrh.w	r3, [r8]
    26d2:	9a01      	ldr	r2, [sp, #4]
    26d4:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    26d6:	9a00      	ldr	r2, [sp, #0]
    26d8:	441a      	add	r2, r3
			size -= tx_available;
    26da:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    26dc:	9200      	str	r2, [sp, #0]
			data += tx_available;
    26de:	9a02      	ldr	r2, [sp, #8]
    26e0:	441a      	add	r2, r3
			tx_available = 0;
    26e2:	2300      	movs	r3, #0
			data += tx_available;
    26e4:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    26e6:	4a19      	ldr	r2, [pc, #100]	; (274c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    26e8:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    26ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    26f0:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    26f4:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    26f6:	2900      	cmp	r1, #0
    26f8:	f47f af62 	bne.w	25c0 <usb_serial_write.part.0+0x20>
	return sent;
    26fc:	9800      	ldr	r0, [sp, #0]
}
    26fe:	b005      	add	sp, #20
    2700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    2704:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2708:	4b0d      	ldr	r3, [pc, #52]	; (2740 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    270a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    270e:	7819      	ldrb	r1, [r3, #0]
				break;
    2710:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    2712:	f8a8 2000 	strh.w	r2, [r8]
				break;
    2716:	e78a      	b.n	262e <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    2718:	2301      	movs	r3, #1
				return sent;
    271a:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    271c:	f88a 3000 	strb.w	r3, [sl]
}
    2720:	b005      	add	sp, #20
    2722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2726:	461a      	mov	r2, r3
    2728:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    272c:	e77f      	b.n	262e <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    272e:	9801      	ldr	r0, [sp, #4]
	return sent;
    2730:	e7e5      	b.n	26fe <usb_serial_write.part.0+0x15e>
    2732:	bf00      	nop
    2734:	20002806 	.word	0x20002806
    2738:	200027c4 	.word	0x200027c4
    273c:	200019a0 	.word	0x200019a0
    2740:	20002804 	.word	0x20002804
    2744:	20002809 	.word	0x20002809
    2748:	20204000 	.word	0x20204000
    274c:	402e0000 	.word	0x402e0000
    2750:	200027f2 	.word	0x200027f2
    2754:	20002802 	.word	0x20002802

00002758 <usb_serial_reset>:
}
    2758:	4770      	bx	lr
    275a:	bf00      	nop

0000275c <usb_serial_configure>:
	if (usb_high_speed) {
    275c:	4b2c      	ldr	r3, [pc, #176]	; (2810 <usb_serial_configure+0xb4>)
{
    275e:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d04e      	beq.n	2804 <usb_serial_configure+0xa8>
		tx_packet_size = CDC_TX_SIZE_480;
    2766:	f44f 7300 	mov.w	r3, #512	; 0x200
    276a:	4d2a      	ldr	r5, [pc, #168]	; (2814 <usb_serial_configure+0xb8>)
		rx_packet_size = CDC_RX_SIZE_480;
    276c:	4e2a      	ldr	r6, [pc, #168]	; (2818 <usb_serial_configure+0xbc>)
		tx_packet_size = CDC_TX_SIZE_480;
    276e:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2770:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2772:	2280      	movs	r2, #128	; 0x80
    2774:	2100      	movs	r1, #0
    2776:	4829      	ldr	r0, [pc, #164]	; (281c <usb_serial_configure+0xc0>)
	tx_head = 0;
    2778:	2400      	movs	r4, #0
	memset(tx_transfer, 0, sizeof(tx_transfer));
    277a:	f001 f861 	bl	3840 <memset>
	tx_head = 0;
    277e:	4a28      	ldr	r2, [pc, #160]	; (2820 <usb_serial_configure+0xc4>)
	tx_available = 0;
    2780:	4b28      	ldr	r3, [pc, #160]	; (2824 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2782:	4621      	mov	r1, r4
	tx_head = 0;
    2784:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2786:	f44f 7280 	mov.w	r2, #256	; 0x100
    278a:	4827      	ldr	r0, [pc, #156]	; (2828 <usb_serial_configure+0xcc>)
	tx_available = 0;
    278c:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    278e:	f001 f857 	bl	3840 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2792:	4a26      	ldr	r2, [pc, #152]	; (282c <usb_serial_configure+0xd0>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2794:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    2796:	4b26      	ldr	r3, [pc, #152]	; (2830 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2798:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    279a:	e9c2 4400 	strd	r4, r4, [r2]
    279e:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    27a2:	4a24      	ldr	r2, [pc, #144]	; (2834 <usb_serial_configure+0xd8>)
	memset(rx_index, 0, sizeof(rx_index));
    27a4:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    27a8:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    27aa:	4a23      	ldr	r2, [pc, #140]	; (2838 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    27ac:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    27b0:	4b22      	ldr	r3, [pc, #136]	; (283c <usb_serial_configure+0xe0>)
    27b2:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27b4:	4623      	mov	r3, r4
	rx_available = 0;
    27b6:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    27b8:	4622      	mov	r2, r4
    27ba:	f7fe fbcf 	bl	f5c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    27be:	4622      	mov	r2, r4
    27c0:	8831      	ldrh	r1, [r6, #0]
    27c2:	2003      	movs	r0, #3
    27c4:	4b1e      	ldr	r3, [pc, #120]	; (2840 <usb_serial_configure+0xe4>)
    27c6:	f7fe fb9f 	bl	f08 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    27ca:	4623      	mov	r3, r4
    27cc:	2201      	movs	r2, #1
    27ce:	8829      	ldrh	r1, [r5, #0]
    27d0:	2003      	movs	r0, #3
    27d2:	f7fe fbc3 	bl	f5c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    27d6:	4620      	mov	r0, r4
    27d8:	3401      	adds	r4, #1
    27da:	f7ff fe0f 	bl	23fc <rx_queue_transfer>
    27de:	2c08      	cmp	r4, #8
    27e0:	d1f9      	bne.n	27d6 <usb_serial_configure+0x7a>
	USB1_GPTIMER0CTRL = 0;
    27e2:	4b18      	ldr	r3, [pc, #96]	; (2844 <usb_serial_configure+0xe8>)
	USB1_GPTIMER0LD = microseconds - 1;
    27e4:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    27e6:	4818      	ldr	r0, [pc, #96]	; (2848 <usb_serial_configure+0xec>)
	USB1_GPTIMER0CTRL = 0;
    27e8:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    27ea:	4c18      	ldr	r4, [pc, #96]	; (284c <usb_serial_configure+0xf0>)
    27ec:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    27ee:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    27f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    27f6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    27fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    27fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    2802:	bd70      	pop	{r4, r5, r6, pc}
		tx_packet_size = CDC_TX_SIZE_12;
    2804:	2340      	movs	r3, #64	; 0x40
    2806:	4d03      	ldr	r5, [pc, #12]	; (2814 <usb_serial_configure+0xb8>)
		rx_packet_size = CDC_RX_SIZE_12;
    2808:	4e03      	ldr	r6, [pc, #12]	; (2818 <usb_serial_configure+0xbc>)
		tx_packet_size = CDC_TX_SIZE_12;
    280a:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    280c:	8033      	strh	r3, [r6, #0]
    280e:	e7b0      	b.n	2772 <usb_serial_configure+0x16>
    2810:	2000280a 	.word	0x2000280a
    2814:	200027f6 	.word	0x200027f6
    2818:	200027ee 	.word	0x200027ee
    281c:	200019a0 	.word	0x200019a0
    2820:	20002804 	.word	0x20002804
    2824:	200027f2 	.word	0x200027f2
    2828:	20001820 	.word	0x20001820
    282c:	20002664 	.word	0x20002664
    2830:	20002684 	.word	0x20002684
    2834:	200027fe 	.word	0x200027fe
    2838:	20002650 	.word	0x20002650
    283c:	20002800 	.word	0x20002800
    2840:	0000245d 	.word	0x0000245d
    2844:	402e0000 	.word	0x402e0000
    2848:	200027e4 	.word	0x200027e4
    284c:	00002511 	.word	0x00002511

00002850 <usb_serial_read>:
{
    2850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2854:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    285c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2928 <usb_serial_read+0xd8>
{
    2860:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2862:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    2866:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    2868:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    286c:	2900      	cmp	r1, #0
    286e:	d04f      	beq.n	2910 <usb_serial_read+0xc0>
    2870:	4680      	mov	r8, r0
    2872:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    2874:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    2876:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 292c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    287a:	4b26      	ldr	r3, [pc, #152]	; (2914 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    287c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2880:	4925      	ldr	r1, [pc, #148]	; (2918 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    2882:	781b      	ldrb	r3, [r3, #0]
    2884:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    2886:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    288a:	d03f      	beq.n	290c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    288c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    288e:	4b23      	ldr	r3, [pc, #140]	; (291c <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2890:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    2892:	bf28      	it	cs
    2894:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2896:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    2898:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    289c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    28a0:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    28a2:	4b1f      	ldr	r3, [pc, #124]	; (2920 <usb_serial_read+0xd0>)
    28a4:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    28a8:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    28ac:	42aa      	cmp	r2, r5
    28ae:	d21c      	bcs.n	28ea <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    28b0:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    28b4:	4918      	ldr	r1, [pc, #96]	; (2918 <usb_serial_read+0xc8>)
			rx_available -= len;
    28b6:	4c1b      	ldr	r4, [pc, #108]	; (2924 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    28b8:	4461      	add	r1, ip
    28ba:	9201      	str	r2, [sp, #4]
    28bc:	f000 ff26 	bl	370c <memcpy>
			rx_available -= len;
    28c0:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    28c2:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    28c6:	4658      	mov	r0, fp
			rx_index[i] += len;
    28c8:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    28ca:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    28ce:	442a      	add	r2, r5
			rx_available -= len;
    28d0:	440f      	add	r7, r1
			rx_index[i] += len;
    28d2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    28d6:	6027      	str	r7, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    28d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    28dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    28e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    28e4:	b003      	add	sp, #12
    28e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28ea:	462a      	mov	r2, r5
			count += avail;
    28ec:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    28ee:	f000 ff0d 	bl	370c <memcpy>
			rx_available -= avail;
    28f2:	490c      	ldr	r1, [pc, #48]	; (2924 <usb_serial_read+0xd4>)
			rx_tail = tail;
    28f4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    28f6:	4630      	mov	r0, r6
			rx_available -= avail;
    28f8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    28fa:	44a8      	add	r8, r5
			rx_available -= avail;
    28fc:	1b52      	subs	r2, r2, r5
    28fe:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    2900:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    2904:	f7ff fd7a 	bl	23fc <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    2908:	45bb      	cmp	fp, r7
    290a:	d8b6      	bhi.n	287a <usb_serial_read+0x2a>
	return count;
    290c:	4638      	mov	r0, r7
    290e:	e7e3      	b.n	28d8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    2910:	4608      	mov	r0, r1
    2912:	e7e1      	b.n	28d8 <usb_serial_read+0x88>
    2914:	200027fe 	.word	0x200027fe
    2918:	20203000 	.word	0x20203000
    291c:	200026a0 	.word	0x200026a0
    2920:	20002664 	.word	0x20002664
    2924:	20002650 	.word	0x20002650
    2928:	20002800 	.word	0x20002800
    292c:	20002684 	.word	0x20002684

00002930 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    2930:	4b0b      	ldr	r3, [pc, #44]	; (2960 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    2932:	4a0c      	ldr	r2, [pc, #48]	; (2964 <usb_serial_peekchar+0x34>)
    2934:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    2936:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    2938:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    293a:	428a      	cmp	r2, r1
    293c:	d00d      	beq.n	295a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    293e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2940:	4809      	ldr	r0, [pc, #36]	; (2968 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2942:	4a0a      	ldr	r2, [pc, #40]	; (296c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    2944:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2946:	490a      	ldr	r1, [pc, #40]	; (2970 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    2948:	bf28      	it	cs
    294a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    294c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    294e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    2952:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    2956:	5c58      	ldrb	r0, [r3, r1]
    2958:	4770      	bx	lr
	if (tail == rx_head) return -1;
    295a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    295e:	4770      	bx	lr
    2960:	200027fe 	.word	0x200027fe
    2964:	20002800 	.word	0x20002800
    2968:	200026a0 	.word	0x200026a0
    296c:	20203000 	.word	0x20203000
    2970:	20002684 	.word	0x20002684

00002974 <usb_serial_available>:
	uint32_t n = rx_available;
    2974:	4b04      	ldr	r3, [pc, #16]	; (2988 <usb_serial_available+0x14>)
{
    2976:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    2978:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    297a:	b10c      	cbz	r4, 2980 <usb_serial_available+0xc>
}
    297c:	4620      	mov	r0, r4
    297e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    2980:	f000 f920 	bl	2bc4 <yield>
}
    2984:	4620      	mov	r0, r4
    2986:	bd10      	pop	{r4, pc}
    2988:	20002650 	.word	0x20002650

0000298c <usb_serial_flush_input>:
{
    298c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2990:	4e14      	ldr	r6, [pc, #80]	; (29e4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    2992:	4d15      	ldr	r5, [pc, #84]	; (29e8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    2994:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    2996:	782a      	ldrb	r2, [r5, #0]
    2998:	4293      	cmp	r3, r2
    299a:	d021      	beq.n	29e0 <usb_serial_flush_input+0x54>
    299c:	b2dc      	uxtb	r4, r3
    299e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 29f0 <usb_serial_flush_input+0x64>
    29a2:	f8df b050 	ldr.w	fp, [pc, #80]	; 29f4 <usb_serial_flush_input+0x68>
    29a6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 29f8 <usb_serial_flush_input+0x6c>
    29aa:	4f10      	ldr	r7, [pc, #64]	; (29ec <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    29ac:	3401      	adds	r4, #1
    29ae:	2c08      	cmp	r4, #8
		rx_tail = tail;
    29b0:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    29b4:	d901      	bls.n	29ba <usb_serial_flush_input+0x2e>
    29b6:	2400      	movs	r4, #0
    29b8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    29ba:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    29be:	f8db 3000 	ldr.w	r3, [fp]
    29c2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    29c6:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    29ca:	1a52      	subs	r2, r2, r1
    29cc:	1a9b      	subs	r3, r3, r2
    29ce:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    29d2:	f7ff fd13 	bl	23fc <rx_queue_transfer>
		rx_tail = tail;
    29d6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    29da:	782b      	ldrb	r3, [r5, #0]
    29dc:	42a3      	cmp	r3, r4
    29de:	d1e5      	bne.n	29ac <usb_serial_flush_input+0x20>
}
    29e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29e4:	20002800 	.word	0x20002800
    29e8:	200027fe 	.word	0x200027fe
    29ec:	20002684 	.word	0x20002684
    29f0:	200026a0 	.word	0x200026a0
    29f4:	20002650 	.word	0x20002650
    29f8:	20002664 	.word	0x20002664

000029fc <usb_serial_getchar>:
{
    29fc:	b500      	push	{lr}
    29fe:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    2a00:	2101      	movs	r1, #1
    2a02:	f10d 0007 	add.w	r0, sp, #7
    2a06:	f7ff ff23 	bl	2850 <usb_serial_read>
    2a0a:	b120      	cbz	r0, 2a16 <usb_serial_getchar+0x1a>
    2a0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    2a10:	b003      	add	sp, #12
    2a12:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    2a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a1a:	e7f9      	b.n	2a10 <usb_serial_getchar+0x14>

00002a1c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    2a1c:	4b09      	ldr	r3, [pc, #36]	; (2a44 <usb_serial_putchar+0x28>)
{
    2a1e:	b500      	push	{lr}
    2a20:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    2a22:	781b      	ldrb	r3, [r3, #0]
{
    2a24:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    2a28:	b13b      	cbz	r3, 2a3a <usb_serial_putchar+0x1e>
    2a2a:	2101      	movs	r1, #1
    2a2c:	f10d 0007 	add.w	r0, sp, #7
    2a30:	f7ff fdb6 	bl	25a0 <usb_serial_write.part.0>
}
    2a34:	b003      	add	sp, #12
    2a36:	f85d fb04 	ldr.w	pc, [sp], #4
    2a3a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2a3e:	b003      	add	sp, #12
    2a40:	f85d fb04 	ldr.w	pc, [sp], #4
    2a44:	20002809 	.word	0x20002809

00002a48 <usb_serial_write>:
	if (!usb_configuration) return 0;
    2a48:	4b04      	ldr	r3, [pc, #16]	; (2a5c <usb_serial_write+0x14>)
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2a50:	b10b      	cbz	r3, 2a56 <usb_serial_write+0xe>
    2a52:	f7ff bda5 	b.w	25a0 <usb_serial_write.part.0>
}
    2a56:	4610      	mov	r0, r2
    2a58:	4770      	bx	lr
    2a5a:	bf00      	nop
    2a5c:	20002809 	.word	0x20002809

00002a60 <usb_serial_write_buffer_free>:
{
    2a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a64:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    2a66:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2aac <usb_serial_write_buffer_free+0x4c>
    2a6a:	2301      	movs	r3, #1
    2a6c:	4d0d      	ldr	r5, [pc, #52]	; (2aa4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    2a6e:	4627      	mov	r7, r4
    2a70:	4e0d      	ldr	r6, [pc, #52]	; (2aa8 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    2a72:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    2a76:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2a78:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a7a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    2a7c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a7e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2a82:	d005      	beq.n	2a90 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2a84:	f7fe fad8 	bl	1038 <usb_transfer_status>
    2a88:	0603      	lsls	r3, r0, #24
    2a8a:	bf58      	it	pl
    2a8c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a90:	2c04      	cmp	r4, #4
    2a92:	d1f0      	bne.n	2a76 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    2a94:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2a98:	2300      	movs	r3, #0
}
    2a9a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    2a9c:	f888 3000 	strb.w	r3, [r8]
}
    2aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aa4:	200019a0 	.word	0x200019a0
    2aa8:	20002804 	.word	0x20002804
    2aac:	20002806 	.word	0x20002806

00002ab0 <usb_serial_flush_output>:
{
    2ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2ab4:	4b1d      	ldr	r3, [pc, #116]	; (2b2c <usb_serial_flush_output+0x7c>)
    2ab6:	781b      	ldrb	r3, [r3, #0]
    2ab8:	b113      	cbz	r3, 2ac0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2aba:	4d1d      	ldr	r5, [pc, #116]	; (2b30 <usb_serial_flush_output+0x80>)
    2abc:	882a      	ldrh	r2, [r5, #0]
    2abe:	b90a      	cbnz	r2, 2ac4 <usb_serial_flush_output+0x14>
}
    2ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2ac4:	4e1b      	ldr	r6, [pc, #108]	; (2b34 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    2ac6:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    2aca:	491b      	ldr	r1, [pc, #108]	; (2b38 <usb_serial_flush_output+0x88>)
    2acc:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ace:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2ad0:	4c1a      	ldr	r4, [pc, #104]	; (2b3c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2ad2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    2ad6:	4f1a      	ldr	r7, [pc, #104]	; (2b40 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2ad8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2adc:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ade:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2ae0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ae2:	4621      	mov	r1, r4
    2ae4:	2300      	movs	r3, #0
    2ae6:	f7fe fa6d 	bl	fc4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2aea:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    2aee:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2af2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2af6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    2afa:	3420      	adds	r4, #32
	} while (location < end_addr);
    2afc:	42a2      	cmp	r2, r4
    2afe:	d8fa      	bhi.n	2af6 <usb_serial_flush_output+0x46>
	asm("dsb");
    2b00:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2b04:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2b08:	2003      	movs	r0, #3
    2b0a:	4641      	mov	r1, r8
    2b0c:	f7fe fa72 	bl	ff4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2b10:	7833      	ldrb	r3, [r6, #0]
    2b12:	3301      	adds	r3, #1
    2b14:	b2db      	uxtb	r3, r3
    2b16:	2b03      	cmp	r3, #3
    2b18:	bf88      	it	hi
    2b1a:	2300      	movhi	r3, #0
    2b1c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2b1e:	2300      	movs	r3, #0
    2b20:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2b22:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    2b26:	703b      	strb	r3, [r7, #0]
}
    2b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2b2c:	20002809 	.word	0x20002809
    2b30:	200027f2 	.word	0x200027f2
    2b34:	20002804 	.word	0x20002804
    2b38:	200019a0 	.word	0x200019a0
    2b3c:	20204000 	.word	0x20204000
    2b40:	20002806 	.word	0x20002806

00002b44 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    2b44:	f7ff bf22 	b.w	298c <usb_serial_flush_input>

00002b48 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2b48:	f7ff bef2 	b.w	2930 <usb_serial_peekchar>

00002b4c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    2b4c:	f7ff bf56 	b.w	29fc <usb_serial_getchar>

00002b50 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    2b50:	f7ff bf10 	b.w	2974 <usb_serial_available>

00002b54 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2b54:	f7ff bfac 	b.w	2ab0 <usb_serial_flush_output>

00002b58 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2b58:	f7ff bf82 	b.w	2a60 <usb_serial_write_buffer_free>

00002b5c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2b5c:	4608      	mov	r0, r1
    2b5e:	4611      	mov	r1, r2
    2b60:	f7ff bf72 	b.w	2a48 <usb_serial_write>

00002b64 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b64:	4608      	mov	r0, r1
    2b66:	f7ff bf59 	b.w	2a1c <usb_serial_putchar>
    2b6a:	bf00      	nop

00002b6c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2b6c:	4a12      	ldr	r2, [pc, #72]	; (2bb8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2b6e:	4b13      	ldr	r3, [pc, #76]	; (2bbc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2b70:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2b74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    2b78:	4298      	cmp	r0, r3
{
    2b7a:	b510      	push	{r4, lr}
    2b7c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    2b7e:	d202      	bcs.n	2b86 <usb_init_serialnumber+0x1a>
    2b80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2b84:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    2b86:	4c0e      	ldr	r4, [pc, #56]	; (2bc0 <usb_init_serialnumber+0x54>)
    2b88:	a901      	add	r1, sp, #4
    2b8a:	220a      	movs	r2, #10
    2b8c:	f7fe fa7a 	bl	1084 <ultoa>
	for (i=0; i<10; i++) {
    2b90:	a901      	add	r1, sp, #4
    2b92:	2300      	movs	r3, #0
    2b94:	4620      	mov	r0, r4
		char c = buf[i];
    2b96:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2b9a:	3301      	adds	r3, #1
		if (!c) break;
    2b9c:	b13a      	cbz	r2, 2bae <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    2b9e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2ba0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    2ba4:	d1f7      	bne.n	2b96 <usb_init_serialnumber+0x2a>
    2ba6:	2316      	movs	r3, #22
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2ba8:	7023      	strb	r3, [r4, #0]
}
    2baa:	b004      	add	sp, #16
    2bac:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2bae:	005b      	lsls	r3, r3, #1
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	7023      	strb	r3, [r4, #0]
}
    2bb4:	b004      	add	sp, #16
    2bb6:	bd10      	pop	{r4, pc}
    2bb8:	401f4400 	.word	0x401f4400
    2bbc:	00989680 	.word	0x00989680
    2bc0:	200010c8 	.word	0x200010c8

00002bc4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2bc8:	4e3b      	ldr	r6, [pc, #236]	; (2cb8 <yield+0xf4>)
    2bca:	7833      	ldrb	r3, [r6, #0]
    2bcc:	b173      	cbz	r3, 2bec <yield+0x28>
	if (running) return; // TODO: does this need to be atomic?
    2bce:	4f3b      	ldr	r7, [pc, #236]	; (2cbc <yield+0xf8>)
    2bd0:	783a      	ldrb	r2, [r7, #0]
    2bd2:	b95a      	cbnz	r2, 2bec <yield+0x28>
	running = 1;
    2bd4:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2bd6:	07d8      	lsls	r0, r3, #31
	running = 1;
    2bd8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2bda:	d44e      	bmi.n	2c7a <yield+0xb6>
		if (Serial.available()) serialEvent();
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
	}

#if defined(USB_DUAL_SERIAL) || defined(USB_TRIPLE_SERIAL)
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB1) {
    2bdc:	0719      	lsls	r1, r3, #28
    2bde:	d444      	bmi.n	2c6a <yield+0xa6>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2be0:	079a      	lsls	r2, r3, #30
    2be2:	d426      	bmi.n	2c32 <yield+0x6e>

	running = 0;
    2be4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2be6:	075b      	lsls	r3, r3, #29
	running = 0;
    2be8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2bea:	d401      	bmi.n	2bf0 <yield+0x2c>
	
};
    2bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2bf0:	4b33      	ldr	r3, [pc, #204]	; (2cc0 <yield+0xfc>)
    2bf2:	681a      	ldr	r2, [r3, #0]
    2bf4:	2a00      	cmp	r2, #0
    2bf6:	d0f9      	beq.n	2bec <yield+0x28>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2bf8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2bfc:	2a00      	cmp	r2, #0
    2bfe:	d1f5      	bne.n	2bec <yield+0x28>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2c00:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    2c04:	b672      	cpsid	i
		EventResponder *first = firstYield;
    2c06:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2c08:	2800      	cmp	r0, #0
    2c0a:	d048      	beq.n	2c9e <yield+0xda>
		if (runningFromYield) {
    2c0c:	4c2d      	ldr	r4, [pc, #180]	; (2cc4 <yield+0x100>)
    2c0e:	7821      	ldrb	r1, [r4, #0]
    2c10:	2900      	cmp	r1, #0
    2c12:	d144      	bne.n	2c9e <yield+0xda>
		runningFromYield = true;
    2c14:	2201      	movs	r2, #1
    2c16:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    2c18:	6942      	ldr	r2, [r0, #20]
    2c1a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    2c1c:	2a00      	cmp	r2, #0
    2c1e:	d048      	beq.n	2cb2 <yield+0xee>
			firstYield->_prev = nullptr;
    2c20:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2c22:	b905      	cbnz	r5, 2c26 <yield+0x62>
    2c24:	b662      	cpsie	i
		first->_triggered = false;
    2c26:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2c28:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    2c2a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2c2c:	4798      	blx	r3
		runningFromYield = false;
    2c2e:	7025      	strb	r5, [r4, #0]
    2c30:	e7dc      	b.n	2bec <yield+0x28>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2c32:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2cd4 <yield+0x110>
    2c36:	f898 2000 	ldrb.w	r2, [r8]
    2c3a:	2a00      	cmp	r2, #0
    2c3c:	d0d2      	beq.n	2be4 <yield+0x20>
    2c3e:	2500      	movs	r5, #0
    2c40:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2cd8 <yield+0x114>
    2c44:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2c46:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2c4a:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2c4c:	6823      	ldr	r3, [r4, #0]
    2c4e:	4620      	mov	r0, r4
    2c50:	691b      	ldr	r3, [r3, #16]
    2c52:	4798      	blx	r3
    2c54:	b110      	cbz	r0, 2c5c <yield+0x98>
    2c56:	6963      	ldr	r3, [r4, #20]
    2c58:	689b      	ldr	r3, [r3, #8]
    2c5a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2c5c:	f898 2000 	ldrb.w	r2, [r8]
    2c60:	b2eb      	uxtb	r3, r5
    2c62:	429a      	cmp	r2, r3
    2c64:	d8ef      	bhi.n	2c46 <yield+0x82>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2c66:	7833      	ldrb	r3, [r6, #0]
    2c68:	e7bc      	b.n	2be4 <yield+0x20>
                        // sketch still gets to run normally after this wait time.
                        //if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
                //}
        }
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial2_available(); }
    2c6a:	f7ff f9e7 	bl	203c <usb_serial2_available>
		if (SerialUSB1.available()) serialEventUSB1();
    2c6e:	b9e8      	cbnz	r0, 2cac <yield+0xe8>
		if (_serialEventUSB1_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB1;
    2c70:	4b15      	ldr	r3, [pc, #84]	; (2cc8 <yield+0x104>)
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	b94b      	cbnz	r3, 2c8a <yield+0xc6>
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2c76:	7833      	ldrb	r3, [r6, #0]
    2c78:	e7b2      	b.n	2be0 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2c7a:	f7ff fe7b 	bl	2974 <usb_serial_available>
		if (Serial.available()) serialEvent();
    2c7e:	b990      	cbnz	r0, 2ca6 <yield+0xe2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    2c80:	4b12      	ldr	r3, [pc, #72]	; (2ccc <yield+0x108>)
    2c82:	781b      	ldrb	r3, [r3, #0]
    2c84:	b933      	cbnz	r3, 2c94 <yield+0xd0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB1) {
    2c86:	7833      	ldrb	r3, [r6, #0]
    2c88:	e7a8      	b.n	2bdc <yield+0x18>
		if (_serialEventUSB1_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB1;
    2c8a:	7833      	ldrb	r3, [r6, #0]
    2c8c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2c90:	7033      	strb	r3, [r6, #0]
    2c92:	e7a5      	b.n	2be0 <yield+0x1c>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    2c94:	7833      	ldrb	r3, [r6, #0]
    2c96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2c9a:	7033      	strb	r3, [r6, #0]
    2c9c:	e79e      	b.n	2bdc <yield+0x18>
		if (doit) __enable_irq();
    2c9e:	2d00      	cmp	r5, #0
    2ca0:	d1a4      	bne.n	2bec <yield+0x28>
    2ca2:	b662      	cpsie	i
    2ca4:	e7a2      	b.n	2bec <yield+0x28>
		if (Serial.available()) serialEvent();
    2ca6:	f7ff f839 	bl	1d1c <serialEvent()>
    2caa:	e7e9      	b.n	2c80 <yield+0xbc>
		if (SerialUSB1.available()) serialEventUSB1();
    2cac:	f7fe fa1c 	bl	10e8 <serialEventUSB1()>
    2cb0:	e7de      	b.n	2c70 <yield+0xac>
			lastYield = nullptr;
    2cb2:	4b07      	ldr	r3, [pc, #28]	; (2cd0 <yield+0x10c>)
    2cb4:	601a      	str	r2, [r3, #0]
    2cb6:	e7b4      	b.n	2c22 <yield+0x5e>
    2cb8:	200010de 	.word	0x200010de
    2cbc:	200027fa 	.word	0x200027fa
    2cc0:	2000209c 	.word	0x2000209c
    2cc4:	200027f8 	.word	0x200027f8
    2cc8:	60001e74 	.word	0x60001e74
    2ccc:	60001e7a 	.word	0x60001e7a
    2cd0:	200020a8 	.word	0x200020a8
    2cd4:	200027f9 	.word	0x200027f9
    2cd8:	200020ac 	.word	0x200020ac

00002cdc <unused_interrupt_vector>:
	__disable_irq();
    2cdc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2cde:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    2ce2:	4c4f      	ldr	r4, [pc, #316]	; (2e20 <unused_interrupt_vector+0x144>)
    2ce4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    2ce8:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    2cec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    2cf0:	4e4c      	ldr	r6, [pc, #304]	; (2e24 <unused_interrupt_vector+0x148>)
	while (p < end) {
    2cf2:	4d4d      	ldr	r5, [pc, #308]	; (2e28 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    2cf4:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    2cf8:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    2cfc:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    2d00:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    2d04:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    2d08:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    2d0c:	6993      	ldr	r3, [r2, #24]
    2d0e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    2d12:	69d3      	ldr	r3, [r2, #28]
    2d14:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    2d18:	f7fd fce6 	bl	6e8 <tempmonGetTemp>
    2d1c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    2d20:	f7fe f99e 	bl	1060 <rtc_get>
	info->len = sizeof(*info) / 4;
    2d24:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    2d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    2d2a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    2d2e:	460b      	mov	r3, r1
    2d30:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2d34:	493d      	ldr	r1, [pc, #244]	; (2e2c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    2d36:	1d30      	adds	r0, r6, #4
    2d38:	405a      	eors	r2, r3
    2d3a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2d3c:	f002 0301 	and.w	r3, r2, #1
    2d40:	3c01      	subs	r4, #1
    2d42:	fb01 f303 	mul.w	r3, r1, r3
    2d46:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    2d4a:	d1f7      	bne.n	2d3c <unused_interrupt_vector+0x60>
	while (p < end) {
    2d4c:	42a8      	cmp	r0, r5
    2d4e:	d002      	beq.n	2d56 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    2d50:	6873      	ldr	r3, [r6, #4]
    2d52:	4606      	mov	r6, r0
    2d54:	e7ef      	b.n	2d36 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    2d56:	4b32      	ldr	r3, [pc, #200]	; (2e20 <unused_interrupt_vector+0x144>)
    2d58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    2d5c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2d60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2d64:	492f      	ldr	r1, [pc, #188]	; (2e24 <unused_interrupt_vector+0x148>)
    2d66:	4a32      	ldr	r2, [pc, #200]	; (2e30 <unused_interrupt_vector+0x154>)
    2d68:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    2d6c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    2d70:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2d74:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2d78:	4a2e      	ldr	r2, [pc, #184]	; (2e34 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    2d7a:	2502      	movs	r5, #2
    2d7c:	482e      	ldr	r0, [pc, #184]	; (2e38 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2d7e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2d80:	492e      	ldr	r1, [pc, #184]	; (2e3c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2d82:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    2d86:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    2d88:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2d8a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2d8c:	482c      	ldr	r0, [pc, #176]	; (2e40 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2d8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d96:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2d98:	680b      	ldr	r3, [r1, #0]
    2d9a:	4283      	cmp	r3, r0
    2d9c:	d83d      	bhi.n	2e1a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    2d9e:	4d26      	ldr	r5, [pc, #152]	; (2e38 <unused_interrupt_vector+0x15c>)
    2da0:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    2da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    2daa:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2dac:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    2dae:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    2db2:	4924      	ldr	r1, [pc, #144]	; (2e44 <unused_interrupt_vector+0x168>)
    2db4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2db8:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    2dbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2dc0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2dc4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    2dc8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    2dcc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2dd0:	e001      	b.n	2dd6 <unused_interrupt_vector+0xfa>
		usb_isr();
    2dd2:	f7fd fd7d 	bl	8d0 <usb_isr>
		if (PIT_TFLG0) {
    2dd6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d0f9      	beq.n	2dd2 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    2dde:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2de0:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2de4:	2c4f      	cmp	r4, #79	; 0x4f
    2de6:	d9f4      	bls.n	2dd2 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2de8:	4b17      	ldr	r3, [pc, #92]	; (2e48 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    2dea:	2002      	movs	r0, #2
    2dec:	4917      	ldr	r1, [pc, #92]	; (2e4c <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    2df2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2df6:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2df8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2dfc:	b93b      	cbnz	r3, 2e0e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    2dfe:	4814      	ldr	r0, [pc, #80]	; (2e50 <unused_interrupt_vector+0x174>)
    2e00:	4914      	ldr	r1, [pc, #80]	; (2e54 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2e02:	4a0d      	ldr	r2, [pc, #52]	; (2e38 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    2e04:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2e06:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d0fa      	beq.n	2e04 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    2e0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2e12:	4a11      	ldr	r2, [pc, #68]	; (2e58 <unused_interrupt_vector+0x17c>)
    2e14:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    2e18:	e7fe      	b.n	2e18 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2e1a:	f7fd fabf 	bl	39c <set_arm_clock>
    2e1e:	e7be      	b.n	2d9e <unused_interrupt_vector+0xc2>
    2e20:	2027ff00 	.word	0x2027ff00
    2e24:	2027ff80 	.word	0x2027ff80
    2e28:	2027ffa8 	.word	0x2027ffa8
    2e2c:	edb88320 	.word	0xedb88320
    2e30:	2027ffa0 	.word	0x2027ffa0
    2e34:	400fc000 	.word	0x400fc000
    2e38:	40084000 	.word	0x40084000
    2e3c:	20000db8 	.word	0x20000db8
    2e40:	0bcd3d80 	.word	0x0bcd3d80
    2e44:	00249f00 	.word	0x00249f00
    2e48:	400d9000 	.word	0x400d9000
    2e4c:	402e0000 	.word	0x402e0000
    2e50:	400f8000 	.word	0x400f8000
    2e54:	0bad00f1 	.word	0x0bad00f1
    2e58:	05fa0004 	.word	0x05fa0004

00002e5c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2e5c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e5e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2e62:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2e64:	4c0c      	ldr	r4, [pc, #48]	; (2e98 <EventResponder::runFromInterrupt()+0x3c>)
    2e66:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2e68:	b180      	cbz	r0, 2e8c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2e6a:	4e0c      	ldr	r6, [pc, #48]	; (2e9c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2e6c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    2e6e:	6943      	ldr	r3, [r0, #20]
    2e70:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    2e72:	b173      	cbz	r3, 2e92 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2e74:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2e76:	b902      	cbnz	r2, 2e7a <EventResponder::runFromInterrupt()+0x1e>
    2e78:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    2e7a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2e7c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    2e7e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e80:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2e84:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2e86:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2e88:	2800      	cmp	r0, #0
    2e8a:	d1f0      	bne.n	2e6e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2e8c:	b902      	cbnz	r2, 2e90 <EventResponder::runFromInterrupt()+0x34>
    2e8e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    2e90:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    2e92:	6033      	str	r3, [r6, #0]
    2e94:	e7ef      	b.n	2e76 <EventResponder::runFromInterrupt()+0x1a>
    2e96:	bf00      	nop
    2e98:	200020a4 	.word	0x200020a4
    2e9c:	200020a0 	.word	0x200020a0

00002ea0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    2ea0:	f7ff bfdc 	b.w	2e5c <EventResponder::runFromInterrupt()>

00002ea4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2ea4:	4904      	ldr	r1, [pc, #16]	; (2eb8 <systick_isr+0x14>)
	systick_millis_count++;
    2ea6:	4a05      	ldr	r2, [pc, #20]	; (2ebc <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2ea8:	6849      	ldr	r1, [r1, #4]
    2eaa:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <systick_isr+0x1c>)
    2eac:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2eae:	6813      	ldr	r3, [r2, #0]
    2eb0:	3301      	adds	r3, #1
    2eb2:	6013      	str	r3, [r2, #0]
}
    2eb4:	4770      	bx	lr
    2eb6:	bf00      	nop
    2eb8:	e0001000 	.word	0xe0001000
    2ebc:	200027c4 	.word	0x200027c4
    2ec0:	200027c0 	.word	0x200027c0

00002ec4 <mem2hex(char*, void const*, int)>:
 * @param addr Memory address to convert
 * @param sz Number of bytes to convert
 * @return char* The address of the last character (a \0) in buff
 */
char *mem2hex(char *buff, const void *addr, int sz = -1) {
  if (sz < 0) sz = strlen((char*)addr);
    2ec4:	2a00      	cmp	r2, #0
char *mem2hex(char *buff, const void *addr, int sz = -1) {
    2ec6:	b538      	push	{r3, r4, r5, lr}
    2ec8:	4605      	mov	r5, r0
    2eca:	460c      	mov	r4, r1
  if (sz < 0) sz = strlen((char*)addr);
    2ecc:	db1a      	blt.n	2f04 <mem2hex(char*, void const*, int)+0x40>
  for (int i = 0; i < sz; i++) {
    2ece:	b1fa      	cbz	r2, 2f10 <mem2hex(char*, void const*, int)+0x4c>
    2ed0:	1cab      	adds	r3, r5, #2
    2ed2:	1e61      	subs	r1, r4, #1
    2ed4:	0050      	lsls	r0, r2, #1
    2ed6:	4c10      	ldr	r4, [pc, #64]	; (2f18 <mem2hex(char*, void const*, int)+0x54>)
    2ed8:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
    uint8_t b = ((uint8_t*)addr)[i];
    2edc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  for (int i = 0; i < sz; i++) {
    2ee0:	3302      	adds	r3, #2
    *buff++ = int2hex[b >> 4];
    2ee2:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    *buff++ = int2hex[b & 0x0F];
    2ee6:	f002 020f 	and.w	r2, r2, #15
  for (int i = 0; i < sz; i++) {
    2eea:	4563      	cmp	r3, ip
    *buff++ = int2hex[b >> 4];
    2eec:	f814 e00e 	ldrb.w	lr, [r4, lr]
    2ef0:	f803 ec04 	strb.w	lr, [r3, #-4]
    *buff++ = int2hex[b & 0x0F];
    2ef4:	5ca2      	ldrb	r2, [r4, r2]
    2ef6:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (int i = 0; i < sz; i++) {
    2efa:	d1ef      	bne.n	2edc <mem2hex(char*, void const*, int)+0x18>
    *buff++ = int2hex[b & 0x0F];
    2efc:	4428      	add	r0, r5
  }
  *buff = 0;
    2efe:	2300      	movs	r3, #0
    2f00:	7003      	strb	r3, [r0, #0]
  return buff;
}
    2f02:	bd38      	pop	{r3, r4, r5, pc}
  if (sz < 0) sz = strlen((char*)addr);
    2f04:	4608      	mov	r0, r1
    2f06:	f000 fe7b 	bl	3c00 <strlen>
    2f0a:	4602      	mov	r2, r0
  for (int i = 0; i < sz; i++) {
    2f0c:	2a00      	cmp	r2, #0
    2f0e:	d1df      	bne.n	2ed0 <mem2hex(char*, void const*, int)+0xc>
    2f10:	4628      	mov	r0, r5
  *buff = 0;
    2f12:	2300      	movs	r3, #0
    2f14:	7003      	strb	r3, [r0, #0]
}
    2f16:	bd38      	pop	{r3, r4, r5, pc}
    2f18:	200010b8 	.word	0x200010b8

00002f1c <gdb_out_write(unsigned char const*, unsigned int)>:
 * 
 * @param msg Message to display
 * @param len Number of characters
 * @return size_t Number of characters sent
 */
size_t gdb_out_write(const uint8_t *msg, size_t len) {
    2f1c:	b530      	push	{r4, r5, lr}
  if (send_message[0]) {
    2f1e:	4d0e      	ldr	r5, [pc, #56]	; (2f58 <gdb_out_write(unsigned char const*, unsigned int)+0x3c>)
size_t gdb_out_write(const uint8_t *msg, size_t len) {
    2f20:	460c      	mov	r4, r1
    2f22:	b083      	sub	sp, #12
    2f24:	4601      	mov	r1, r0
  if (send_message[0]) {
    2f26:	782b      	ldrb	r3, [r5, #0]
    2f28:	b15b      	cbz	r3, 2f42 <gdb_out_write(unsigned char const*, unsigned int)+0x26>
    int lx = strlen(send_message);
    2f2a:	9001      	str	r0, [sp, #4]
    2f2c:	4628      	mov	r0, r5
    2f2e:	f000 fe67 	bl	3c00 <strlen>
    char *p = send_message + lx;
    mem2hex(p, (const char *)msg, len);
    2f32:	4622      	mov	r2, r4
    2f34:	9901      	ldr	r1, [sp, #4]
    2f36:	4428      	add	r0, r5
    2f38:	f7ff ffc4 	bl	2ec4 <mem2hex(char*, void const*, int)>
  else {
    send_message[0] = 'O';
    mem2hex(send_message+1, (const char *)msg, len);
  }
  return len;
}
    2f3c:	4620      	mov	r0, r4
    2f3e:	b003      	add	sp, #12
    2f40:	bd30      	pop	{r4, r5, pc}
    send_message[0] = 'O';
    2f42:	234f      	movs	r3, #79	; 0x4f
    2f44:	4628      	mov	r0, r5
    mem2hex(send_message+1, (const char *)msg, len);
    2f46:	4622      	mov	r2, r4
    send_message[0] = 'O';
    2f48:	f800 3b01 	strb.w	r3, [r0], #1
    mem2hex(send_message+1, (const char *)msg, len);
    2f4c:	f7ff ffba 	bl	2ec4 <mem2hex(char*, void const*, int)>
}
    2f50:	4620      	mov	r0, r4
    2f52:	b003      	add	sp, #12
    2f54:	bd30      	pop	{r4, r5, pc}
    2f56:	bf00      	nop
    2f58:	200026c0 	.word	0x200026c0

00002f5c <_GLOBAL__sub_I_dev>:
}

// void setup_main();

// Check for GDB commands periodically
IntervalTimer gdb_timer;
    2f5c:	4a02      	ldr	r2, [pc, #8]	; (2f68 <_GLOBAL__sub_I_dev+0xc>)
    2f5e:	4903      	ldr	r1, [pc, #12]	; (2f6c <_GLOBAL__sub_I_dev+0x10>)
    2f60:	4803      	ldr	r0, [pc, #12]	; (2f70 <_GLOBAL__sub_I_dev+0x14>)
    2f62:	f000 bb95 	b.w	3690 <__aeabi_atexit>
    2f66:	bf00      	nop
    2f68:	20000db0 	.word	0x20000db0
    2f6c:	0000103d 	.word	0x0000103d
    2f70:	200010b0 	.word	0x200010b0

00002f74 <Debug::availableForWrite()>:
    return write(&b, 1);
  };
	virtual size_t write(const uint8_t *buffer, size_t size) {
    return gdb_out_write(buffer, size);
  }
	virtual int availableForWrite(void)		{ return 128; }
    2f74:	2080      	movs	r0, #128	; 0x80
    2f76:	4770      	bx	lr

00002f78 <Debug::flush()>:
	virtual void flush() { }
    2f78:	4770      	bx	lr
    2f7a:	bf00      	nop

00002f7c <Debug::write(unsigned char const*, unsigned int)>:
    return gdb_out_write(buffer, size);
    2f7c:	4608      	mov	r0, r1
    2f7e:	4611      	mov	r1, r2
    2f80:	f7ff bfcc 	b.w	2f1c <gdb_out_write(unsigned char const*, unsigned int)>

00002f84 <Debug::write(unsigned char)>:
    return write(&b, 1);
    2f84:	6803      	ldr	r3, [r0, #0]
    2f86:	4a0b      	ldr	r2, [pc, #44]	; (2fb4 <Debug::write(unsigned char)+0x30>)
    2f88:	685b      	ldr	r3, [r3, #4]
  virtual size_t write(uint8_t b) { 
    2f8a:	b500      	push	{lr}
    2f8c:	4293      	cmp	r3, r2
    2f8e:	b083      	sub	sp, #12
    2f90:	f88d 1007 	strb.w	r1, [sp, #7]
    2f94:	d107      	bne.n	2fa6 <Debug::write(unsigned char)+0x22>
    return gdb_out_write(buffer, size);
    2f96:	2101      	movs	r1, #1
    2f98:	f10d 0007 	add.w	r0, sp, #7
    2f9c:	f7ff ffbe 	bl	2f1c <gdb_out_write(unsigned char const*, unsigned int)>
  };
    2fa0:	b003      	add	sp, #12
    2fa2:	f85d fb04 	ldr.w	pc, [sp], #4
    return write(&b, 1);
    2fa6:	2201      	movs	r2, #1
    2fa8:	f10d 0107 	add.w	r1, sp, #7
    2fac:	4798      	blx	r3
  };
    2fae:	b003      	add	sp, #12
    2fb0:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb4:	00002f7d 	.word	0x00002f7d

00002fb8 <_GLOBAL__sub_I_sw_breakpoint_addr>:
    2fb8:	4b02      	ldr	r3, [pc, #8]	; (2fc4 <_GLOBAL__sub_I_sw_breakpoint_addr+0xc>)
    2fba:	2100      	movs	r1, #0
class Debug : public Print, public DebugFileIO {
    2fbc:	4a02      	ldr	r2, [pc, #8]	; (2fc8 <_GLOBAL__sub_I_sw_breakpoint_addr+0x10>)
    2fbe:	7119      	strb	r1, [r3, #4]
    2fc0:	601a      	str	r2, [r3, #0]
void Debug::setCallback(void (*c)()) { callback = c; }
uint32_t Debug::getRegister(const char *reg) { return debug_getRegister(reg); }
int Debug::setRegister(const char *reg, uint32_t value) { return debug_setRegister(reg, value); }
// int Debug::restoreRunMode() { return debug_restoreRunMode(); }

Debug debug;
    2fc2:	4770      	bx	lr
    2fc4:	200020d0 	.word	0x200020d0
    2fc8:	200003cc 	.word	0x200003cc

00002fcc <MicroNMEA::skipField(char const*) [clone .part.0]>:
const char* MicroNMEA::skipField(const char* s)
{
  if (s == nullptr)
    return nullptr;

  while (!isEndOfFields(*s)) {
    2fcc:	7803      	ldrb	r3, [r0, #0]
    }


  protected:
    static inline bool isEndOfFields(char c) {
      return c == '*' || c == '\0' || c == '\r' || c == '\n';
    2fce:	2b2a      	cmp	r3, #42	; 0x2a
    2fd0:	d00a      	beq.n	2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    2fd2:	b14b      	cbz	r3, 2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    2fd4:	2b0d      	cmp	r3, #13
    2fd6:	d007      	beq.n	2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    2fd8:	2b0a      	cmp	r3, #10
    2fda:	d005      	beq.n	2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    if (*s == ',') {
    2fdc:	2b2c      	cmp	r3, #44	; 0x2c
    2fde:	d005      	beq.n	2fec <MicroNMEA::skipField(char const*) [clone .part.0]+0x20>
  while (!isEndOfFields(*s)) {
    2fe0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    2fe4:	2b2a      	cmp	r3, #42	; 0x2a
    2fe6:	d1f4      	bne.n	2fd2 <MicroNMEA::skipField(char const*) [clone .part.0]+0x6>
      else
        return s;
    }
    ++s;
  }
  return nullptr; // End of string or valid sentence
    2fe8:	2000      	movs	r0, #0
}
    2fea:	4770      	bx	lr
      if (isEndOfFields(*++s))
    2fec:	7843      	ldrb	r3, [r0, #1]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d0fa      	beq.n	2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    2ff2:	f003 02df 	and.w	r2, r3, #223	; 0xdf
    2ff6:	2a0a      	cmp	r2, #10
    2ff8:	d0f6      	beq.n	2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    2ffa:	2b0d      	cmp	r3, #13
    2ffc:	d0f4      	beq.n	2fe8 <MicroNMEA::skipField(char const*) [clone .part.0]+0x1c>
    2ffe:	3001      	adds	r0, #1
    3000:	4770      	bx	lr
    3002:	bf00      	nop

00003004 <MicroNMEA::parseTime(char const*) [clone .part.0]>:

unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
  int r = 0;
  while (len--)
    r = 10 * r + *s++ - '0';
    3004:	780a      	ldrb	r2, [r1, #0]

  return false;
}


const char* MicroNMEA::parseTime(const char* s)
    3006:	4603      	mov	r3, r0
    r = 10 * r + *s++ - '0';
    3008:	f891 c001 	ldrb.w	ip, [r1, #1]
    300c:	f101 0009 	add.w	r0, r1, #9
    3010:	3a30      	subs	r2, #48	; 0x30
    3012:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3016:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    301a:	3a30      	subs	r2, #48	; 0x30
{
  if (*s == ',')
    return skipField(s);
  _hour = parseUnsignedInt(s, 2);
    301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    r = 10 * r + *s++ - '0';
    3020:	788a      	ldrb	r2, [r1, #2]
    3022:	f891 c003 	ldrb.w	ip, [r1, #3]
    3026:	3a30      	subs	r2, #48	; 0x30
    3028:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    302c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    3030:	3a30      	subs	r2, #48	; 0x30
  _minute = parseUnsignedInt(s + 2, 2);
    3032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    r = 10 * r + *s++ - '0';
    3036:	790a      	ldrb	r2, [r1, #4]
    3038:	f891 c005 	ldrb.w	ip, [r1, #5]
    303c:	3a30      	subs	r2, #48	; 0x30
    303e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3042:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    3046:	3a30      	subs	r2, #48	; 0x30
  _second = parseUnsignedInt(s + 4, 2);
    3048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    r = 10 * r + *s++ - '0';
    304c:	79ca      	ldrb	r2, [r1, #7]
    304e:	7a09      	ldrb	r1, [r1, #8]
    3050:	3a30      	subs	r2, #48	; 0x30
    3052:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3056:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    305a:	3a30      	subs	r2, #48	; 0x30
  _hundredths = parseUnsignedInt(s + 7, 2);
    305c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if (s == nullptr)
    3060:	f7ff bfb4 	b.w	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>

00003064 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]>:
  while (*s != ',' && !isEndOfFields(*s)) {
    3064:	7803      	ldrb	r3, [r0, #0]
    3066:	2b2c      	cmp	r3, #44	; 0x2c
    3068:	d02c      	beq.n	30c4 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x60>
  int i = 0;
    306a:	f04f 0c00 	mov.w	ip, #0
const char* MicroNMEA::parseField(const char* s, char *result, int len)
    306e:	b510      	push	{r4, lr}
    3070:	e012      	b.n	3098 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x34>
    3072:	f1be 0f0a 	cmp.w	lr, #10
    3076:	d013      	beq.n	30a0 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x3c>
    3078:	2b0d      	cmp	r3, #13
    if (result && i++ < len)
    307a:	f10c 0401 	add.w	r4, ip, #1
    307e:	d00f      	beq.n	30a0 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x3c>
    3080:	b131      	cbz	r1, 3090 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x2c>
    3082:	4562      	cmp	r2, ip
      *result++ = *s;
    3084:	468e      	mov	lr, r1
    if (result && i++ < len)
    3086:	46a4      	mov	ip, r4
    3088:	dd02      	ble.n	3090 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x2c>
      *result++ = *s;
    308a:	f80e 3b01 	strb.w	r3, [lr], #1
    308e:	4671      	mov	r1, lr
  while (*s != ',' && !isEndOfFields(*s)) {
    3090:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    3094:	2b2c      	cmp	r3, #44	; 0x2c
    3096:	d00f      	beq.n	30b8 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x54>
    3098:	f003 0edf 	and.w	lr, r3, #223	; 0xdf
    309c:	2b00      	cmp	r3, #0
    309e:	d1e8      	bne.n	3072 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0xe>
  if (result && i < len)
    30a0:	b119      	cbz	r1, 30aa <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x46>
    30a2:	4562      	cmp	r2, ip
    30a4:	dd01      	ble.n	30aa <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x46>
    *result = '\0'; // Terminate unless too long
    30a6:	2300      	movs	r3, #0
    30a8:	700b      	strb	r3, [r1, #0]
  if (*s == ',')
    30aa:	7803      	ldrb	r3, [r0, #0]
    30ac:	2b2c      	cmp	r3, #44	; 0x2c
    30ae:	d101      	bne.n	30b4 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x50>
    return ++s; // Location of start of next field
    30b0:	3001      	adds	r0, #1
}
    30b2:	bd10      	pop	{r4, pc}
    return nullptr; // End of string or valid sentence
    30b4:	2000      	movs	r0, #0
}
    30b6:	bd10      	pop	{r4, pc}
  if (result && i < len)
    30b8:	2900      	cmp	r1, #0
    30ba:	d0f9      	beq.n	30b0 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x4c>
    30bc:	4562      	cmp	r2, ip
    30be:	dcf2      	bgt.n	30a6 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x42>
    return ++s; // Location of start of next field
    30c0:	3001      	adds	r0, #1
    30c2:	e7f6      	b.n	30b2 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x4e>
  int i = 0;
    30c4:	f04f 0c00 	mov.w	ip, #0
  if (result && i < len)
    30c8:	b131      	cbz	r1, 30d8 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x74>
    30ca:	4562      	cmp	r2, ip
    30cc:	dd04      	ble.n	30d8 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x74>
    *result = '\0'; // Terminate unless too long
    30ce:	2300      	movs	r3, #0
    30d0:	700b      	strb	r3, [r1, #0]
  if (*s == ',')
    30d2:	7803      	ldrb	r3, [r0, #0]
    30d4:	2b2c      	cmp	r3, #44	; 0x2c
    30d6:	d101      	bne.n	30dc <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]+0x78>
    return ++s; // Location of start of next field
    30d8:	3001      	adds	r0, #1
    30da:	4770      	bx	lr
    return nullptr; // End of string or valid sentence
    30dc:	2000      	movs	r0, #0
}
    30de:	4770      	bx	lr

000030e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>:
{
    30e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    30e4:	460d      	mov	r5, r1
    30e6:	4616      	mov	r6, r2
  if (resultValid)
    30e8:	4698      	mov	r8, r3
    30ea:	b113      	cbz	r3, 30f2 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x12>
    *resultValid = false;
    30ec:	2300      	movs	r3, #0
    30ee:	f888 3000 	strb.w	r3, [r8]
    30f2:	4604      	mov	r4, r0
  while (isspace(*s))
    30f4:	f894 9000 	ldrb.w	r9, [r4]
    30f8:	4627      	mov	r7, r4
    30fa:	3401      	adds	r4, #1
    30fc:	4648      	mov	r0, r9
    30fe:	f000 fafd 	bl	36fc <isspace>
    3102:	2800      	cmp	r0, #0
    3104:	d1f6      	bne.n	30f4 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x14>
  if (*s == '-') {
    3106:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    310a:	d03f      	beq.n	318c <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0xac>
  else if (*s == '+')
    310c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    ++s;
    3110:	f04f 0101 	mov.w	r1, #1
  while (isdigit(*s)) {
    3114:	bf04      	itt	eq
    3116:	f897 9001 	ldrbeq.w	r9, [r7, #1]
    ++s;
    311a:	4627      	moveq	r7, r4
  while (isdigit(*s)) {
    311c:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    3120:	2b09      	cmp	r3, #9
    3122:	d83c      	bhi.n	319e <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0xbe>
    3124:	1c7b      	adds	r3, r7, #1
    3126:	f04f 0c00 	mov.w	ip, #0
      *resultValid = true;
    312a:	2401      	movs	r4, #1
    r = 10 * r + *s++ - '0';
    312c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    3130:	461f      	mov	r7, r3
    3132:	eb09 0c4c 	add.w	ip, r9, ip, lsl #1
    3136:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
    if (resultValid)
    313a:	f1b8 0f00 	cmp.w	r8, #0
    313e:	d001      	beq.n	3144 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x64>
      *resultValid = true;
    3140:	f888 4000 	strb.w	r4, [r8]
  while (isdigit(*s)) {
    3144:	f813 9b01 	ldrb.w	r9, [r3], #1
    3148:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    314c:	2a09      	cmp	r2, #9
    314e:	d9ed      	bls.n	312c <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x4c>
  while (b--)
    3150:	1e6c      	subs	r4, r5, #1
    3152:	b2e2      	uxtb	r2, r4
    3154:	b16d      	cbz	r5, 3172 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x92>
    3156:	4696      	mov	lr, r2
  long r = 1;
    3158:	2301      	movs	r3, #1
  while (b--)
    315a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    r *= 10;
    315e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  while (b--)
    3162:	fa5f fe8e 	uxtb.w	lr, lr
    r *= 10;
    3166:	005b      	lsls	r3, r3, #1
  while (b--)
    3168:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    316c:	d1f5      	bne.n	315a <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x7a>
  r *= exp10(log10Multiplier);
    316e:	fb03 fc0c 	mul.w	ip, r3, ip
  if (*s == '.') {
    3172:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    3176:	d015      	beq.n	31a4 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0xc4>
  r *= neg; // Include effect of any minus sign
    3178:	fb01 f10c 	mul.w	r1, r1, ip
  if (eptr)
    317c:	b11e      	cbz	r6, 3186 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0xa6>
  if (s == nullptr)
    317e:	4638      	mov	r0, r7
    3180:	f7ff ff24 	bl	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>
    *eptr = skipField(s);
    3184:	6030      	str	r0, [r6, #0]
}
    3186:	4608      	mov	r0, r1
    3188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (isdigit(*s)) {
    318c:	f897 9001 	ldrb.w	r9, [r7, #1]
    3190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ++s;
    3194:	4627      	mov	r7, r4
  while (isdigit(*s)) {
    3196:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    319a:	2b09      	cmp	r3, #9
    319c:	d9c2      	bls.n	3124 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x44>
    319e:	f04f 0c00 	mov.w	ip, #0
    31a2:	e7d5      	b.n	3150 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x70>
    while (isdigit(*s) && log10Multiplier) {
    31a4:	787b      	ldrb	r3, [r7, #1]
    ++s;
    31a6:	f107 0801 	add.w	r8, r7, #1
    while (isdigit(*s) && log10Multiplier) {
    31aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    31ae:	f1be 0f09 	cmp.w	lr, #9
    31b2:	d826      	bhi.n	3202 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x122>
    31b4:	b33d      	cbz	r5, 3206 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x126>
    31b6:	f107 0e02 	add.w	lr, r7, #2
    31ba:	e000      	b.n	31be <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0xde>
    31bc:	b1fd      	cbz	r5, 31fe <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x11e>
      frac = 10 * frac + *s++ -'0';
    31be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    31c2:	462a      	mov	r2, r5
      --log10Multiplier;
    31c4:	b2e5      	uxtb	r5, r4
      frac = 10 * frac + *s++ -'0';
    31c6:	4677      	mov	r7, lr
    31c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    while (isdigit(*s) && log10Multiplier) {
    31cc:	f89e 3000 	ldrb.w	r3, [lr]
    31d0:	1e6c      	subs	r4, r5, #1
    31d2:	f10e 0e01 	add.w	lr, lr, #1
    31d6:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
      frac = 10 * frac + *s++ -'0';
    31da:	3830      	subs	r0, #48	; 0x30
    while (isdigit(*s) && log10Multiplier) {
    31dc:	f1b8 0f09 	cmp.w	r8, #9
    31e0:	d9ec      	bls.n	31bc <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0xdc>
  while (b--)
    31e2:	3a02      	subs	r2, #2
    31e4:	b2d2      	uxtb	r2, r2
    31e6:	b155      	cbz	r5, 31fe <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x11e>
    31e8:	2301      	movs	r3, #1
    31ea:	3a01      	subs	r2, #1
    r *= 10;
    31ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  while (b--)
    31f0:	b2d2      	uxtb	r2, r2
    r *= 10;
    31f2:	005b      	lsls	r3, r3, #1
  while (b--)
    31f4:	2aff      	cmp	r2, #255	; 0xff
    31f6:	d1f8      	bne.n	31ea <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x10a>
    r += frac;
    31f8:	fb00 cc03 	mla	ip, r0, r3, ip
    31fc:	e7bc      	b.n	3178 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x98>
    31fe:	4484      	add	ip, r0
    3200:	e7ba      	b.n	3178 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x98>
    ++s;
    3202:	4647      	mov	r7, r8
    3204:	e7ef      	b.n	31e6 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x106>
    3206:	4647      	mov	r7, r8
    r += frac;
    3208:	e7b6      	b.n	3178 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)+0x98>
    320a:	bf00      	nop

0000320c <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)>:
{
    320c:	b530      	push	{r4, r5, lr}
  if (*s == ',') {
    320e:	7804      	ldrb	r4, [r0, #0]
{
    3210:	b083      	sub	sp, #12
  if (*s == ',') {
    3212:	2c2c      	cmp	r4, #44	; 0x2c
    3214:	d025      	beq.n	3262 <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x56>
  while (len--)
    3216:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    321a:	4605      	mov	r5, r0
    321c:	fa5f fe8e 	uxtb.w	lr, lr
    3220:	b359      	cbz	r1, 327a <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x6e>
    3222:	4486      	add	lr, r0
    3224:	4684      	mov	ip, r0
  int r = 0;
    3226:	2300      	movs	r3, #0
    3228:	e001      	b.n	322e <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x22>
    r = 10 * r + *s++ - '0';
    322a:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
    322e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  while (len--)
    3232:	45e6      	cmp	lr, ip
    r = 10 * r + *s++ - '0';
    3234:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    3238:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  while (len--)
    323c:	d1f5      	bne.n	322a <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x1e>
  long r = parseUnsignedInt(s, degWidth) * 1000000L;
    323e:	4c10      	ldr	r4, [pc, #64]	; (3280 <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x74>)
    3240:	fb03 f404 	mul.w	r4, r3, r4
  r += parseFloat(s, 6, eptr) / 60;
    3244:	2300      	movs	r3, #0
    3246:	1868      	adds	r0, r5, r1
    3248:	2106      	movs	r1, #6
    324a:	f7ff ff49 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
    324e:	4a0d      	ldr	r2, [pc, #52]	; (3284 <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x78>)
    3250:	fb82 3200 	smull	r3, r2, r2, r0
    3254:	17c3      	asrs	r3, r0, #31
    3256:	4410      	add	r0, r2
    3258:	ebc3 1060 	rsb	r0, r3, r0, asr #5
    325c:	4420      	add	r0, r4
}
    325e:	b003      	add	sp, #12
    3260:	bd30      	pop	{r4, r5, pc}
    if (eptr)
    3262:	b142      	cbz	r2, 3276 <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x6a>
  if (s == nullptr)
    3264:	9201      	str	r2, [sp, #4]
    3266:	f7ff feb1 	bl	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>
      *eptr = skipField(s);
    326a:	9a01      	ldr	r2, [sp, #4]
    326c:	4603      	mov	r3, r0
    return 0;
    326e:	2000      	movs	r0, #0
      *eptr = skipField(s);
    3270:	6013      	str	r3, [r2, #0]
}
    3272:	b003      	add	sp, #12
    3274:	bd30      	pop	{r4, r5, pc}
    return 0;
    3276:	4610      	mov	r0, r2
    3278:	e7f1      	b.n	325e <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x52>
  while (len--)
    327a:	460c      	mov	r4, r1
    327c:	e7e2      	b.n	3244 <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)+0x38>
    327e:	bf00      	nop
    3280:	000f4240 	.word	0x000f4240
    3284:	88888889 	.word	0x88888889

00003288 <MicroNMEA::generateChecksum(char const*, char*)>:
  if (*s == '$')
    3288:	7803      	ldrb	r3, [r0, #0]
    328a:	2b24      	cmp	r3, #36	; 0x24
    328c:	d101      	bne.n	3292 <MicroNMEA::generateChecksum(char const*, char*)+0xa>
  while (*s != '\0' && *s != '*')
    328e:	7843      	ldrb	r3, [r0, #1]
    ++s;
    3290:	3001      	adds	r0, #1
  while (*s != '\0' && *s != '*')
    3292:	2b2a      	cmp	r3, #42	; 0x2a
    3294:	d019      	beq.n	32ca <MicroNMEA::generateChecksum(char const*, char*)+0x42>
    3296:	fab3 f283 	clz	r2, r3
    329a:	0952      	lsrs	r2, r2, #5
    329c:	b1ab      	cbz	r3, 32ca <MicroNMEA::generateChecksum(char const*, char*)+0x42>
    c ^= *s++;
    329e:	405a      	eors	r2, r3
  while (*s != '\0' && *s != '*')
    32a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    32a4:	b10b      	cbz	r3, 32aa <MicroNMEA::generateChecksum(char const*, char*)+0x22>
    32a6:	2b2a      	cmp	r3, #42	; 0x2a
    32a8:	d1f9      	bne.n	329e <MicroNMEA::generateChecksum(char const*, char*)+0x16>
  if (checksum) {
    32aa:	b169      	cbz	r1, 32c8 <MicroNMEA::generateChecksum(char const*, char*)+0x40>
    checksum[0] = toHex(c / 16);
    32ac:	0913      	lsrs	r3, r2, #4
  if (nibble >= 10)
    32ae:	2a9f      	cmp	r2, #159	; 0x9f
    checksum[1] = toHex(c % 16);
    32b0:	f002 020f 	and.w	r2, r2, #15
    return nibble + 'A' - 10;
    32b4:	bf8c      	ite	hi
    32b6:	3337      	addhi	r3, #55	; 0x37
    return nibble + '0';
    32b8:	3330      	addls	r3, #48	; 0x30
  if (nibble >= 10)
    32ba:	2a09      	cmp	r2, #9
    return nibble + '0';
    32bc:	b2db      	uxtb	r3, r3
    checksum[0] = toHex(c / 16);
    32be:	700b      	strb	r3, [r1, #0]
  if (nibble >= 10)
    32c0:	d908      	bls.n	32d4 <MicroNMEA::generateChecksum(char const*, char*)+0x4c>
    return nibble + 'A' - 10;
    32c2:	3237      	adds	r2, #55	; 0x37
    checksum[1] = toHex(c % 16);
    32c4:	704a      	strb	r2, [r1, #1]
    32c6:	4770      	bx	lr
}
    32c8:	4770      	bx	lr
  if (checksum) {
    32ca:	2900      	cmp	r1, #0
    32cc:	d0fc      	beq.n	32c8 <MicroNMEA::generateChecksum(char const*, char*)+0x40>
    checksum[0] = toHex(c / 16);
    32ce:	2330      	movs	r3, #48	; 0x30
    32d0:	2200      	movs	r2, #0
    32d2:	700b      	strb	r3, [r1, #0]
    return nibble + '0';
    32d4:	3230      	adds	r2, #48	; 0x30
    checksum[1] = toHex(c % 16);
    32d6:	704a      	strb	r2, [r1, #1]
    32d8:	4770      	bx	lr
    32da:	bf00      	nop

000032dc <MicroNMEA::MicroNMEA(void*, unsigned char)>:
  _unknownSentenceHandler(nullptr)
    32dc:	2300      	movs	r3, #0
  _bufferLen = len;
    32de:	7002      	strb	r2, [r0, #0]
MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
    32e0:	b410      	push	{r4}
  _unknownSentenceHandler(nullptr)
    32e2:	7303      	strb	r3, [r0, #12]
    32e4:	f8c0 300d 	str.w	r3, [r0, #13]
    32e8:	f8a0 3011 	strh.w	r3, [r0, #17]
    32ec:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  _ptr = _buffer;
    32f0:	e9c0 1101 	strd	r1, r1, [r0, #4]
  if (_bufferLen) {
    32f4:	b11a      	cbz	r2, 32fe <MicroNMEA::MicroNMEA(void*, unsigned char)+0x22>
    _buffer[_bufferLen - 1] = '\0';
    32f6:	440a      	add	r2, r1
    *_ptr = '\0';
    32f8:	700b      	strb	r3, [r1, #0]
    _buffer[_bufferLen - 1] = '\0';
    32fa:	f802 3c01 	strb.w	r3, [r2, #-1]
  _altitude = _speed = _course = LONG_MIN;
    32fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  _navSystem = '\0';
    3302:	2300      	movs	r3, #0
  _hour = _minute = _second = 99;
    3304:	4c0a      	ldr	r4, [pc, #40]	; (3330 <MicroNMEA::MicroNMEA(void*, unsigned char)+0x54>)
  _latitude = 999000000L;
    3306:	490b      	ldr	r1, [pc, #44]	; (3334 <MicroNMEA::MicroNMEA(void*, unsigned char)+0x58>)
  _altitude = _speed = _course = LONG_MIN;
    3308:	6202      	str	r2, [r0, #32]
  _navSystem = '\0';
    330a:	74c3      	strb	r3, [r0, #19]
  _isValid = false;
    330c:	7503      	strb	r3, [r0, #20]
  _altitudeValid = false;
    330e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_geoidHeightValid = false;
    3312:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  _altitude = _speed = _course = LONG_MIN;
    3316:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  _numSat = 0;
    331a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  _hour = _minute = _second = 99;
    331e:	e9c0 340e 	strd	r3, r4, [r0, #56]	; 0x38
  _longitude = 999000000L;
    3322:	e9c0 1106 	strd	r1, r1, [r0, #24]
}
    3326:	f85d 4b04 	ldr.w	r4, [sp], #4
  _numSat = 0;
    332a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
    332e:	4770      	bx	lr
    3330:	00636363 	.word	0x00636363
    3334:	3b8b87c0 	.word	0x3b8b87c0

00003338 <MicroNMEA::clear()>:
  _altitude = _speed = _course = LONG_MIN;
    3338:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  _navSystem = '\0';
    333c:	2300      	movs	r3, #0
  _latitude = 999000000L;
    333e:	490b      	ldr	r1, [pc, #44]	; (336c <MicroNMEA::clear()+0x34>)
  _altitude = _speed = _course = LONG_MIN;
    3340:	6202      	str	r2, [r0, #32]
  _navSystem = '\0';
    3342:	74c3      	strb	r3, [r0, #19]
  _isValid = false;
    3344:	7503      	strb	r3, [r0, #20]
  _altitudeValid = false;
    3346:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_geoidHeightValid = false;
    334a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
{
    334e:	b410      	push	{r4}
  _altitude = _speed = _course = LONG_MIN;
    3350:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  _hour = _minute = _second = 99;
    3354:	4c06      	ldr	r4, [pc, #24]	; (3370 <MicroNMEA::clear()+0x38>)
  _numSat = 0;
    3356:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  _hour = _minute = _second = 99;
    335a:	e9c0 340e 	strd	r3, r4, [r0, #56]	; 0x38
  _longitude = 999000000L;
    335e:	e9c0 1106 	strd	r1, r1, [r0, #24]
}
    3362:	f85d 4b04 	ldr.w	r4, [sp], #4
  _numSat = 0;
    3366:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
    336a:	4770      	bx	lr
    336c:	3b8b87c0 	.word	0x3b8b87c0
    3370:	00636363 	.word	0x00636363

00003374 <MicroNMEA::parseDate(char const*)>:
}


const char* MicroNMEA::parseDate(const char* s)
{
  if (*s == ',')
    3374:	780b      	ldrb	r3, [r1, #0]
{
    3376:	4602      	mov	r2, r0
  if (*s == ',')
    3378:	2b2c      	cmp	r3, #44	; 0x2c
    337a:	d021      	beq.n	33c0 <MicroNMEA::parseDate(char const*)+0x4c>
    r = 10 * r + *s++ - '0';
    337c:	3b30      	subs	r3, #48	; 0x30
    337e:	f891 c001 	ldrb.w	ip, [r1, #1]
    3382:	1d88      	adds	r0, r1, #6
    3384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3388:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
    338c:	3b30      	subs	r3, #48	; 0x30
    return skipField(s);
  _day = parseUnsignedInt(s, 2);
    338e:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
    r = 10 * r + *s++ - '0';
    3392:	788b      	ldrb	r3, [r1, #2]
    3394:	f891 c003 	ldrb.w	ip, [r1, #3]
    3398:	3b30      	subs	r3, #48	; 0x30
    339a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    339e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
    33a2:	3b30      	subs	r3, #48	; 0x30
  _month = parseUnsignedInt(s + 2, 2);
    33a4:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
    r = 10 * r + *s++ - '0';
    33a8:	790b      	ldrb	r3, [r1, #4]
    33aa:	7949      	ldrb	r1, [r1, #5]
    33ac:	3b30      	subs	r3, #48	; 0x30
    33ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    33b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  _year = parseUnsignedInt(s + 4, 2) + 2000;
    33b6:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
    33ba:	8713      	strh	r3, [r2, #56]	; 0x38
  if (s == nullptr)
    33bc:	f7ff be06 	b.w	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>
    33c0:	4608      	mov	r0, r1
    33c2:	f7ff be03 	b.w	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>
    33c6:	bf00      	nop

000033c8 <MicroNMEA::processGGA(char const*)>:
  return skipField(s + 6);
}


bool MicroNMEA::processGGA(const char *s)
{
    33c8:	b510      	push	{r4, lr}
  // If GxGSV messages are received _talker_ID can be changed after
  // other MicroNMEA sentences. Compatibility modes can set the talker ID
  // to indicate GPS regardless of actual navigation system used.
  _navSystem = _talkerID;
    33ca:	7b02      	ldrb	r2, [r0, #12]
{
    33cc:	b084      	sub	sp, #16
    33ce:	4604      	mov	r4, r0
    33d0:	9101      	str	r1, [sp, #4]
  _navSystem = _talkerID;
    33d2:	74c2      	strb	r2, [r0, #19]
  if (*s == ',')
    33d4:	780a      	ldrb	r2, [r1, #0]
    33d6:	2a2c      	cmp	r2, #44	; 0x2c
    33d8:	d06c      	beq.n	34b4 <MicroNMEA::processGGA(char const*)+0xec>
    33da:	f7ff fe13 	bl	3004 <MicroNMEA::parseTime(char const*) [clone .part.0]>

  s = parseTime(s);
    33de:	9001      	str	r0, [sp, #4]
  if (s == nullptr)
    33e0:	2800      	cmp	r0, #0
    33e2:	d064      	beq.n	34ae <MicroNMEA::processGGA(char const*)+0xe6>
    return false;
  // ++s;
  _latitude = parseDegreeMinute(s, 2, &s);
    33e4:	2102      	movs	r1, #2
    33e6:	aa01      	add	r2, sp, #4
    33e8:	f7ff ff10 	bl	320c <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)>
  if (s == nullptr)
    33ec:	9b01      	ldr	r3, [sp, #4]
  _latitude = parseDegreeMinute(s, 2, &s);
    33ee:	61a0      	str	r0, [r4, #24]
  if (s == nullptr)
    33f0:	2b00      	cmp	r3, #0
    33f2:	d05c      	beq.n	34ae <MicroNMEA::processGGA(char const*)+0xe6>
    return false;
  if (*s == ',')
    33f4:	781a      	ldrb	r2, [r3, #0]
    33f6:	2a2c      	cmp	r2, #44	; 0x2c
    33f8:	d060      	beq.n	34bc <MicroNMEA::processGGA(char const*)+0xf4>
    ++s;
  else {
    if (*s == 'S')
    33fa:	2a53      	cmp	r2, #83	; 0x53
    33fc:	d101      	bne.n	3402 <MicroNMEA::processGGA(char const*)+0x3a>
      _latitude *= -1;
    33fe:	4240      	negs	r0, r0
    3400:	61a0      	str	r0, [r4, #24]
    s += 2; // Skip N/S and comma
    3402:	1c98      	adds	r0, r3, #2
    3404:	9001      	str	r0, [sp, #4]
  }
  _longitude = parseDegreeMinute(s, 3, &s);
    3406:	aa01      	add	r2, sp, #4
    3408:	2103      	movs	r1, #3
    340a:	f7ff feff 	bl	320c <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)>
  if (s == nullptr)
    340e:	9b01      	ldr	r3, [sp, #4]
  _longitude = parseDegreeMinute(s, 3, &s);
    3410:	61e0      	str	r0, [r4, #28]
  if (s == nullptr)
    3412:	2b00      	cmp	r3, #0
    3414:	d04b      	beq.n	34ae <MicroNMEA::processGGA(char const*)+0xe6>
    return false;
  if (*s == ',')
    3416:	781a      	ldrb	r2, [r3, #0]
    3418:	2a2c      	cmp	r2, #44	; 0x2c
    341a:	d052      	beq.n	34c2 <MicroNMEA::processGGA(char const*)+0xfa>
    ++s;
  else {
    if (*s == 'W')
    341c:	2a57      	cmp	r2, #87	; 0x57
    341e:	d101      	bne.n	3424 <MicroNMEA::processGGA(char const*)+0x5c>
      _longitude *= -1;
    3420:	4240      	negs	r0, r0
    3422:	61e0      	str	r0, [r4, #28]
    s += 2; // Skip E/W and comma
    3424:	1c98      	adds	r0, r3, #2
    3426:	9001      	str	r0, [sp, #4]
  }
  _isValid = (*s >= '1' && *s <= '5');
    3428:	f810 1b02 	ldrb.w	r1, [r0], #2
  s += 2; // Skip position fix flag and comma
  long tmp = parseFloat(s, 0, &s);
    342c:	2300      	movs	r3, #0
    342e:	aa01      	add	r2, sp, #4
  _isValid = (*s >= '1' && *s <= '5');
    3430:	3931      	subs	r1, #49	; 0x31
  s += 2; // Skip position fix flag and comma
    3432:	9001      	str	r0, [sp, #4]
  _isValid = (*s >= '1' && *s <= '5');
    3434:	2904      	cmp	r1, #4
    3436:	bf8c      	ite	hi
    3438:	2100      	movhi	r1, #0
    343a:	2101      	movls	r1, #1
    343c:	7521      	strb	r1, [r4, #20]
  long tmp = parseFloat(s, 0, &s);
    343e:	4619      	mov	r1, r3
    3440:	f7ff fe4e 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
  _numSat = (tmp > 255 ? 255 : (tmp < 0 ? 0 : tmp));
  if (s == nullptr)
    3444:	9901      	ldr	r1, [sp, #4]
  _numSat = (tmp > 255 ? 255 : (tmp < 0 ? 0 : tmp));
    3446:	f380 0308 	usat	r3, #8, r0
    344a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if (s == nullptr)
    344e:	b371      	cbz	r1, 34ae <MicroNMEA::processGGA(char const*)+0xe6>
    return false;
  tmp = parseFloat(s, 1, &s);
    3450:	2300      	movs	r3, #0
    3452:	4608      	mov	r0, r1
    3454:	aa01      	add	r2, sp, #4
    3456:	2101      	movs	r1, #1
    3458:	f7ff fe42 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
  _hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
    345c:	28ff      	cmp	r0, #255	; 0xff
  if (s == nullptr)
    345e:	9b01      	ldr	r3, [sp, #4]
  _hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
    3460:	bf28      	it	cs
    3462:	20ff      	movcs	r0, #255	; 0xff
    3464:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (s == nullptr)
    3468:	b30b      	cbz	r3, 34ae <MicroNMEA::processGGA(char const*)+0xe6>
    return false;
  bool resultValid;
  _altitude = parseFloat(s, 3, &s, &resultValid);
    346a:	4618      	mov	r0, r3
    346c:	aa01      	add	r2, sp, #4
    346e:	f10d 030f 	add.w	r3, sp, #15
    3472:	2103      	movs	r1, #3
    3474:	f7ff fe34 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
  if (s == nullptr)
    3478:	9b01      	ldr	r3, [sp, #4]
  _altitude = parseFloat(s, 3, &s, &resultValid);
    347a:	6220      	str	r0, [r4, #32]
  if (s == nullptr)
    347c:	b1bb      	cbz	r3, 34ae <MicroNMEA::processGGA(char const*)+0xe6>
    return false;
  if (resultValid) _altitudeValid = true;
    347e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    3482:	b112      	cbz	r2, 348a <MicroNMEA::processGGA(char const*)+0xc2>
    3484:	2201      	movs	r2, #1
    3486:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	s += 2; // Skip M and comma
    348a:	1c98      	adds	r0, r3, #2
	_geoidHeight = parseFloat(s, 3, &s, &resultValid);
    348c:	aa01      	add	r2, sp, #4
    348e:	f10d 030f 	add.w	r3, sp, #15
    3492:	2103      	movs	r1, #3
	s += 2; // Skip M and comma
    3494:	9001      	str	r0, [sp, #4]
	_geoidHeight = parseFloat(s, 3, &s, &resultValid);
    3496:	f7ff fe23 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
	if (s == nullptr)
    349a:	9b01      	ldr	r3, [sp, #4]
	_geoidHeight = parseFloat(s, 3, &s, &resultValid);
    349c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (s == nullptr)
    349e:	b133      	cbz	r3, 34ae <MicroNMEA::processGGA(char const*)+0xe6>
		return false;
	if (resultValid) _geoidHeightValid = true;
    34a0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    34a4:	b180      	cbz	r0, 34c8 <MicroNMEA::processGGA(char const*)+0x100>
    34a6:	2301      	movs	r3, #1
    34a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    34ac:	e000      	b.n	34b0 <MicroNMEA::processGGA(char const*)+0xe8>
    return false;
    34ae:	2000      	movs	r0, #0
  // That's all we care about
  return true;
}
    34b0:	b004      	add	sp, #16
    34b2:	bd10      	pop	{r4, pc}
  if (s == nullptr)
    34b4:	4608      	mov	r0, r1
    34b6:	f7ff fd89 	bl	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>
    return skipField(s);
    34ba:	e790      	b.n	33de <MicroNMEA::processGGA(char const*)+0x16>
    ++s;
    34bc:	1c58      	adds	r0, r3, #1
    34be:	9001      	str	r0, [sp, #4]
    34c0:	e7a1      	b.n	3406 <MicroNMEA::processGGA(char const*)+0x3e>
    ++s;
    34c2:	1c58      	adds	r0, r3, #1
    34c4:	9001      	str	r0, [sp, #4]
    34c6:	e7af      	b.n	3428 <MicroNMEA::processGGA(char const*)+0x60>
  return true;
    34c8:	2001      	movs	r0, #1
    34ca:	e7f1      	b.n	34b0 <MicroNMEA::processGGA(char const*)+0xe8>

000034cc <MicroNMEA::processRMC(char const*)>:


bool MicroNMEA::processRMC(const char* s)
{
    34cc:	b530      	push	{r4, r5, lr}
  // If GxGSV messages are received _talker_ID can be changed after
  // other MicroNMEA sentences. Compatibility modes can set the talker
  // ID to indicate GPS regardless of actual navigation system used.
  _navSystem = _talkerID;
    34ce:	7b02      	ldrb	r2, [r0, #12]
{
    34d0:	b083      	sub	sp, #12
    34d2:	4604      	mov	r4, r0
    34d4:	9101      	str	r1, [sp, #4]
  _navSystem = _talkerID;
    34d6:	74c2      	strb	r2, [r0, #19]
  if (*s == ',')
    34d8:	780a      	ldrb	r2, [r1, #0]
    34da:	2a2c      	cmp	r2, #44	; 0x2c
    34dc:	d047      	beq.n	356e <MicroNMEA::processRMC(char const*)+0xa2>
    34de:	f7ff fd91 	bl	3004 <MicroNMEA::parseTime(char const*) [clone .part.0]>

  s = parseTime(s);
    34e2:	9001      	str	r0, [sp, #4]
  if (s == nullptr)
    34e4:	2800      	cmp	r0, #0
    34e6:	d03f      	beq.n	3568 <MicroNMEA::processRMC(char const*)+0x9c>
    return false;
  _isValid = (*s == 'A');
    34e8:	f810 3b02 	ldrb.w	r3, [r0], #2
  s += 2; // Skip validity and comma
  _latitude = parseDegreeMinute(s, 2, &s);
    34ec:	2102      	movs	r1, #2
    34ee:	aa01      	add	r2, sp, #4
  _isValid = (*s == 'A');
    34f0:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
  s += 2; // Skip validity and comma
    34f4:	9001      	str	r0, [sp, #4]
  _isValid = (*s == 'A');
    34f6:	fab3 f383 	clz	r3, r3
    34fa:	095b      	lsrs	r3, r3, #5
    34fc:	7523      	strb	r3, [r4, #20]
  _latitude = parseDegreeMinute(s, 2, &s);
    34fe:	f7ff fe85 	bl	320c <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)>
  if (s == nullptr)
    3502:	9b01      	ldr	r3, [sp, #4]
  _latitude = parseDegreeMinute(s, 2, &s);
    3504:	61a0      	str	r0, [r4, #24]
  if (s == nullptr)
    3506:	b37b      	cbz	r3, 3568 <MicroNMEA::processRMC(char const*)+0x9c>
    return false;
  if (*s == ',')
    3508:	781a      	ldrb	r2, [r3, #0]
    350a:	2a2c      	cmp	r2, #44	; 0x2c
    350c:	d033      	beq.n	3576 <MicroNMEA::processRMC(char const*)+0xaa>
    ++s;
  else {
    if (*s == 'S')
    350e:	2a53      	cmp	r2, #83	; 0x53
    3510:	d101      	bne.n	3516 <MicroNMEA::processRMC(char const*)+0x4a>
      _latitude *= -1;
    3512:	4240      	negs	r0, r0
    3514:	61a0      	str	r0, [r4, #24]
    s += 2; // Skip N/S and comma
    3516:	1c98      	adds	r0, r3, #2
    3518:	9001      	str	r0, [sp, #4]
  }
  _longitude = parseDegreeMinute(s, 3, &s);
    351a:	aa01      	add	r2, sp, #4
    351c:	2103      	movs	r1, #3
    351e:	f7ff fe75 	bl	320c <MicroNMEA::parseDegreeMinute(char const*, unsigned char, char const**)>
  if (s == nullptr)
    3522:	9b01      	ldr	r3, [sp, #4]
  _longitude = parseDegreeMinute(s, 3, &s);
    3524:	61e0      	str	r0, [r4, #28]
  if (s == nullptr)
    3526:	b1fb      	cbz	r3, 3568 <MicroNMEA::processRMC(char const*)+0x9c>
    return false;
  if (*s == ',')
    3528:	781a      	ldrb	r2, [r3, #0]
    352a:	2a2c      	cmp	r2, #44	; 0x2c
    352c:	d026      	beq.n	357c <MicroNMEA::processRMC(char const*)+0xb0>
    ++s;
  else {
    if (*s == 'W')
    352e:	2a57      	cmp	r2, #87	; 0x57
    3530:	d101      	bne.n	3536 <MicroNMEA::processRMC(char const*)+0x6a>
      _longitude *= -1;
    3532:	4240      	negs	r0, r0
    3534:	61e0      	str	r0, [r4, #28]
    s += 2; // Skip E/W and comma
    3536:	1c98      	adds	r0, r3, #2
    3538:	9001      	str	r0, [sp, #4]
  }
  _speed = parseFloat(s, 3, &s);
    353a:	2300      	movs	r3, #0
    353c:	aa01      	add	r2, sp, #4
    353e:	2103      	movs	r1, #3
    3540:	f7ff fdce 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
  if (s == nullptr)
    3544:	9d01      	ldr	r5, [sp, #4]
  _speed = parseFloat(s, 3, &s);
    3546:	6320      	str	r0, [r4, #48]	; 0x30
  if (s == nullptr)
    3548:	b175      	cbz	r5, 3568 <MicroNMEA::processRMC(char const*)+0x9c>
    return false;
  _course = parseFloat(s, 3, &s);
    354a:	2103      	movs	r1, #3
    354c:	2300      	movs	r3, #0
    354e:	aa01      	add	r2, sp, #4
    3550:	4628      	mov	r0, r5
    3552:	f7ff fdc5 	bl	30e0 <MicroNMEA::parseFloat(char const*, unsigned char, char const**, bool*)>
  if (s == nullptr)
    3556:	9901      	ldr	r1, [sp, #4]
  _course = parseFloat(s, 3, &s);
    3558:	6360      	str	r0, [r4, #52]	; 0x34
  if (s == nullptr)
    355a:	b129      	cbz	r1, 3568 <MicroNMEA::processRMC(char const*)+0x9c>
    return false;
  s = parseDate(s);
    355c:	4620      	mov	r0, r4
    355e:	f7ff ff09 	bl	3374 <MicroNMEA::parseDate(char const*)>
  // That's all we care about
  return true;
    3562:	2001      	movs	r0, #1
}
    3564:	b003      	add	sp, #12
    3566:	bd30      	pop	{r4, r5, pc}
    return false;
    3568:	2000      	movs	r0, #0
}
    356a:	b003      	add	sp, #12
    356c:	bd30      	pop	{r4, r5, pc}
  if (s == nullptr)
    356e:	4608      	mov	r0, r1
    3570:	f7ff fd2c 	bl	2fcc <MicroNMEA::skipField(char const*) [clone .part.0]>
    return skipField(s);
    3574:	e7b5      	b.n	34e2 <MicroNMEA::processRMC(char const*)+0x16>
    ++s;
    3576:	1c58      	adds	r0, r3, #1
    3578:	9001      	str	r0, [sp, #4]
    357a:	e7ce      	b.n	351a <MicroNMEA::processRMC(char const*)+0x4e>
    ++s;
    357c:	1c58      	adds	r0, r3, #1
    357e:	9001      	str	r0, [sp, #4]
    3580:	e7db      	b.n	353a <MicroNMEA::processRMC(char const*)+0x6e>
    3582:	bf00      	nop

00003584 <MicroNMEA::process(char)>:
  if (_buffer == nullptr || _bufferLen == 0)
    3584:	6843      	ldr	r3, [r0, #4]
    3586:	2b00      	cmp	r3, #0
    3588:	d039      	beq.n	35fe <MicroNMEA::process(char)+0x7a>
{
    358a:	b570      	push	{r4, r5, r6, lr}
  if (_buffer == nullptr || _bufferLen == 0)
    358c:	7803      	ldrb	r3, [r0, #0]
{
    358e:	b082      	sub	sp, #8
    3590:	4604      	mov	r4, r0
  if (_buffer == nullptr || _bufferLen == 0)
    3592:	b1db      	cbz	r3, 35cc <MicroNMEA::process(char)+0x48>
  if (c == '\0' || c == '\n' || c == '\r') {
    3594:	290d      	cmp	r1, #13
    3596:	d81c      	bhi.n	35d2 <MicroNMEA::process(char)+0x4e>
    3598:	f242 4301 	movw	r3, #9217	; 0x2401
    359c:	40cb      	lsrs	r3, r1
    359e:	43db      	mvns	r3, r3
    35a0:	f013 0501 	ands.w	r5, r3, #1
    35a4:	d115      	bne.n	35d2 <MicroNMEA::process(char)+0x4e>
    *_ptr = '\0';
    35a6:	6883      	ldr	r3, [r0, #8]
    35a8:	701d      	strb	r5, [r3, #0]
    _ptr = _buffer;
    35aa:	6840      	ldr	r0, [r0, #4]
    35ac:	60a0      	str	r0, [r4, #8]
    if (*_buffer == '$' && testChecksum(_buffer)) {
    35ae:	7803      	ldrb	r3, [r0, #0]
    35b0:	2b24      	cmp	r3, #36	; 0x24
    35b2:	d01b      	beq.n	35ec <MicroNMEA::process(char)+0x68>
      if (_badChecksumHandler && *_buffer != '\0') // don't send empty buffers as bad checksums!
    35b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    35b6:	b122      	cbz	r2, 35c2 <MicroNMEA::process(char)+0x3e>
    35b8:	b11b      	cbz	r3, 35c2 <MicroNMEA::process(char)+0x3e>
        (*_badChecksumHandler)(*this);
    35ba:	4620      	mov	r0, r4
    35bc:	4790      	blx	r2
    return *_buffer != '\0'; //
    35be:	6863      	ldr	r3, [r4, #4]
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	1e18      	subs	r0, r3, #0
    35c4:	bf18      	it	ne
    35c6:	2001      	movne	r0, #1
}
    35c8:	b002      	add	sp, #8
    35ca:	bd70      	pop	{r4, r5, r6, pc}
    return false;
    35cc:	2000      	movs	r0, #0
}
    35ce:	b002      	add	sp, #8
    35d0:	bd70      	pop	{r4, r5, r6, pc}
    *_ptr = c;
    35d2:	68a3      	ldr	r3, [r4, #8]
    35d4:	7019      	strb	r1, [r3, #0]
    if (_ptr < &_buffer[_bufferLen - 1])
    35d6:	7822      	ldrb	r2, [r4, #0]
    35d8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    35dc:	3a01      	subs	r2, #1
    35de:	4413      	add	r3, r2
    35e0:	4299      	cmp	r1, r3
    35e2:	d2f3      	bcs.n	35cc <MicroNMEA::process(char)+0x48>
      ++_ptr;
    35e4:	3101      	adds	r1, #1
  return false;
    35e6:	2000      	movs	r0, #0
      ++_ptr;
    35e8:	60a1      	str	r1, [r4, #8]
    35ea:	e7ed      	b.n	35c8 <MicroNMEA::process(char)+0x44>
  const char* p = generateChecksum(s, checksum);
    35ec:	a901      	add	r1, sp, #4
    35ee:	f7ff fe4b 	bl	3288 <MicroNMEA::generateChecksum(char const*, char*)>
  return *p == '*' && p[1] == checksum[0] && p[2] == checksum[1];
    35f2:	7803      	ldrb	r3, [r0, #0]
    35f4:	2b2a      	cmp	r3, #42	; 0x2a
    35f6:	d004      	beq.n	3602 <MicroNMEA::process(char)+0x7e>
      if (_badChecksumHandler && *_buffer != '\0') // don't send empty buffers as bad checksums!
    35f8:	6863      	ldr	r3, [r4, #4]
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	e7da      	b.n	35b4 <MicroNMEA::process(char)+0x30>
    return false;
    35fe:	2000      	movs	r0, #0
}
    3600:	4770      	bx	lr
  return *p == '*' && p[1] == checksum[0] && p[2] == checksum[1];
    3602:	7842      	ldrb	r2, [r0, #1]
    3604:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3608:	429a      	cmp	r2, r3
    360a:	d1f5      	bne.n	35f8 <MicroNMEA::process(char)+0x74>
    360c:	7882      	ldrb	r2, [r0, #2]
    360e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3612:	429a      	cmp	r2, r3
    3614:	d1f0      	bne.n	35f8 <MicroNMEA::process(char)+0x74>
      if (_buffer[1] == 'G') {
    3616:	6860      	ldr	r0, [r4, #4]
    3618:	7843      	ldrb	r3, [r0, #1]
    361a:	2b47      	cmp	r3, #71	; 0x47
    361c:	d022      	beq.n	3664 <MicroNMEA::process(char)+0xe0>
        data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
    361e:	f104 060d 	add.w	r6, r4, #13
        _talkerID = '\0';
    3622:	7325      	strb	r5, [r4, #12]
    3624:	2206      	movs	r2, #6
  if (s == nullptr)
    3626:	3001      	adds	r0, #1
    3628:	4631      	mov	r1, r6
    362a:	f7ff fd1b 	bl	3064 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]>
    362e:	4605      	mov	r5, r0
      if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
    3630:	b185      	cbz	r5, 3654 <MicroNMEA::process(char)+0xd0>
    3632:	4915      	ldr	r1, [pc, #84]	; (3688 <MicroNMEA::process(char)+0x104>)
    3634:	4630      	mov	r0, r6
    3636:	f000 f967 	bl	3908 <strcmp>
    363a:	b1f0      	cbz	r0, 367a <MicroNMEA::process(char)+0xf6>
      else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
    363c:	4913      	ldr	r1, [pc, #76]	; (368c <MicroNMEA::process(char)+0x108>)
    363e:	4630      	mov	r0, r6
    3640:	f000 f962 	bl	3908 <strcmp>
    3644:	b930      	cbnz	r0, 3654 <MicroNMEA::process(char)+0xd0>
        return processRMC(data);
    3646:	4629      	mov	r1, r5
    3648:	4620      	mov	r0, r4
}
    364a:	b002      	add	sp, #8
    364c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return processRMC(data);
    3650:	f7ff bf3c 	b.w	34cc <MicroNMEA::processRMC(char const*)>
      else if (_unknownSentenceHandler)
    3654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3656:	2b00      	cmp	r3, #0
    3658:	d0b1      	beq.n	35be <MicroNMEA::process(char)+0x3a>
        (*_unknownSentenceHandler)(*this);
    365a:	4620      	mov	r0, r4
    365c:	4798      	blx	r3
    return *_buffer != '\0'; //
    365e:	6863      	ldr	r3, [r4, #4]
    3660:	781b      	ldrb	r3, [r3, #0]
    3662:	e7ae      	b.n	35c2 <MicroNMEA::process(char)+0x3e>
        _talkerID = _buffer[2];
    3664:	7883      	ldrb	r3, [r0, #2]
        data = parseField(&_buffer[3], &_messageID[0], sizeof(_messageID));
    3666:	f104 060d 	add.w	r6, r4, #13
    366a:	2206      	movs	r2, #6
    366c:	3003      	adds	r0, #3
    366e:	4631      	mov	r1, r6
        _talkerID = _buffer[2];
    3670:	7323      	strb	r3, [r4, #12]
  if (s == nullptr)
    3672:	f7ff fcf7 	bl	3064 <MicroNMEA::parseField(char const*, char*, int) [clone .part.0]>
    3676:	4605      	mov	r5, r0
    3678:	e7da      	b.n	3630 <MicroNMEA::process(char)+0xac>
        return processGGA(data);
    367a:	4629      	mov	r1, r5
    367c:	4620      	mov	r0, r4
}
    367e:	b002      	add	sp, #8
    3680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return processGGA(data);
    3684:	f7ff bea0 	b.w	33c8 <MicroNMEA::processGGA(char const*)>
    3688:	20000370 	.word	0x20000370
    368c:	20000374 	.word	0x20000374

00003690 <__aeabi_atexit>:
    3690:	4603      	mov	r3, r0
    3692:	4608      	mov	r0, r1
    3694:	4619      	mov	r1, r3
    3696:	f000 b801 	b.w	369c <__cxa_atexit>
    369a:	bf00      	nop

0000369c <__cxa_atexit>:
    369c:	4613      	mov	r3, r2
    369e:	460a      	mov	r2, r1
    36a0:	4601      	mov	r1, r0
    36a2:	2002      	movs	r0, #2
    36a4:	f000 bb1a 	b.w	3cdc <__register_exitproc>

000036a8 <__errno>:
    36a8:	4b01      	ldr	r3, [pc, #4]	; (36b0 <__errno+0x8>)
    36aa:	6818      	ldr	r0, [r3, #0]
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop
    36b0:	20001098 	.word	0x20001098

000036b4 <__libc_init_array>:
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	4e0d      	ldr	r6, [pc, #52]	; (36ec <__libc_init_array+0x38>)
    36b8:	4d0d      	ldr	r5, [pc, #52]	; (36f0 <__libc_init_array+0x3c>)
    36ba:	1b76      	subs	r6, r6, r5
    36bc:	10b6      	asrs	r6, r6, #2
    36be:	d006      	beq.n	36ce <__libc_init_array+0x1a>
    36c0:	2400      	movs	r4, #0
    36c2:	f855 3b04 	ldr.w	r3, [r5], #4
    36c6:	3401      	adds	r4, #1
    36c8:	4798      	blx	r3
    36ca:	42a6      	cmp	r6, r4
    36cc:	d1f9      	bne.n	36c2 <__libc_init_array+0xe>
    36ce:	4e09      	ldr	r6, [pc, #36]	; (36f4 <__libc_init_array+0x40>)
    36d0:	4d09      	ldr	r5, [pc, #36]	; (36f8 <__libc_init_array+0x44>)
    36d2:	1b76      	subs	r6, r6, r5
    36d4:	f000 fb50 	bl	3d78 <___init_veneer>
    36d8:	10b6      	asrs	r6, r6, #2
    36da:	d006      	beq.n	36ea <__libc_init_array+0x36>
    36dc:	2400      	movs	r4, #0
    36de:	f855 3b04 	ldr.w	r3, [r5], #4
    36e2:	3401      	adds	r4, #1
    36e4:	4798      	blx	r3
    36e6:	42a6      	cmp	r6, r4
    36e8:	d1f9      	bne.n	36de <__libc_init_array+0x2a>
    36ea:	bd70      	pop	{r4, r5, r6, pc}
    36ec:	60001e40 	.word	0x60001e40
    36f0:	60001e40 	.word	0x60001e40
    36f4:	60001e74 	.word	0x60001e74
    36f8:	60001e40 	.word	0x60001e40

000036fc <isspace>:
    36fc:	4b02      	ldr	r3, [pc, #8]	; (3708 <isspace+0xc>)
    36fe:	4418      	add	r0, r3
    3700:	7840      	ldrb	r0, [r0, #1]
    3702:	f000 0008 	and.w	r0, r0, #8
    3706:	4770      	bx	lr
    3708:	200003dc 	.word	0x200003dc

0000370c <memcpy>:
    370c:	4684      	mov	ip, r0
    370e:	ea41 0300 	orr.w	r3, r1, r0
    3712:	f013 0303 	ands.w	r3, r3, #3
    3716:	d16d      	bne.n	37f4 <memcpy+0xe8>
    3718:	3a40      	subs	r2, #64	; 0x40
    371a:	d341      	bcc.n	37a0 <memcpy+0x94>
    371c:	f851 3b04 	ldr.w	r3, [r1], #4
    3720:	f840 3b04 	str.w	r3, [r0], #4
    3724:	f851 3b04 	ldr.w	r3, [r1], #4
    3728:	f840 3b04 	str.w	r3, [r0], #4
    372c:	f851 3b04 	ldr.w	r3, [r1], #4
    3730:	f840 3b04 	str.w	r3, [r0], #4
    3734:	f851 3b04 	ldr.w	r3, [r1], #4
    3738:	f840 3b04 	str.w	r3, [r0], #4
    373c:	f851 3b04 	ldr.w	r3, [r1], #4
    3740:	f840 3b04 	str.w	r3, [r0], #4
    3744:	f851 3b04 	ldr.w	r3, [r1], #4
    3748:	f840 3b04 	str.w	r3, [r0], #4
    374c:	f851 3b04 	ldr.w	r3, [r1], #4
    3750:	f840 3b04 	str.w	r3, [r0], #4
    3754:	f851 3b04 	ldr.w	r3, [r1], #4
    3758:	f840 3b04 	str.w	r3, [r0], #4
    375c:	f851 3b04 	ldr.w	r3, [r1], #4
    3760:	f840 3b04 	str.w	r3, [r0], #4
    3764:	f851 3b04 	ldr.w	r3, [r1], #4
    3768:	f840 3b04 	str.w	r3, [r0], #4
    376c:	f851 3b04 	ldr.w	r3, [r1], #4
    3770:	f840 3b04 	str.w	r3, [r0], #4
    3774:	f851 3b04 	ldr.w	r3, [r1], #4
    3778:	f840 3b04 	str.w	r3, [r0], #4
    377c:	f851 3b04 	ldr.w	r3, [r1], #4
    3780:	f840 3b04 	str.w	r3, [r0], #4
    3784:	f851 3b04 	ldr.w	r3, [r1], #4
    3788:	f840 3b04 	str.w	r3, [r0], #4
    378c:	f851 3b04 	ldr.w	r3, [r1], #4
    3790:	f840 3b04 	str.w	r3, [r0], #4
    3794:	f851 3b04 	ldr.w	r3, [r1], #4
    3798:	f840 3b04 	str.w	r3, [r0], #4
    379c:	3a40      	subs	r2, #64	; 0x40
    379e:	d2bd      	bcs.n	371c <memcpy+0x10>
    37a0:	3230      	adds	r2, #48	; 0x30
    37a2:	d311      	bcc.n	37c8 <memcpy+0xbc>
    37a4:	f851 3b04 	ldr.w	r3, [r1], #4
    37a8:	f840 3b04 	str.w	r3, [r0], #4
    37ac:	f851 3b04 	ldr.w	r3, [r1], #4
    37b0:	f840 3b04 	str.w	r3, [r0], #4
    37b4:	f851 3b04 	ldr.w	r3, [r1], #4
    37b8:	f840 3b04 	str.w	r3, [r0], #4
    37bc:	f851 3b04 	ldr.w	r3, [r1], #4
    37c0:	f840 3b04 	str.w	r3, [r0], #4
    37c4:	3a10      	subs	r2, #16
    37c6:	d2ed      	bcs.n	37a4 <memcpy+0x98>
    37c8:	320c      	adds	r2, #12
    37ca:	d305      	bcc.n	37d8 <memcpy+0xcc>
    37cc:	f851 3b04 	ldr.w	r3, [r1], #4
    37d0:	f840 3b04 	str.w	r3, [r0], #4
    37d4:	3a04      	subs	r2, #4
    37d6:	d2f9      	bcs.n	37cc <memcpy+0xc0>
    37d8:	3204      	adds	r2, #4
    37da:	d008      	beq.n	37ee <memcpy+0xe2>
    37dc:	07d2      	lsls	r2, r2, #31
    37de:	bf1c      	itt	ne
    37e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    37e4:	f800 3b01 	strbne.w	r3, [r0], #1
    37e8:	d301      	bcc.n	37ee <memcpy+0xe2>
    37ea:	880b      	ldrh	r3, [r1, #0]
    37ec:	8003      	strh	r3, [r0, #0]
    37ee:	4660      	mov	r0, ip
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop
    37f4:	2a08      	cmp	r2, #8
    37f6:	d313      	bcc.n	3820 <memcpy+0x114>
    37f8:	078b      	lsls	r3, r1, #30
    37fa:	d08d      	beq.n	3718 <memcpy+0xc>
    37fc:	f010 0303 	ands.w	r3, r0, #3
    3800:	d08a      	beq.n	3718 <memcpy+0xc>
    3802:	f1c3 0304 	rsb	r3, r3, #4
    3806:	1ad2      	subs	r2, r2, r3
    3808:	07db      	lsls	r3, r3, #31
    380a:	bf1c      	itt	ne
    380c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3810:	f800 3b01 	strbne.w	r3, [r0], #1
    3814:	d380      	bcc.n	3718 <memcpy+0xc>
    3816:	f831 3b02 	ldrh.w	r3, [r1], #2
    381a:	f820 3b02 	strh.w	r3, [r0], #2
    381e:	e77b      	b.n	3718 <memcpy+0xc>
    3820:	3a04      	subs	r2, #4
    3822:	d3d9      	bcc.n	37d8 <memcpy+0xcc>
    3824:	3a01      	subs	r2, #1
    3826:	f811 3b01 	ldrb.w	r3, [r1], #1
    382a:	f800 3b01 	strb.w	r3, [r0], #1
    382e:	d2f9      	bcs.n	3824 <memcpy+0x118>
    3830:	780b      	ldrb	r3, [r1, #0]
    3832:	7003      	strb	r3, [r0, #0]
    3834:	784b      	ldrb	r3, [r1, #1]
    3836:	7043      	strb	r3, [r0, #1]
    3838:	788b      	ldrb	r3, [r1, #2]
    383a:	7083      	strb	r3, [r0, #2]
    383c:	4660      	mov	r0, ip
    383e:	4770      	bx	lr

00003840 <memset>:
    3840:	0783      	lsls	r3, r0, #30
    3842:	b530      	push	{r4, r5, lr}
    3844:	d048      	beq.n	38d8 <memset+0x98>
    3846:	1e54      	subs	r4, r2, #1
    3848:	2a00      	cmp	r2, #0
    384a:	d03f      	beq.n	38cc <memset+0x8c>
    384c:	b2ca      	uxtb	r2, r1
    384e:	4603      	mov	r3, r0
    3850:	e001      	b.n	3856 <memset+0x16>
    3852:	3c01      	subs	r4, #1
    3854:	d33a      	bcc.n	38cc <memset+0x8c>
    3856:	f803 2b01 	strb.w	r2, [r3], #1
    385a:	079d      	lsls	r5, r3, #30
    385c:	d1f9      	bne.n	3852 <memset+0x12>
    385e:	2c03      	cmp	r4, #3
    3860:	d92d      	bls.n	38be <memset+0x7e>
    3862:	b2cd      	uxtb	r5, r1
    3864:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3868:	2c0f      	cmp	r4, #15
    386a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    386e:	d936      	bls.n	38de <memset+0x9e>
    3870:	f1a4 0210 	sub.w	r2, r4, #16
    3874:	f022 0c0f 	bic.w	ip, r2, #15
    3878:	f103 0e20 	add.w	lr, r3, #32
    387c:	44e6      	add	lr, ip
    387e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    3882:	f103 0210 	add.w	r2, r3, #16
    3886:	e942 5504 	strd	r5, r5, [r2, #-16]
    388a:	e942 5502 	strd	r5, r5, [r2, #-8]
    388e:	3210      	adds	r2, #16
    3890:	4572      	cmp	r2, lr
    3892:	d1f8      	bne.n	3886 <memset+0x46>
    3894:	f10c 0201 	add.w	r2, ip, #1
    3898:	f014 0f0c 	tst.w	r4, #12
    389c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    38a0:	f004 0c0f 	and.w	ip, r4, #15
    38a4:	d013      	beq.n	38ce <memset+0x8e>
    38a6:	f1ac 0304 	sub.w	r3, ip, #4
    38aa:	f023 0303 	bic.w	r3, r3, #3
    38ae:	3304      	adds	r3, #4
    38b0:	4413      	add	r3, r2
    38b2:	f842 5b04 	str.w	r5, [r2], #4
    38b6:	4293      	cmp	r3, r2
    38b8:	d1fb      	bne.n	38b2 <memset+0x72>
    38ba:	f00c 0403 	and.w	r4, ip, #3
    38be:	b12c      	cbz	r4, 38cc <memset+0x8c>
    38c0:	b2ca      	uxtb	r2, r1
    38c2:	441c      	add	r4, r3
    38c4:	f803 2b01 	strb.w	r2, [r3], #1
    38c8:	429c      	cmp	r4, r3
    38ca:	d1fb      	bne.n	38c4 <memset+0x84>
    38cc:	bd30      	pop	{r4, r5, pc}
    38ce:	4664      	mov	r4, ip
    38d0:	4613      	mov	r3, r2
    38d2:	2c00      	cmp	r4, #0
    38d4:	d1f4      	bne.n	38c0 <memset+0x80>
    38d6:	e7f9      	b.n	38cc <memset+0x8c>
    38d8:	4603      	mov	r3, r0
    38da:	4614      	mov	r4, r2
    38dc:	e7bf      	b.n	385e <memset+0x1e>
    38de:	461a      	mov	r2, r3
    38e0:	46a4      	mov	ip, r4
    38e2:	e7e0      	b.n	38a6 <memset+0x66>
	...
    3900:	eba2 0003 	sub.w	r0, r2, r3
    3904:	4770      	bx	lr
    3906:	bf00      	nop

00003908 <strcmp>:
    3908:	7802      	ldrb	r2, [r0, #0]
    390a:	780b      	ldrb	r3, [r1, #0]
    390c:	2a01      	cmp	r2, #1
    390e:	bf28      	it	cs
    3910:	429a      	cmpcs	r2, r3
    3912:	d1f5      	bne.n	3900 <memset+0xc0>
    3914:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    3918:	ea40 0401 	orr.w	r4, r0, r1
    391c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3920:	f06f 0c00 	mvn.w	ip, #0
    3924:	ea4f 7244 	mov.w	r2, r4, lsl #29
    3928:	b312      	cbz	r2, 3970 <strcmp+0x68>
    392a:	ea80 0401 	eor.w	r4, r0, r1
    392e:	f014 0f07 	tst.w	r4, #7
    3932:	d16a      	bne.n	3a0a <strcmp+0x102>
    3934:	f000 0407 	and.w	r4, r0, #7
    3938:	f020 0007 	bic.w	r0, r0, #7
    393c:	f004 0503 	and.w	r5, r4, #3
    3940:	f021 0107 	bic.w	r1, r1, #7
    3944:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3948:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    394c:	f014 0f04 	tst.w	r4, #4
    3950:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    3954:	fa0c f405 	lsl.w	r4, ip, r5
    3958:	ea62 0204 	orn	r2, r2, r4
    395c:	ea66 0604 	orn	r6, r6, r4
    3960:	d00a      	beq.n	3978 <strcmp+0x70>
    3962:	ea63 0304 	orn	r3, r3, r4
    3966:	4662      	mov	r2, ip
    3968:	ea67 0704 	orn	r7, r7, r4
    396c:	4666      	mov	r6, ip
    396e:	e003      	b.n	3978 <strcmp+0x70>
    3970:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    3974:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    3978:	fa82 f54c 	uadd8	r5, r2, ip
    397c:	ea82 0406 	eor.w	r4, r2, r6
    3980:	faa4 f48c 	sel	r4, r4, ip
    3984:	bb6c      	cbnz	r4, 39e2 <strcmp+0xda>
    3986:	fa83 f54c 	uadd8	r5, r3, ip
    398a:	ea83 0507 	eor.w	r5, r3, r7
    398e:	faa5 f58c 	sel	r5, r5, ip
    3992:	b995      	cbnz	r5, 39ba <strcmp+0xb2>
    3994:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    3998:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    399c:	fa82 f54c 	uadd8	r5, r2, ip
    39a0:	ea82 0406 	eor.w	r4, r2, r6
    39a4:	faa4 f48c 	sel	r4, r4, ip
    39a8:	fa83 f54c 	uadd8	r5, r3, ip
    39ac:	ea83 0507 	eor.w	r5, r3, r7
    39b0:	faa5 f58c 	sel	r5, r5, ip
    39b4:	4325      	orrs	r5, r4
    39b6:	d0db      	beq.n	3970 <strcmp+0x68>
    39b8:	b99c      	cbnz	r4, 39e2 <strcmp+0xda>
    39ba:	ba2d      	rev	r5, r5
    39bc:	fab5 f485 	clz	r4, r5
    39c0:	f024 0407 	bic.w	r4, r4, #7
    39c4:	fa27 f104 	lsr.w	r1, r7, r4
    39c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    39cc:	fa23 f304 	lsr.w	r3, r3, r4
    39d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    39d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    39d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    39dc:	eba0 0001 	sub.w	r0, r0, r1
    39e0:	4770      	bx	lr
    39e2:	ba24      	rev	r4, r4
    39e4:	fab4 f484 	clz	r4, r4
    39e8:	f024 0407 	bic.w	r4, r4, #7
    39ec:	fa26 f104 	lsr.w	r1, r6, r4
    39f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    39f4:	fa22 f204 	lsr.w	r2, r2, r4
    39f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    39fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3a00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3a04:	eba0 0001 	sub.w	r0, r0, r1
    3a08:	4770      	bx	lr
    3a0a:	f014 0f03 	tst.w	r4, #3
    3a0e:	d13c      	bne.n	3a8a <strcmp+0x182>
    3a10:	f010 0403 	ands.w	r4, r0, #3
    3a14:	d128      	bne.n	3a68 <strcmp+0x160>
    3a16:	f850 2b08 	ldr.w	r2, [r0], #8
    3a1a:	f851 3b08 	ldr.w	r3, [r1], #8
    3a1e:	fa82 f54c 	uadd8	r5, r2, ip
    3a22:	ea82 0503 	eor.w	r5, r2, r3
    3a26:	faa5 f58c 	sel	r5, r5, ip
    3a2a:	b95d      	cbnz	r5, 3a44 <strcmp+0x13c>
    3a2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3a34:	fa82 f54c 	uadd8	r5, r2, ip
    3a38:	ea82 0503 	eor.w	r5, r2, r3
    3a3c:	faa5 f58c 	sel	r5, r5, ip
    3a40:	2d00      	cmp	r5, #0
    3a42:	d0e8      	beq.n	3a16 <strcmp+0x10e>
    3a44:	ba2d      	rev	r5, r5
    3a46:	fab5 f485 	clz	r4, r5
    3a4a:	f024 0407 	bic.w	r4, r4, #7
    3a4e:	fa23 f104 	lsr.w	r1, r3, r4
    3a52:	fa22 f204 	lsr.w	r2, r2, r4
    3a56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    3a5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3a5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3a62:	eba0 0001 	sub.w	r0, r0, r1
    3a66:	4770      	bx	lr
    3a68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    3a6c:	f020 0003 	bic.w	r0, r0, #3
    3a70:	f850 2b08 	ldr.w	r2, [r0], #8
    3a74:	f021 0103 	bic.w	r1, r1, #3
    3a78:	f851 3b08 	ldr.w	r3, [r1], #8
    3a7c:	fa0c f404 	lsl.w	r4, ip, r4
    3a80:	ea62 0204 	orn	r2, r2, r4
    3a84:	ea63 0304 	orn	r3, r3, r4
    3a88:	e7c9      	b.n	3a1e <strcmp+0x116>
    3a8a:	f010 0403 	ands.w	r4, r0, #3
    3a8e:	d01a      	beq.n	3ac6 <strcmp+0x1be>
    3a90:	eba1 0104 	sub.w	r1, r1, r4
    3a94:	f020 0003 	bic.w	r0, r0, #3
    3a98:	07e4      	lsls	r4, r4, #31
    3a9a:	f850 2b04 	ldr.w	r2, [r0], #4
    3a9e:	d006      	beq.n	3aae <strcmp+0x1a6>
    3aa0:	d20f      	bcs.n	3ac2 <strcmp+0x1ba>
    3aa2:	788b      	ldrb	r3, [r1, #2]
    3aa4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    3aa8:	1ae4      	subs	r4, r4, r3
    3aaa:	d106      	bne.n	3aba <strcmp+0x1b2>
    3aac:	b12b      	cbz	r3, 3aba <strcmp+0x1b2>
    3aae:	78cb      	ldrb	r3, [r1, #3]
    3ab0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    3ab4:	1ae4      	subs	r4, r4, r3
    3ab6:	d100      	bne.n	3aba <strcmp+0x1b2>
    3ab8:	b91b      	cbnz	r3, 3ac2 <strcmp+0x1ba>
    3aba:	4620      	mov	r0, r4
    3abc:	f85d 4b10 	ldr.w	r4, [sp], #16
    3ac0:	4770      	bx	lr
    3ac2:	f101 0104 	add.w	r1, r1, #4
    3ac6:	f850 2b04 	ldr.w	r2, [r0], #4
    3aca:	07cc      	lsls	r4, r1, #31
    3acc:	f021 0103 	bic.w	r1, r1, #3
    3ad0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ad4:	d848      	bhi.n	3b68 <strcmp+0x260>
    3ad6:	d224      	bcs.n	3b22 <strcmp+0x21a>
    3ad8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    3adc:	fa82 f54c 	uadd8	r5, r2, ip
    3ae0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    3ae4:	faa5 f58c 	sel	r5, r5, ip
    3ae8:	d10a      	bne.n	3b00 <strcmp+0x1f8>
    3aea:	b965      	cbnz	r5, 3b06 <strcmp+0x1fe>
    3aec:	f851 3b04 	ldr.w	r3, [r1], #4
    3af0:	ea84 0402 	eor.w	r4, r4, r2
    3af4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    3af8:	d10e      	bne.n	3b18 <strcmp+0x210>
    3afa:	f850 2b04 	ldr.w	r2, [r0], #4
    3afe:	e7eb      	b.n	3ad8 <strcmp+0x1d0>
    3b00:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3b04:	e055      	b.n	3bb2 <strcmp+0x2aa>
    3b06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    3b0a:	d14d      	bne.n	3ba8 <strcmp+0x2a0>
    3b0c:	7808      	ldrb	r0, [r1, #0]
    3b0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3b12:	f1c0 0000 	rsb	r0, r0, #0
    3b16:	4770      	bx	lr
    3b18:	ea4f 6212 	mov.w	r2, r2, lsr #24
    3b1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3b20:	e047      	b.n	3bb2 <strcmp+0x2aa>
    3b22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    3b26:	fa82 f54c 	uadd8	r5, r2, ip
    3b2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    3b2e:	faa5 f58c 	sel	r5, r5, ip
    3b32:	d10a      	bne.n	3b4a <strcmp+0x242>
    3b34:	b965      	cbnz	r5, 3b50 <strcmp+0x248>
    3b36:	f851 3b04 	ldr.w	r3, [r1], #4
    3b3a:	ea84 0402 	eor.w	r4, r4, r2
    3b3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    3b42:	d10c      	bne.n	3b5e <strcmp+0x256>
    3b44:	f850 2b04 	ldr.w	r2, [r0], #4
    3b48:	e7eb      	b.n	3b22 <strcmp+0x21a>
    3b4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3b4e:	e030      	b.n	3bb2 <strcmp+0x2aa>
    3b50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    3b54:	d128      	bne.n	3ba8 <strcmp+0x2a0>
    3b56:	880b      	ldrh	r3, [r1, #0]
    3b58:	ea4f 4212 	mov.w	r2, r2, lsr #16
    3b5c:	e029      	b.n	3bb2 <strcmp+0x2aa>
    3b5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    3b62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    3b66:	e024      	b.n	3bb2 <strcmp+0x2aa>
    3b68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    3b6c:	fa82 f54c 	uadd8	r5, r2, ip
    3b70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    3b74:	faa5 f58c 	sel	r5, r5, ip
    3b78:	d10a      	bne.n	3b90 <strcmp+0x288>
    3b7a:	b965      	cbnz	r5, 3b96 <strcmp+0x28e>
    3b7c:	f851 3b04 	ldr.w	r3, [r1], #4
    3b80:	ea84 0402 	eor.w	r4, r4, r2
    3b84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    3b88:	d109      	bne.n	3b9e <strcmp+0x296>
    3b8a:	f850 2b04 	ldr.w	r2, [r0], #4
    3b8e:	e7eb      	b.n	3b68 <strcmp+0x260>
    3b90:	ea4f 6313 	mov.w	r3, r3, lsr #24
    3b94:	e00d      	b.n	3bb2 <strcmp+0x2aa>
    3b96:	f015 0fff 	tst.w	r5, #255	; 0xff
    3b9a:	d105      	bne.n	3ba8 <strcmp+0x2a0>
    3b9c:	680b      	ldr	r3, [r1, #0]
    3b9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    3ba2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ba6:	e004      	b.n	3bb2 <strcmp+0x2aa>
    3ba8:	f04f 0000 	mov.w	r0, #0
    3bac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3bb0:	4770      	bx	lr
    3bb2:	ba12      	rev	r2, r2
    3bb4:	ba1b      	rev	r3, r3
    3bb6:	fa82 f44c 	uadd8	r4, r2, ip
    3bba:	ea82 0403 	eor.w	r4, r2, r3
    3bbe:	faa4 f58c 	sel	r5, r4, ip
    3bc2:	fab5 f485 	clz	r4, r5
    3bc6:	fa02 f204 	lsl.w	r2, r2, r4
    3bca:	fa03 f304 	lsl.w	r3, r3, r4
    3bce:	ea4f 6012 	mov.w	r0, r2, lsr #24
    3bd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    3bd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    3bda:	4770      	bx	lr
	...

00003c00 <strlen>:
    3c00:	f890 f000 	pld	[r0]
    3c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3c08:	f020 0107 	bic.w	r1, r0, #7
    3c0c:	f06f 0c00 	mvn.w	ip, #0
    3c10:	f010 0407 	ands.w	r4, r0, #7
    3c14:	f891 f020 	pld	[r1, #32]
    3c18:	f040 8049 	bne.w	3cae <strlen+0xae>
    3c1c:	f04f 0400 	mov.w	r4, #0
    3c20:	f06f 0007 	mvn.w	r0, #7
    3c24:	e9d1 2300 	ldrd	r2, r3, [r1]
    3c28:	f891 f040 	pld	[r1, #64]	; 0x40
    3c2c:	f100 0008 	add.w	r0, r0, #8
    3c30:	fa82 f24c 	uadd8	r2, r2, ip
    3c34:	faa4 f28c 	sel	r2, r4, ip
    3c38:	fa83 f34c 	uadd8	r3, r3, ip
    3c3c:	faa2 f38c 	sel	r3, r2, ip
    3c40:	bb4b      	cbnz	r3, 3c96 <strlen+0x96>
    3c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    3c46:	fa82 f24c 	uadd8	r2, r2, ip
    3c4a:	f100 0008 	add.w	r0, r0, #8
    3c4e:	faa4 f28c 	sel	r2, r4, ip
    3c52:	fa83 f34c 	uadd8	r3, r3, ip
    3c56:	faa2 f38c 	sel	r3, r2, ip
    3c5a:	b9e3      	cbnz	r3, 3c96 <strlen+0x96>
    3c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    3c60:	fa82 f24c 	uadd8	r2, r2, ip
    3c64:	f100 0008 	add.w	r0, r0, #8
    3c68:	faa4 f28c 	sel	r2, r4, ip
    3c6c:	fa83 f34c 	uadd8	r3, r3, ip
    3c70:	faa2 f38c 	sel	r3, r2, ip
    3c74:	b97b      	cbnz	r3, 3c96 <strlen+0x96>
    3c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    3c7a:	f101 0120 	add.w	r1, r1, #32
    3c7e:	fa82 f24c 	uadd8	r2, r2, ip
    3c82:	f100 0008 	add.w	r0, r0, #8
    3c86:	faa4 f28c 	sel	r2, r4, ip
    3c8a:	fa83 f34c 	uadd8	r3, r3, ip
    3c8e:	faa2 f38c 	sel	r3, r2, ip
    3c92:	2b00      	cmp	r3, #0
    3c94:	d0c6      	beq.n	3c24 <strlen+0x24>
    3c96:	2a00      	cmp	r2, #0
    3c98:	bf04      	itt	eq
    3c9a:	3004      	addeq	r0, #4
    3c9c:	461a      	moveq	r2, r3
    3c9e:	ba12      	rev	r2, r2
    3ca0:	fab2 f282 	clz	r2, r2
    3ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    3cac:	4770      	bx	lr
    3cae:	e9d1 2300 	ldrd	r2, r3, [r1]
    3cb2:	f004 0503 	and.w	r5, r4, #3
    3cb6:	f1c4 0000 	rsb	r0, r4, #0
    3cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3cbe:	f014 0f04 	tst.w	r4, #4
    3cc2:	f891 f040 	pld	[r1, #64]	; 0x40
    3cc6:	fa0c f505 	lsl.w	r5, ip, r5
    3cca:	ea62 0205 	orn	r2, r2, r5
    3cce:	bf1c      	itt	ne
    3cd0:	ea63 0305 	ornne	r3, r3, r5
    3cd4:	4662      	movne	r2, ip
    3cd6:	f04f 0400 	mov.w	r4, #0
    3cda:	e7a9      	b.n	3c30 <strlen+0x30>

00003cdc <__register_exitproc>:
    3cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ce0:	f8df a080 	ldr.w	sl, [pc, #128]	; 3d64 <__register_exitproc+0x88>
    3ce4:	4606      	mov	r6, r0
    3ce6:	f8da 0000 	ldr.w	r0, [sl]
    3cea:	4698      	mov	r8, r3
    3cec:	460f      	mov	r7, r1
    3cee:	4691      	mov	r9, r2
    3cf0:	f000 f83a 	bl	3d68 <__retarget_lock_acquire_recursive>
    3cf4:	4b1a      	ldr	r3, [pc, #104]	; (3d60 <__register_exitproc+0x84>)
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    3cfc:	b324      	cbz	r4, 3d48 <__register_exitproc+0x6c>
    3cfe:	6865      	ldr	r5, [r4, #4]
    3d00:	2d1f      	cmp	r5, #31
    3d02:	dc26      	bgt.n	3d52 <__register_exitproc+0x76>
    3d04:	b95e      	cbnz	r6, 3d1e <__register_exitproc+0x42>
    3d06:	1c6b      	adds	r3, r5, #1
    3d08:	3502      	adds	r5, #2
    3d0a:	f8da 0000 	ldr.w	r0, [sl]
    3d0e:	6063      	str	r3, [r4, #4]
    3d10:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    3d14:	f000 f82a 	bl	3d6c <__retarget_lock_release_recursive>
    3d18:	2000      	movs	r0, #0
    3d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d1e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    3d22:	2301      	movs	r3, #1
    3d24:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    3d28:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    3d2c:	40ab      	lsls	r3, r5
    3d2e:	431a      	orrs	r2, r3
    3d30:	2e02      	cmp	r6, #2
    3d32:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    3d36:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    3d3a:	d1e4      	bne.n	3d06 <__register_exitproc+0x2a>
    3d3c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    3d40:	4313      	orrs	r3, r2
    3d42:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
    3d46:	e7de      	b.n	3d06 <__register_exitproc+0x2a>
    3d48:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
    3d4c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
    3d50:	e7d5      	b.n	3cfe <__register_exitproc+0x22>
    3d52:	f8da 0000 	ldr.w	r0, [sl]
    3d56:	f000 f809 	bl	3d6c <__retarget_lock_release_recursive>
    3d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d5e:	e7dc      	b.n	3d1a <__register_exitproc+0x3e>
    3d60:	200004e0 	.word	0x200004e0
    3d64:	20001094 	.word	0x20001094

00003d68 <__retarget_lock_acquire_recursive>:
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop

00003d6c <__retarget_lock_release_recursive>:
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop

00003d70 <___reboot_Teensyduino__veneer>:
    3d70:	f85f f000 	ldr.w	pc, [pc]	; 3d74 <___reboot_Teensyduino__veneer+0x4>
    3d74:	6000185d 	.word	0x6000185d

00003d78 <___init_veneer>:
    3d78:	f85f f000 	ldr.w	pc, [pc]	; 3d7c <___init_veneer+0x4>
    3d7c:	60001df1 	.word	0x60001df1

Disassembly of section .fini:

00003d80 <_fini>:
    3d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d82:	bf00      	nop
